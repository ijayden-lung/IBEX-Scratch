{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "Attaching package: ‘dplyr’\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:stats’:\n",
      "\n",
      "    filter, lag\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:base’:\n",
      "\n",
      "    intersect, setdiff, setequal, union\n",
      "\n",
      "\n",
      "\n",
      "Attaching package: ‘ggpmisc’\n",
      "\n",
      "\n",
      "The following object is masked from ‘package:ggplot2’:\n",
      "\n",
      "    annotate\n",
      "\n",
      "\n",
      "Loading required package: xts\n",
      "\n",
      "Loading required package: zoo\n",
      "\n",
      "\n",
      "Attaching package: ‘zoo’\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:base’:\n",
      "\n",
      "    as.Date, as.Date.numeric\n",
      "\n",
      "\n",
      "\n",
      "Attaching package: ‘xts’\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:dplyr’:\n",
      "\n",
      "    first, last\n",
      "\n",
      "\n",
      "Loading required package: TTR\n",
      "\n",
      "Registered S3 method overwritten by 'quantmod':\n",
      "  method            from\n",
      "  as.zoo.data.frame zoo \n",
      "\n",
      "Version 0.4-0 included new data defaults. See ?getSymbols.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "library(ggplot2)\n",
    "library(dplyr) #加载dplyr包\n",
    "library(ggpmisc) #加载ggpmisc包\n",
    "library(quantmod)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "options(repr.plot.width=15, repr.plot.height=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning message in file(file, \"rt\"):\n",
      "“cannot open file 'Merge_Stock_History.txt': No such file or directory”\n"
     ]
    },
    {
     "ename": "ERROR",
     "evalue": "Error in file(file, \"rt\"): cannot open the connection\n",
     "output_type": "error",
     "traceback": [
      "Error in file(file, \"rt\"): cannot open the connection\nTraceback:\n",
      "1. read.table(\"Merge_Stock_History.txt\", header = T)",
      "2. file(file, \"rt\")"
     ]
    }
   ],
   "source": [
    "data = read.table('Merge_Stock_History.txt',header=T)\n",
    "data = data[ which(data$Stock != '002558'),]\n",
    "ggplot(data,aes(x=Day,y=Net_Value,group=Stock,colour=Stock))+geom_line(size=2)+\n",
    "theme_bw()+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=20)\n",
    "     ,legend.text=element_text(size=30))+\n",
    "theme(legend.position = c(0.7,0.85))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = read.csv('Shanghai Shenzhen CSI 300 Historical Data.csv',header=T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "3922"
      ],
      "text/latex": [
       "3922"
      ],
      "text/markdown": [
       "3922"
      ],
      "text/plain": [
       "[1] 3922"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data$Price = as.double(gsub(',','',data$Price))\n",
    "data$Date = as.Date(data$Date,format='%b %d,%Y')\n",
    "length(data$Price)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 1 × 7</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>Date</th><th scope=col>Price</th><th scope=col>Open</th><th scope=col>High</th><th scope=col>Low</th><th scope=col>Vol.</th><th scope=col>Change..</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;date&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;fct&gt;</th><th scope=col>&lt;fct&gt;</th><th scope=col>&lt;fct&gt;</th><th scope=col>&lt;fct&gt;</th><th scope=col>&lt;fct&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>3381</th><td>2007-04-02</td><td>2850.11</td><td>2,793.96</td><td>2,850.15</td><td>2,793.96</td><td>69.25K</td><td>2.46%</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 1 × 7\n",
       "\\begin{tabular}{r|lllllll}\n",
       "  & Date & Price & Open & High & Low & Vol. & Change..\\\\\n",
       "  & <date> & <dbl> & <fct> & <fct> & <fct> & <fct> & <fct>\\\\\n",
       "\\hline\n",
       "\t3381 & 2007-04-02 & 2850.11 & 2,793.96 & 2,850.15 & 2,793.96 & 69.25K & 2.46\\%\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 1 × 7\n",
       "\n",
       "| <!--/--> | Date &lt;date&gt; | Price &lt;dbl&gt; | Open &lt;fct&gt; | High &lt;fct&gt; | Low &lt;fct&gt; | Vol. &lt;fct&gt; | Change.. &lt;fct&gt; |\n",
       "|---|---|---|---|---|---|---|---|\n",
       "| 3381 | 2007-04-02 | 2850.11 | 2,793.96 | 2,850.15 | 2,793.96 | 69.25K | 2.46% |\n",
       "\n"
      ],
      "text/plain": [
       "     Date       Price   Open     High     Low      Vol.   Change..\n",
       "3381 2007-04-02 2850.11 2,793.96 2,850.15 2,793.96 69.25K 2.46%   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data[which(data$Date=='2007-04-02'),]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nEVGdOnXEYjHrNzd9+nQiWr58uUQiyXdD/VelV6vVb9++dXNz44ZjM1xuKK9Fb1hK7vnz57lm\nkU6dOkVEderUYX+mpKS0b98+Li5uwoQJP//8c1GO127QoMGdO3eio6M/++wz7fKLFy8SUd26\ndbO98ZzbXr58uUWLFjq25Vmtbt26cXFx+VbjifUyZmvTa3vx4gX926lW9x7u3LnTp08fR0fH\nS5cudezY8ciRI9evX69bty7/GPTEukj7+fll6x3p6uras2fPHTt2rFq1atOmTUUWD6P/qvQ8\nj4ecCnROAQAAQHGH4SEAAAAARER2dnbVq1dPTk5ev3791atXO3TowAZE50v/VemrVq3q4eFx\n8ODBbOW7d+8mourVq+eVGJ00aVKuL9q0aVMiioqK0mg0P/zwA6s8bNiw69evjxgx4pdffini\nWSx79epFRHv37tVoNNrlW7duJaI+ffrku21ISIjubXlW69atG59qPHXt2tXS0vLkyZMPHz7U\nLmcfpb+/v52dnY7N371717lz54yMjL1793p7e3///fdExOYnLTKsx2iumT42xe2OHTt4Tgig\nw65du0Qi0cuXL4moQoUKbI4IHfRclZ54Hw85FeicAgAAgOIOiVEAAACAf7DR9NOnT5dIJEW5\nBnf//v2JKDAwkHVnY7Zv375o0SIi0h7JvmjRosDAwHPnzhX0Jf76668DBw5UqVJlzZo1hgi5\nYDp27Ojn5xcbGztt2jSlUklEGo1m1apV4eHh7u7u2vMV5HyDHTt29Pf3v3XrVlBQkI5teVZr\n27Ytn2o8lSlTZtSoUSqVqlevXq9fv2aFZ8+eZcnNwMBAHdtmZmZ269bt2bNnK1eubNOmDREN\nHz68VKlSBw4cuHv3boHC0AfrMZprYrRFixY1atTIysrasGGDAV9x8eLFBU1AFwLP44H0OKcA\nAACgBMBQegAAAIB/1KtXLzQ0NDk5+ZtvvuHWwykCM2fOPHfu3IULF5o2bVq5cmV3d/eHDx/G\nx8cT0YgRI0aNGsXV3LFjx507d2rUqJFtgHC+1q1bR0SpqamNGzfO+ayFhUV0dLR+b0IXiUSy\ndevWtm3brlmzZs+ePdWrV3/69OmLFy+sra1DQ0PZEkZMzjcokUhCQkJatWq1YsWKHTt25LWt\nYavdu3evb9++7LFarWYPmjdvzk2tcOXKFba8z9KlS69fv37x4sVq1ao1btw4LS3t6tWrarW6\n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\nvLhnz54ajSYkJKR79+5ExPUwevz4ca1atdauXevg4MBKuKdevXrVo0ePmTNnElGlSpWWL19O\nRK9fv9ZoNDt37rS3t+/fv3+3bt3YSKuoqKiaNWsWybsvpIMHD7IH5cqVW7ZsGfuPfsOGDbt3\n756YmMhVq1ChQoUKFezs7LjKderUKehr3b59mz3o16/fZ599xh77+fktWrSoTJkyefVT00HP\nD4VnPNwcAm5ubuvWrWPdilu0aPHll19yXdWKOHKex/O7d++aNWtGRN7e3l27diWiKlWq/Pnn\nnywzdenSJbY3LpiXL1+y5LhEIlGr1d988w1L+cXExLAKArYY/wB0XAf4NIiOzY0RUq527tyZ\nlpZGRO7u7j///DM7K/38/Hr27ElEly9ffvToUZUqVfJprNxwKenMzMwhQ4aMHz+eiDp06GBr\na8v6I0dHR799+9bd3T3nto6OjgEBAefPnyeic+fONWnShJWfPXuWLSrl5eXF8pI8Dzw98TwL\nAAAMCz1GQX9IjAIAEBE9ePAgPT3dy8uL5TSVSiVLiWqPm8sX171UqVQaI0iAEuPSpUvsgb+/\nP5eacXd3d3d3f/PmzdOnT3PmAr799lsuK5oNt4r0Z599xjJZRNStWzd7e3siKlOmTO3ata9d\nu0ZE8fHxhn8zBsUNAW7dujXX/cHOzq5169bak4oaBJdX3bp1q42NTePGjR0dHR0dHdmkh3oq\nxIfCM54bN26wB23atOEmW3B2dm7Tpg2XVi7iyHkez/3792fTlWpzd3dn+alcJ6cePXo06zwo\nFos7d+7MDo83b96wZwVvMT0PoUI0iLFDyhVLPhJRmzZtuLPS09MzODiYpcgNMnlxnz59uMfd\nunXjJmq4fft2rolRImrXrh2L7cKFC1OmTGGF3Dj6jh07sgfGaOecCnFVBwDQn0KhkEgkhR76\nAEBIjAIAMCEhIUT0xRdfsNFearWa9Rhl//LEepQQeowC6KRWq7l5J1auXLly5cqcdZ48eZLt\nK3SDBg1y3ZuVlRUb00pEpUuXFovFbEJG7QVquBkA2RQZpozLeXl6emqXF64/mm7dunULDw+X\ny+XPnz+fPn26SCSqVKlS/fr1W7VqxfU+K5zCfSg843n9+jV7kG1dGm5igSKOvEDH86VLl/bu\n3fvw4cP4+HiWU+NwE4lyLCwsWI8/ply5cuyBTCZTqVQSiUTwFtP/ECpQgxRNSNmo1epnz56x\nx2xqV07Dhg0LscNcOTo6al/x3NzcbG1t2QHGHV05tWzZUiqVymSy169fs16r6enpbFi9SCRi\ni0oxBm/nbAp3VQcA0J9cLkd3UdAT0uoAAKTRaLZv325ra9urVy82YxfXY7RwidFs3zoAQFtG\nRgYb6akDW2GJ4+jomNf/elk/PkYsFnNz9ml3Ly0uM08plUquv7n2UN+cfxpEzZo1ly9fzk2a\nqdFonjx5EhYWFhgYOGDAgOfPnxd6z4X7UPjEo91ENjY22ptn+7PIIud/PO/evXvcuHHnzp17\n/fq1lZUVG+ms/YrZODo6aneBybbKPJlAi+l5CBW0QYogpJy0P9+8Oq3rL+e75j4dHVP62Nra\nNm/enD1mXUf//vtv9j8Qf39/Nh0zGaedsynEVR0AoNBu3Ljh4eFx6tQpIlIoFEiMgp7QYxQA\ngM6dO/fkyZMBAwY4Ojqyr8EvX74sRI9Rbig9eowC6GBra8s9njVrFp/11rn8VMlmYWEhkUjY\nBSTbPB6pqanGeMWAgIB9+/bduHEjKioqJibm1q1b7HXv378/bdq0HTt2aFfONh/lx48fiz4e\n7SbKdn0u0Fp5BsTzeE5PT+e60fXp0ycoKIgd1UFBQefOnSv0qwveYgU6hLK9ujEaRJ+QcqWd\nPi7QfwkKJOeeuRLd+et27dqxhZXOnTs3bNiwM2fOsHJuHL2h2ln36V+IqzoAQKGxX3quX7/e\npk0buVxeXH7/BpNlFl8zAAB0YyvzDh06lIgaN268Z8+eW7duFaLHKDcgFHOMAuggFos9PDxe\nvXpFROxf4Li7u7M2efr0qXa5oVaOzkksFterV69evXpEpFAojh8/vmDBAoVCcf/+/devX5cv\nX55Lebx//74IQso3nrya6P79+8aIh0/AfI7n2NhYLrU0ePBgLtfPDdPWJwBhWyzfAHLdyngN\nUuiQciWRSLjPN1sDhoWFJScnE1FAQECtWrX0CTghISExMdHFxYX7k0tbc1Mo5KpZs2Z2dnbp\n6em3b9+Oj4+/ePEiEVlYWLRt25ZV0LOdeZ7+uKoDQBGQyWRRUVFNmzZ98OAB/fuDDXqMgv4w\nlB4AzF1GRsbevXs9PDzY8rVsBrHdu3ez7z8FWrGXy6KixygAw62vTURJSUncY26yv+PHj3NT\nT2RkZEyePHnhwoXBwcE6Ro+WbP7+/uzBqVOnuEvK+/fv9exDl1NWVtaWLVvmzJkzbdo0rtDS\n0rJTp05cIoZdAN3c3NifL1684JbxiYmJ4dZaKeJ4uCY6efIk10QfP35kQ+oEwed41r6bcHWu\nXLnC5acKeswL3mL8A8j1OsC/QfK6jBg8pLywJd2J6MSJE1xUb9++Xbp0aXBwcHBwcIH+q5CX\nQ4cOcY+PHTvGHojFYj8/PyKKiYlZtGjRokWLuAXBGCsrq1atWhGRWq1evXo1m9Ln008/5daD\n0vPA43/646oOAMb266+/Nm/e/NixYw8fPqR/r2/oMQr6Q49RADB34eHhqampY8aMYSv/su8S\nx48fZ88WaLZQ7gsneowCMKVKlRKJRGzuuRUrVnTv3t3FxaVevXoDBgw4fPiwXC5/8eLFhAkT\nBg8erFQqQ0NDo6KiiKhFixY5p1M0E127dj1y5AgRvX//fvz48f369UtNTWW92g3L2tr6r7/+\nevToERHNnDmzS5cuzs7O6enp58+fZ/Mwurm5sWWIateuzW0VFBTUoUMHsVgcHh7u4+Nz+/bt\noo8nZxOlpaWxBfSEwud49vLy4s6F9evXjxgx4uHDhz/++KOnpydLUUVHRz948EB390BtgrcY\n/wByvQ7wb5C8LiMGDynXfRLRwIEDDx06lJmZ+e7du++++65Pnz7p6em///47W7bI39+/Tp06\nejampaXl+vXrRSKRj49PXFwctyR9s2bNSpUqRURPnjzZv38/EdnY2EycOFF72/bt20dERBAR\n+5SJqEOHDtyzeh54/E9/XNUBwNjY71h37tzJ1mPUeBNAg5lAYhQAzB37yZFbvsDR0VH72cL1\nGEViFICxsrKqW7futWvXiOjSpUuXLl364osv6tWr5+npOWvWrHnz5imVysjIyMjISG6TatWq\nzZs3T7iQBdawYcNOnTqxBMe1a9dY07m4uAwfPnzt2rVk0MvLggULxo8f/+HDh6NHjx49elT7\nKWtr67lz57KVfypVqtS5c2eWeUlJSdmzZw8R+fj4DBs2bNKkSYYKhn88uTaRk5PToEGDNmzY\nYMB4+ONzPLu7u/fo0YPlto4dO8a6BHp6eq5Zs6Z3795ZWVmvXr3q37//kiVL+L+u4C3GM4Bc\nrwOzZs3i2SCfffZZrpcRg4eU1z7Lly8/f/78mTNnyuXy6Ojo6Oho7qlKlSr9+OOPhW/Bf5Up\nU6Zx48arVq3SLnR1deVzijVu3NjJyYkN6iciW1vbli1bcs/qeeDxP/1xVQcAY2P/BXrw4AH7\nXQc9RsFQMJQeAMwdu8VyN9RsiVH+PUYVCgU3rxaG0gNw5s6dy2bBk0qln3zyCTcTX8eOHbdv\n396pUyd3d3dLS0sbG5saNWqMGzdu69atZv7L/9y5c8eOHfvJJ59YWlqWLl26U6dO27Zt8/b2\nZs8acPkXb2/v7du3jxw5snr16i4uLhKJxNbWtlq1agMGDNizZ0+jRo24mrNmzRo1alT58uUt\nLS3d3d0HDBgQHBzMzYeYbZ2oIohHu4nKlCnTpUuXkJCQ0qVLGySMwuFzPE+ePHn06NGVKlWy\nsrJyd3fv16/fli1bypUr98MPP5QtW1YikVSsWNHd3Z3/iwreYgUKIOd1gH+D5HUZMXhIeWnd\nuvWuXbu6d+9evnx5KysrGxub6tWrjx07dvv27dxgc30olcrp06cHBQVVrlzZysrKxcWlU6dO\n27dv5zMdqkQiYXMBcaFm65up54HH//THVR0AjIp9azt69Ch7IJfLNRpNVlaWtbW10KFB8fbP\nwAowoMTExMDAwNDQUCPtPyEhwdXV1Ug75yMzMzM9Pd3R0VHASY41Gk1SUhL3fzJBZGRkZGRk\nODk5CfgLlVqtTklJcXZ2FioAIkpPT8/MzBS8HVJTU7nptApqxowZP/7448mTJ9u0aUNEL1++\n/OSTT7hnR48evW7dunx3kpaWdu3atZYtW1pYWCiVylatWp0+fbpw8RSaKZwXWVlZaWlp9vb2\nwv4HxUSukw4ODkYaOZiZmXn37l1j7BmISCwW165dW6FQlIBGLknvJV/79u1jffe8vLxYv7ac\nzKpB8sWnxRi0mz50tN6xY8dmzJhBRK6urty8omZILBb7+vomJyfb2NjY2dkJGElSUpKjoyPr\nViwIhUJhCu2QmJjo7OysPRVvEZPL5SkpKba2ttzyX4LQXhJNEDKZLDU11c7OzsbGRsAwBD8v\nVCpVYmKiVCqdP3/+smXLHB0dU1JSiOjbb79duHBh6dKlO3bsyM0lYjzsmOSWsCt6rB2sra3t\n7e2FioGIkpOT7e3t2Rx0glAqlUlJSQW6TioUil69eoWHh+dVAT1GAcDcGarH6Js3b4iIXaDR\nYxQAAAAAAMBQ2Lc2tsocEcnlcvb9i//03AC5QmIUAMwdS31yv/7Z29tr/yLKPzH6+vVrImKD\nxTDHKAAAAAAAgKGwb1hs4Tsiunr1KhKjYBBIjAKAWYuKitq9ezdp9RgVi8XaM2EVNDE6atQo\nsViMxCgAAAAAAIBB7Nq1i31r47x48YIlRgs0PTdATliVHgDM1759+/bt28duqNrzxTg6OnKr\nuxZ0KH2PHj0WLlyIofRgVCKRSMCZfUo81me8ZDRySXov+eI6++t4v2bVIPni02LaNdFuhaOj\n9fh/BCWbgHMXAkBxcfDgwfj4eO2SjIyM3377jdBjFPSGxCgAmKmnT5/26tWL+zNbYpR7XNAe\nox4eHhYWFvy3AigEiUTi4+MjdBQlmUqlKjGNXJLei24+Pj5z5szJt5pSqTSTBskXzxZjzOdA\nMoa8Ws/HxycoKEiQkEwNflEGAN1kMlm2kqysrAsXLhASo6A3JEYBwEy9e/dO+09uKD0RaS9w\nL5fLee7w7du3dnZ2Li4ulpaWGEoPRmVpaYnvkEZlYWEhEolKRiOXpPdiEGiQwkG76QOtly8L\nCwtuQRUAgJx0fCkrX758UUYCJQ8SowBgpj58+KD9p/49RpOTk11dXYnI0tISPUbBqNRqdUZG\nhtBRlFgikcjOzq5kNHJJei8GgQYpHLSbPtB6+WJNJHQUAGDSsvUYFYlEGo2GiFxdXStWrChQ\nUFBCYD4XADBTHz9+1P5Tu8fowIEDucepqak8d5iRkWFra0tEGEoPAAAAAABgKNkSoy4uLuzB\njBkzME8x6AkHEACYKR09Rj///HPucUJCAs8dcolR9BgFAAAAAAAwlGxD6d3c3NiDJk2aCBEO\nlChIjAKAmcrWY1Q7Maq9MmxiYiKfvSmVSrlczgaCYY5RAAAAAAAAQ+ESo56enkRUpkwZ9qe1\ntbVgMUFJgTlGAcDsZGZm2tjYZOsxqj2UXns4RmJiokajEYlEuvfJJg7jEqPoMQoAAAAAAGAQ\nMpnMzs5u6tSpr169io6Otre3Z+VIjIL+0GMUAMzLli1bnJycDh48mK3HqFQq5R5zPUYdHByU\nSmVKSkq+u2VLqbLEqIWFRWZmJp+tAAAKQaFQzJo1y8nJydHRMTk5WehwCiAmJmb48OHVq1cv\nVarUJ5980qFDh5CQELZ4grZLly4NHjy4WrVqpUqV8vb2HjVq1OPHj3Pu7cmTJ2PHjq1Vq1bp\n0qW9vLwGDRp09erVEhYnz20NW8308fyAiCgsLKx9+/YeHh4eHh4tWrT49ddfc/5yaW6tZ1Ro\nJQAwErlc7ubmNmvWrPXr10dHR3OdWrS/xAEUDhKjAGBebt++rVAo+vXrFx8fT0SDBg0iIpFI\nZGNjw9XhEqNVqlQhfqPpk5KSiMjZ2ZmILC0ts7KyLly4YITwAcDcPXz4sE2bNitXrsw1DWTK\nduzY0bp167CwsKysrNq1a9vb21+8eHHMmDFff/21drXg4OAOHTqEh4dbW1s3adJEo9Hs2rXr\n008/jY6O1q529erVZs2abd++XaFQNG7c2MnJ6dChQ23btt23b1+JiZPntoatZvp4fkBENGHC\nhOHDh1+5csXb29vb2/vWrVuTJ0/u27evWq3m6phb6xkVWgkAjCcjI4P1QWG4adBKly4tUERQ\nciAxCgDmhWUwZTLZ27dv7e3tV61aRUQ2Njbag+W5ofQsMcpn/SWWPHV1daV/R+VnZmYaPnoA\nMG979+5t1qxZXFzc/PnzhY6lYB4/fjx+/HilUjllypQHDx6cOXMmNjZ28+bNYrE4LCzsyJEj\nrNrNmzenT5+u0WgWL15869atiIiI2NjYoUOHZmRkDBs2jJtfTC6XjxgxIjU1dcKECXFxcRER\nEdevX9+4caNarR43btzbt29LQJw8tzVsNdPH8wMioh07dmzevNnT0zMyMvL06dOnT5++fPly\n+fLlT5w4ERYWxuqYW+sZFVoJAIxHrVanp6c7ODhwJewLl6OjI+uYAqAPJEYBwLywxCgRvX//\n3tnZmQ2+YKvJc7geo5UrVyZ+PUZZ8lQ7MSqTyQwZNwAA0Y4dO8qWLXvixImRI0cKHUvBhISE\nyOXyZs2a/fDDD1ZWVqywV69ePXv2JKKIiAhWsmnTJrVa3bVr1zFjxrASCwuLVatW1apV6/nz\n5wcOHGCFERERjx498vf3nzdvHnfF7tOnT9++fdPS0rZs2VIC4uS5rWGrmT6eH5BarV64cCER\nbdq0ydvbmxVWr159+fLlgYGB7u7urMTcWs+o0EoAYDzp6ekajcbR0ZErYT1GK1asKFxQUHIg\nMQoA5oWbjy8pKcnR0VFHYtTCwoJ9d8q3x2hCQsKJEyeIqFq1avTvfRqJUQBBXL161cXFpWzZ\nss+fP9cuP3LkiKOjY5UqVbLNL1y8dO3a9cKFC/7+/kIHUmBNmzadMWNGUFBQtvI6deoQEdeb\njE1H2LlzZ+06IpFo2LBhpJX2Onz4MBH17ds328p4/fr1I6JDhw6VgDh5bmvYaqaP5wd0+fLl\nly9f1q9fv1GjRtrVOnfuvGjRohYtWrA/za31jAqtBADGw5ZzyNljFIlRMAisSg8A5oXrMUpE\njo6OEonEwsIiW2KUDaW3tbVlPUDz7THar1+/48ePSySSli1bEhHrw5KVlWXw4AEgX/Xr158w\nYcLy5csnTpy4d+9eVpiZmTl58mQiWrlyZalSpQQNUC/Dhw8XOoRC+uyzzz777LOc5eyXp7Jl\ny7I/2SW6XLly2aqxn51u3brF/rx58yYR1a9fP1s1VnLv3j2ZTFa41RhMJ06e2xq2Wq6RmBSe\nHxCb5rt169a692ZurWdUaCUAMB6WGOVWoqd/pxZFYhQMAj1GAcC8ZEuMElGlSpW8vLy064jF\nYpFIZGdn5+LiQkRXrlzRvc/3798TUd26dVn9du3aEXqMAghn+vTpPj4+R48eDQ8PZyVLlix5\n8eJF3759u3TpImxsoE0mk7Hkde/evVkJmyks53SE7AcnrhfwkydPiOiTTz7JVs3Jycne3l6p\nVL548aK4x8lzW8NWK6ZyfkD37t0joipVqty9e3fo0KFeXl5lypRp1KjR0qVLtWcAR+sZEFoJ\nAIyHfbGytrbmSsqXL0+5XXMACgGJUQAwL9qJUbay4bVr13KulyqRSOzs7JycnIgo39VU2Tob\nrVq1Yn+yHkNIjAIIxcrKav369RYWFtOmTUtPT793797q1avLlSv3008/CR0a/Me0adOeP3/e\nrl07rmdfvXr1iEh7CR3mjz/+ICKFQiGTybKyshQKBf13SB2HFbKuJcU3Tp7bGrZarpEUCzk/\noPj4eCK6f/9+69ato6KimjRpEhAQ8Pjx44ULF3bu3JkN6UDrGRBaCQCMin2x4qaWJqKAgABn\nZ+fmzZsLFxSUHEiMAoAZ0Wg03Byj9O/cNA4ODto/PzIsMcr6BCmVSt27ZYnRtm3bsj/ZSDEk\nRgEE5O/vP2nSpFevXi1YsCAoKEihUKxevRrrlpoOtVo9adKkTZs2VatWbePGjVz5sGHDRCLR\noUOHfv/9d1ai0Wi2bt3K/alSqbiJSrS/IHFYoXavwOIYJ89tDVst10hMXF4fUHp6OhGtWrVq\n3LhxN2/e3LFjx6FDh06ePFmuXLno6OhffvmFDN3IBn5jxQ1aCQCMiv30oj0dR5MmTRITE5EY\nBYNAYhQAzEhaWpp2lpOtkpSrGTNmjB8/nvUYValUuncrl8vLlSvHzauFxCiAKZg8ebK/v/+6\ndevOnz8/ePBgNscFmIKsrKyhQ4du2LDB29v70KFD2gnrevXqTZo0SaPRjBs3rnHjxj169PD1\n9f3uu+9++OEHIhKLxba2ttxPWexHqWxYYbaZo4tdnDy3NWy1XCMxZTo+IDZXeMOGDX/44Qfu\nXu/v7z9r1iwi2r59Oxm6kQ33tooltBIAGFXOHqMABoTEKACYEe1x9KQzMTp79uzhw4e7ublJ\npVK1Wq17tzKZTPs+zRKjWHwJQFiWlpbdu3dnj3v27ClsMMD58OFDly5dwsPDGzVq9Ndff3l4\neGSrMGvWrM2bNzds2PDp06fR0dHe3t6HDx/u2rUr/bvSgrW1NbvkpqSk5Nw/GxbAppAuvnHy\n3Naw1fJqCtOk+wNiY7ebNWuWbas2bdoQ0cuXLxMSEsy59QwOrQQARsV6jCIxCkaCxCgAmJFs\niVE2lF4He3t7X19fPj1GtUd2oMcogCl48eLF8uXLHRwcxGLxpEmTMIrTFHz48KFDhw5Xrlzp\n1atXREQESyDm1KtXr5MnT7579+7FixcHDhxo0aJFbGwsEfn4+LAKVapUIa01jjjx8fEZGRlS\nqVTP1RhMIU6e2xq2WnGR7wdUuXJl+ndAvbYyZcqwBxkZGWSurWckaCUAMB7W8Vz7CxeAASEx\nCgBmhPVZYCPsSGePUY5EIsm3x6hcLs/ZYxSJUQABaTSasWPHpqWlLV26dMSIEQ8fPpw3b57Q\nQZm71NTUHj163L9/f8yYMZs2bSrQ15sTJ04QUdOmTdmfdevWJaKoqKhs1SIjI4nIz8+Pz+Xd\nxOPkua1hqxULfD6gOnXq0L9r02t79eoVEYlEIldXVzLL1jMetBIAGA9LjKLHKBgJEqMAYEbY\niqiBgYGsOw+f/6OLxWK1Wq3RaHTUyZYYZTNtITEKIKDNmzefOXOmZcuWAwcOnDt3roeHR3Bw\n8MWLF4WOy6x9++23MTExQ4cOXbx4sUgkyrXOuXPnBg8e/OOPP2oXfvjwYceOHWKx+Msvv2Ql\nbJKE3bt3Z7s4h4aGEhFXrVjHyXNbw1YrFvh8QB07drS0tDx79uzjx4+1y//44w8iql27Npvv\n0gxbz3jQSgBgPOgxCkaFxCgAmBE2qq5ixYoVKlQgHkPpiUgikRCRjk6jKpVKqVRq7wpzjAII\n68WLF7NmzbKxsVm5ciUR2dvb//TTTxqNZvTo0Wz8LBS9I0eOHD58uHLlSdgjbAAAIABJREFU\nysuWLdNRzdnZOTw8/Jdffjl79iwr+fjx4+DBg9PS0vr371+1alVW+Pnnn9euXfvOnTvTp09n\nS+ppNJr169dHRESULVt2yJAhxS7OZcuWTZo06e+//+ZKeG5r2Gqmj+cHVLp06a+++kqlUg0e\nPPjNmzes8MKFC0uXLiWiUaNGsRJzaz2jQisBgPGgxygYFUY0AIAZSUhIICI7Ozs2mp5nj1Ei\nUqvVLEOaE+sZyq3HShhKDyC0wMDAtLS0efPmeXl5sZIuXbp07dr18OHDs2bNWr58ubDhFdqD\nBw+GDRvGHnO/1rRv3567Op0+fdpkvzOsWbOGiNLS0tjqN9lIJJJz584RkZ+f36RJk5YtW9a1\na1d/f39HR8fo6OjMzMwGDRpoJ8IkEslvv/3WqVOndevW7d27t1q1as+fP3/58qW1tfXGjRvZ\nwjvFK869e/fGxsZ6e3tzw/B5bmvYaqaP5wdERAsWLIiJiYmMjKxTp07Dhg3T0tJu3LihVqt7\n9eo1ePBgrr5ZtZ5RoZUAwHjevXtH/65tCGBwSIwCgLlQKpWzZ88mInt7e5ZH4DnHKBGpVKq8\nupempqayfXIlSIwCCGjz5s2nT5/29fUdN26cdvlPP/105syZjRs3duvWrWXLlkKFp4/MzMxb\nt25lK7x79y73ON8JkQXEpniOj4+Pj4/P+az2L0+zZ8+uUaPGr7/++uDBA5lM5uXl1adPn7Fj\nx2bL+daqVevixYtLly49duxYVFSUq6trnz59pkyZ4u3tXWLi5LmtYauZOP4fkI2NTURExNq1\na/fs2RMVFSWRSBo1ajR06NABAwZoD8A3q9YzNrQSABgJW9vQ19dX6ECgZEJiFADMxeXLl9++\nfUtaPUb5DKXneozmVYElRh0dHbkSzDEKIKDhw4cPHz48Z3n58uXZuivFl5+fX0pKitBRFJL2\nIPF89enTp0+fPvlWK1++/IoVK/QIKhdCxckWqCnctgavZsoK9AFZWVl9//3333//ve5q5tN6\nRQCtBADGcPfuXVtbW24kEIBhYY5RADAXR44cYQ9sbW359xhliVGVSpVXhZw9Rll3ISRGAQAA\nAAAA9JGVlfX48eNatWqx72UABocDCwDMBZcYtbGx4T/HaL6LL7EOXNqJUbFYbGVlhcQoAAAA\nAACAPmJjY1UqlY+Pj9CBQImFxCgAmIvnz5+zBzY2NizdyX8ovY4eo2zKv8qVK2sXSqVSrEoP\nAAAAAACgj3v37hFRjRo1hA4ESizMMQoA5oLrwsn1GOWTGM23x+jjx4+JqFatWtqF1tbW6DEK\nRqW9eAgYSUlq5JL0XgwCDVI4aDd9oPUAAAohPT2d/js+D8CwkBgFAHPBdeHk5hhlqyTplu/i\nSwkJCUTk6uqqXYih9GBUIpHIzs4u32oajUbY7+EajYY9EDyMggbANuHTyDz3xh4I0g7ce8Hx\nwKjVarFYbKgPtxBMpB0KejwY9qSgImwHtVqtVqtFIpFGo+Hu6RKJhL1u0ZwXOlqvmB4PxghA\nwFcHAFPGvlVJpVKhA4ESC4lRADALcrmcS25yPUb53F9ZClXHUPrExEQicnZ21i60trYuvotH\nQ7GgVCqFDqEkYyd+yWjkkvReDIJd/9EgBVXcDySWd+P+J6Djtm4Mxb31igBrIgCAnORyOfEb\n6gdQOEiMAoBZ4LqLSqVSJycnw/YYFYlEzs7O2t+yMMcoGJVKpYqPjxc6ihJLJBKVLVu2ZDRy\nSXovBiESidzc3NAgBYUDSR9ovXyxJhI6CgAwUSwxih6jYDxYfAkAzAJLU7Zs2fLGjRsFGkqf\nb4/RhIQEBweHbL9hSqVSDKUHAAAAAADQB/tWZWVlJXQgUGIhMQoAZoHdUN3c3NiChqwfKP8e\no40aNVq9erV2+evXryMiIogoISHBxcUl21bW1tbag/cBAAAAAACgoBQKBSExCsaExCgAmAXW\nY5QbgsH6gdrY2OS7IUuMvnv3LjIyUrt81KhRXbp0efnyZUJCQraVl4jIwsKCinwKMwAAAAAA\ngJIEPUbB2JAYBQCzwBKjXBdR/j1GudUAMjIytMtZnvTVq1dyuTxnYpRb61bfuAFM3pYtWzw8\nPEaNGqW72vLlyz08PGbOnGmMGLZv3+7h4TF8+HBj7BwAAAAAhII5RsHYkBgFALPAfmnkbqgB\nAQHVqlWrWrVqvhuyFCr9NzGqUqkSEhKI6OXLl0SUMzGa75JNAAaUkpLikZsKFSrUqFGjc+fO\nK1asSE5OFjrMEuj06dNfffWVv7+/p6enj49Pnz59wsLCcv4icuXKlVGjRtWtW9fT07Nu3brf\nfffd06dPc+7t9u3bY8eOrVevnqenZ82aNb/88svdu3fn3NuzZ88mTpzYqFGjSpUq+fn5jRw5\n8saNG0Z6g0b1119/sQM1JiYm21P5NmyXLl1yPeaZihUrFu1byYeeH5lSqVy4cGGFChU8PDxS\nUlL0qcbzGCuRuOtkhw4d8ro7f/755x4eHnfu3Mn12Z9//pntYfv27caMVEhoJQAwQex7HFal\nB+NBYhQAzEK2HqODBg26f/9+6dKl892Q6zGamZnJFSYkJLAvDHklRtFjFARRvXp1Py3Vq1cn\nohs3bvz000+fffbZkydPjPGiQ4YMefz48bp164yxc1P2f//3f4MGDTp27JhEIvH19bW2tv77\n77+/++670aNHa5/7Gzdu/PLLLyMiIqytrRs2bEhEYWFhn3/++fXr17X3tnfv3s6dOx88eFAm\nk/n6+trZ2UVGRgYFBQUGBmpXu3HjRvv27Xft2qVQKBo0aODo6HjkyJFu3bodOnSoaN61oSQn\nJ0+fPj3Xp/g0bLVq1fxyU6tWLTKx0XZ6fmSPHz/u0qVLcHCw7hsKn2o8j7ES79atW9u2bSvo\nVmq1evfu3ezxzp07DR2UyUErAYDpYIlRPnOgARQOEqMAYBay9RjlL9ceox8+fGAP3rx5Q0TO\nzs65boUeo1DENmzY8KeWkydPxsXF7dmzx9PT882bN0ZKf0gkEqlUyubVNR+nTp1at26dpaVl\ncHDwtWvXIiIirl69um7dOrFYfPjw4T///JNVu3Pnzrx58zQazdy5cy9duhQWFhYVFTVgwICM\njIzRo0ezxQSI6OnTp5MnT1Yqld99992NGzciIiKio6PZ3g4ePHjs2DFWTaFQBAYGpqamjhkz\nJjo6Oiws7MKFC6tXr1ar1ZMnT37//r0wbVEos2fPfv/+fc5flXg27C+//PJnbnr37k1EI0eO\nLOr3kwc9P7IDBw60b9/+3r17uueg4FON5zFW4jk4OIhEoiVLlnD3cZ7OnTv38uXLJk2alC1b\nNiYmJjY21kgRmgK0EgCYlGwdXAAMDolRADALLDFaiBsql0vNNTH68eNHIrK1tc22Fesx+vbt\n20IFC2BITZs2DQ4OJqIbN27ExcUJHU4JwXpFjRgxolu3blzhF1988cUXXxDR6dOnWcm2bdvU\nanXHjh25VJ2FhcXSpUtr1Kjx4sULrs/g7t27FQpFQEDAlClTuJFi3N6OHj3KSo4ePfrkyRNf\nX98ZM2Zwndm//PLLnj17pqWlFaOBq6dOnQoLC+vatWuVKlWyPcWzYXP19u3bZcuWeXh4jB8/\n3ghRF4aeH1lYWFiZMmUOHz48dOhQPavxPMZKPDc3t759+6akpCxYsKBAG+7YsYOIunXr1qVL\nFyLatWuXUeIzDWglADApbNweEqNgPEiMAoBZKHSPUXt7e/YgPj6e66zEJUbZg5yJUdZjtFmz\nZoWNF8CQ/P39HR0diejBgwfa5TExMWPHjq1fv76np2ft2rUHDBiQs+NYXFzcuHHj2PSINWrU\naNmy5fz587WT/jkXX5LJZMuWLWvatGnlypXr1Kkzbtw4NumEtvXr13t4eIwbNy5b+fz58z08\nPObPn8+VqFSq7du3d+/evWbNmhUrVqxZs2avXr0OHz6s+y3nG7aevv/+++3bt3/99dfZytnM\nxeyCQ0RsvHz79u2164hEogEDBpBWNqpx48aTJk0aO3Zstr3Vrl2biLh+hewS1LNnT/bTC+fL\nL78koiNHjuj/vopAamrqlClTHB0dtT9lDs+GzdXs2bPT09Pnzp1rOqPt9PzIOnbsePToUV9f\nX/2r8TzGSrysrKyZM2c6OTmFhYVduXKF51YfP348duyYhYVFly5devbsSUT79u3jenyXPGgl\nABCKSqW6e/dutksHS4yazs0dSh4kRgHALLAhGHomRjt37sxWtOASo2xBm5z3afYd2Hy+aoKJ\n02g0KpWKtI5nIgoLC+vWrdvBgwc9PT379u3r5+f3999/f/XVVwsXLuTqXLt2rXPnzvv373dy\ncurcuXOrVq1kMtmvv/7atWvX169f5/Vyo0aN+uWXXz5+/Mg2uXPnTufOnQs6JJMzbty4adOm\n3bx5s27dut27d/fx8bl8+fK33367cuXKvDYpXNgFUqNGjTZt2pQrVy5b+c2bN4nIx8eH/cmu\nGO7u7tmqsZ6Sd+/eZX+2atXq+++/b926dbZqiYmJRFSmTBn25+3bt4moTp062arVrVuXiB4+\nfMiWbTVxCxYsePPmzZw5c9zc3HI+y7Nhczp37lxERETz5s07depk2ID1oedHNmjQIAcHh3xf\nhU81nsdYiadQKFxdXadNm0ZE06dPVyqVfLbau3evQqFo06ZNqVKl/P39a9SokZiYWIK72aKV\nAEAoc+bM8fHxad68OVeSmZnJ5uVAj1EwHiRGAcAsFHoovZ2dHfdYo9GkpqaSVmI0LS2N8u4x\nqlareX6dADCqixcvpqenExFbjomInj9/PnnyZI1Gs2HDhv379y9dujQ0NPTIkSMuLi7BwcEX\nL15k1dasWZOVlTVp0qTjx4+v/X/27jS+qSp/A/jJ1qRL0oXSsrYsLVCWsghlE1QUV0RBRMDd\nmb/LuA8iMIqIgriNMqgzooyioIgiqMMigiKCQMtioSDdoIWylS5p1mbP/8VvOHNN0pAmabP0\n+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\n79u3b+vWrePHj6cvT5w4wS4OOEulHp07dz527FhtbW1jY6PBYKitrfUxGKXTifq8UzGpUqlk\nF4fnSkxMpO50vow2e/jwYeGX1dXVOp2OglGVSrVgwYL/Z+/M46Oosj1+utN70p2dJCRAFhII\nm4CSgBIVVFwRcR0dZ0RFdJ6OqPMeuOGMjqIMozOOOqLijIoL6oz4BMGNRZElQfZASBoCZF87\n6S29d78/zsudsnpJdaeT7k7O9498qivVVbequ6vu/d3fOUfIWRPE0ICEUYIgYoCzZ8+y5Y6O\nDm9hlOcY5ZVTiFqEO0aRurq65ubmrKysAW8ZQRAEQUQlKIzOmzdv0aJF/dwVewqLRCJUmtB1\n9d577+F6EkaJkGHF5b3r54RMXFyc0+lkseE8uI7RAwcOdHd3V1ZWem/W1NQkl8v9pT0NQL/8\nodUag8W38oD5Q2eN12cmhVJIHfzUl2fmR4ZKpbJarR6PJ0BZJC7r1q2rrq7+6aefBAqj3Liu\nlpaWN954gwmjp06dgt7SRuvXrweAhISExMTE9vZ2vL0w86bD4XC73QIdoyiM4mleffXVf/vb\n32677Tac1/E3smBs3779+++/565pbW01GAz9T1FCELEICaMEQcQA3AziFRUVRqMRVVFWLTHW\nQ+n1ev277757xx138DbgCaMAsH379ttuu20wGkcQBEEQ0QcKo7NmzfIZTRwU7CnMug0ojDLb\nHQmjRGhs3boV63prNJrFixeHa7cojPrL/CiVSt1ut9vtFovFmCSXGyvNOPfccyUSSUZGxhdf\nfCEkH0UoeqhHdLxeVaHV7NOqTb78oQCQn2HF+vLpgusp8QhcX95gMOTk5HDXKJVKj8djtVoF\nFltH2ZEXFB8AVCTnz5+/adMmj8eDHwGCwuh333134sSJBx98EADkcnl6enpHRwc6PdknhZ7W\noIRRdIzGx8f/9re/BQDMo9qnYxS/n6gRY2rUpqamnp4ef7I7QQxtYsNURRDEMIcrjDocDr1e\nn5iYCJxqiUxAxNFLrAijrJ1Go3HRokXekfLegzHe7C5BEARBDCtQGA2LC48Jo2wBhVG2jJoF\nCaNEsLz11lv19fUA8Omnn15xxRXh2i1+UTH1rTf47f3lL38JvT1nb2FUp9O1tLQ0NDTs379/\n9+7dgQ9XVVUVlCrq9kBNk2rdjowH3xq76rPR248meaui2Sm262d2rL7j1NO3nr76vM4QVNHi\n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\nmFsLLRj9n//zf46MjDQ0NFx77bXH9MQ9e/akwQS72BcKhXSZ0YGBgd7e3mmUCf/f7bffngbW\n0QMAAADMpQUVjD700ENpkfsb3vCG9evXH9NzDx48mAZLly6d4GHVe6uPh+n48Y9/nAY6RgEA\nAADmUmPWBcykr3zlKxHR1NQ0+T2XqoaGhtJg4sa96r3VxyeDg4PDw8Np3NfXFxHpwpGzZFZP\nPslXHxsby7CMag1ZFVBbyXTK2LZt28qVK7u7uwuFwhTOs2DmYfqvHuYhH/OQh++H2kqyfXXz\nkId58Lk4vJJsX908mIfaVzcP5mHcq+dhHjL/zYp8zEPmr+5zkat58LkI81BTyfyah6M+cuEE\no4888sgjjzwSEZdeeumyZcuO9ekjIyNp0Ng40ZxU2/qqj0/+y3/5L9U10Z2dnStXrjxw4MCx\n1jB5s3ryScrDxQTyMA9pz64pO3jwYEdHR29vb2Nj45T/OAtgHmZEHuahp6cn6xJyMQ/9/f39\n/f3Z1pCHeejr60v/qyxDeZgHvxeJeUgGBwcHBwezrSEP8zAwMDAwMJBtDXmYB78Xid+LJA/f\nD93d3dkWEPmYh66urmwLiHzMQx4+F3n4vcjD56JUKpVKpWxrKJfL2RYQEUNDQ+O69OZeHtZP\nH9P3w/Dw8Ojo6AQPWDjBaNpzKSJ+/dd/fQpPr24IXqlUJnhY9ZMwbgPxE0888dxzz03jQqHw\n3HPPzd7K6OHh4WyXXY+Ojo6MjDQ2NqatqLKyMOahv79//fr1Bw4caGpqmsIfZ2xsLNUw5QKm\nb2RkZHR0NNv3g3moysnnoqGhob4+y0u1ZD4P6f1gHvxeJD4XydjYWKVSqa+vH/eXqDmW+Tx4\nPyTmIfE9meTk+6FSqTQ0NGT7d9o8zEPm74f0uTAPOfme9LlIMp+HiBgeHjYP6f0ws5+LBRKM\ndnd3p6uLnnLKKRs3bpzCGVpaWtJg4v8JUL23tbW19vi73vWud73rXdVi3v/+96dtmmZDV1fX\n7J18MgYHB/v7+1tbWzPcL2hsbOzgwYPZzkP6f3dtbW1T/r2sVCpDQ0OdnZ2XXHLJ8uXLp/DH\nGR0dPXToULbz0N/fPzg4OJ15mL7R0dHe3t5s56Gvr29oaKi9vT3DfDYPn4uhoaG+vr6Wlpbm\n5uYMy8jP92SxWMywjPzMg9+L9HuR7T57mb8fyuXyoUOHmpubx/0lao51d3dnOw+lUqm3t7e5\nubn6l89MZP5+8HuRVOch29+LzD8XlUrl4MGDxWKxra0twzIOHjy4ZMmSDEOo4eHhnp6ezOeh\nu7t7yZIlGQYffi+SnPxeZP65GBkZ6e7ubmpq6ujoyKqGiDh06FBra2uG/9ZL81AoFNrb27Oq\nISJ6enra29szDGfT70WhUJj892QKlCd4wAIJRu+6667UGXvppZdO7QzV1fcTd4lX1xRMvEcT\nTEZaM9XR0fHNb34z61oAAAAAFpcFsiv9D37wgzQ477zzpnaGdevWpcGePXte7DEDAwPpAmFL\nlizJ9n/isTCkt1O2/8MHAAAAYHFaCMHogQMHnnrqqYg47rjjli9fPrWTnHTSSWnw6KOPvthj\nqnedfPLJU3sVqFXN2bMuBAAAAGDRWQjB6AMPPJAGZ5xxxpRPcsIJJ6xatSoiHn/88RdbTf+T\nn/wkDc4///wpvxBUpZ3cs71UCgAAAMDitBCC0ccffzwNNm3aNOWT1NXVXXzxxRExOjp6yy23\nHP6AAwcOfO9734uIYrH46le/esovBFU6RgEAAACyshA2X3rmmWfS4LjjjpvM4//H//gfw8PD\nEfHmN7959erV1eNvetObbr311v7+/m9+85snnXTSa1/72updvb29H/3oR0ulUkT85m/+Zra7\n47FguMYoAAAAQFYWQjC6e/fuNKhNOSdw++23Dw0NRcTFF19c+5TOzs53v/vdn/rUp8bGxj7x\niU985zvfOeOMM1paWnbt2vXDH/6wp6cnIrZs2XL11VfPwh+CxWjfvn0RsWLFiqwLAQAAAFh0\nFkIw2t/fnwYtLS3TPNUll1xSqVT+6q/+qlwuP/jggw8++GDtvWecccYHP/jBxsaFMGnkQQpG\n08VtAQAAAJhL8z7jK5fLlUoljacfjEbEFVdcceaZZ/7f//t/f/7zn+/Zs6dcLnd2dp5yyikX\nXXSRPZeYWSkYnWSnMwAAAAAzaN4Ho4VC4Vvf+tYxPeVrX/vaxA9YtWrVtddeO/WaYHL27t0b\nOkYBAAAAsrAQdqWHeUrHKAAAAEBWBKOQjT179jzxxBPNzc12pQcAAACYe4JRyManPvWpbdu2\naRcFAAAAyIRgFLLR1dUV1tEDAAAAZEQwCtk4dOhQ2HkJAAAAICOCUZh1Y2Nj3/3ud4eGhmoP\npmB0zZo1GRUFAAAAsKgJRmHW3XXXXVdcccXnPve52oOCUQAAAIAMCUZh1v3yl7+MiO7u7tqD\ne/fubWpquvTSSzMqCgAAAGBRE4zCrHvmmWciYtxS+ueee+7EE0983etel01NAAAAAIubYJRZ\nd9999/3+7//+4OBg1oVk47vf/e6XvvSliCiVStWDt91226FDhzZs2JBdXQAAAACLmmCU2XLz\nzTffcMMNv/jFL2666abPf/7zd999d9YVZeN73/teT09P1ASj27Zte9Ob3hQRL3vZy7KsDAAA\nAGARa8y6ABas66+/vru7u6urq7m5OSJ++ctfXnXVVVkXlYGDBw+mQTUYffTRRyuVSkSceeaZ\nmZUFAAAAsLjpGGW2pEtq3nvvvSkQrF1IvkiMjo52d3cfHox2dXWlwctf/vJsKgMAAABY9ASj\nzJZyuRwRjz/++LPPPlu9uajccMMNmzZt2rZtW7r5/e9/v6+vLyIOHDgQEUuXLj399NOzrA8A\nAABgEROMMitGRkZGRkYiYmxs7Mc//nFEDA8PZ13UXPvxj3/c19f3wAMP1NfXR8Tu3bv/8i//\nMiJ27twZETfddFOhUMi4RAAAAIDFSjDKrKjtD+3t7Y1FGYw+/fTTETE4OPjSl750zZo1EfGj\nH/0oIh577LGwjh4AAAAgU4JRZkUKRpuamqpHFlswmi4wmsZXXXXVQw89FM9Py44dO5qamjZs\n2JBlfQAAAACLm2CUWZESwKVLl447skhcffXVS5cuTRcTiIj29vb29vZ4Ph3euXPn+vXr0/p6\nAAAAADIhmmFWpBi0s7OzeuRLX/rSJz/5yewqmlMPPfRQuoBAUiwWU/Ps8PBwuVzet2/fxo0b\ns6sOAAAAAMEos+PwYLRUKqUrbC4G464bUCwWGxsb6+rqyuXyW9/61tHRUevoAQAAALIlGGVW\npGB0yZIltQdLpVJG5cy1ccFoc3NzRDQ1NQ0PD3/ve9+LCB2jAAAAANkSjDLzRkdH77333njh\nNUZjEQejxWIxIgqFwvDwcH9/fwhGAQAAALImGGXmvfe977322msjYt26dbXHF20wWu0YPXTo\nUKVSiYiTTz45m8oAAAAAiAjBKDPuox/96F/91V+l8caNG+vr60877bS1a9fGYgpG05UEqtKW\n9E1NTV1dXRFx2WWXXXXVVdlUBgAAAEBERDRmXQALyt/8zd988IMf7OjoSHuyr1mz5tOf/vSW\nLVsuvvjipUuXLp5gNHWMdnZ29vT0vPWtb73yyisjoqmpqa+vLyJWr15dV1eXcYkAAAAAi5tg\nlBnzxBNPXHvttW1tbV/96ld/7dd+LSJWrFhx3XXXpXubm5sXVTD6kpe85M477ywWi9XLiRYK\nhTSwjh4AAAAgc4JRZsyvfvWroaGhD3/4wxdeeGE6smLFiuq9xWJxaGgoo9Lm1MjIyOjo6Pr1\n60888cTa401NTWnwL//lv8yiLgAAAAD+mWuMMmPS+vH29va011BELF++vHrv4ukYTRcYrcag\nVZ2dnRFRLBY3bNiQQVkAAAAA1NAxyoxJwWhTU1OxWKyvrx8dHa3tGG1ra+vu7s6uurmwY8eO\ne++9d3BwMI4UjK5evToiNm/eXF/vf0gAAAAAZEwwyoypBqMR0dzcPDg4WBuMtre39/f3Z1bc\nnHj/+9//rW99K43TTvS1Vq1aFREnnHDCXJcFAAAAwGEEo8yYu+++O54PRltaWpqamhob//kN\n1t7ePjIyMjg42NLSklmJs+zAgQN1dXWf//znI+Kyyy4bd+/atWsjYvPmzRlUBgAAAMALCUaZ\nMb/85S/j+WB0w4YN49aSpw7Kvr6+ajD68MMPb9y4cenSpXNe6WxJf7p3v/vdR7x33bp1EeEC\nowAAAAB54FqHzJjR0dGIKBQKEXH33XffeeedtfdWg9F0s6en56yzzvr93//9OS9zFvX397e1\ntb3Yva985SuLxeK55547lyUBAAAAcEQ6RpkxKRhNjaK1+9EnKTGsDUaHh4e/+tWv9vX1ffvb\n357bSmdLX1/f4ZcWrbrwwguHhobmsh4AAAAAXoxglKkbGhoqFAr19fU33nhjQ0PDyMhIHGk3\n9iQlhtX9l8rlchps3bp1ToqdC729vWmHJQAAAAByTjDKFJVKpZNOOqlQKNx///3XX399X1/f\npk2b4mjBaLVjtFQqpcGCaaLcs2dPf3//xo0bsy4EAAAAgKMTjDJFTzzxxN69eyPigQce6O3t\njYh0M11j9HDjgtFqx+jg4OAcVDsHvv71r0fE2WefnXUhAAAAABydzZeYiq1bt/7u7/5uGj/+\n+ONpkCLOSQaj1Y7Rcrmc1uDPd5/4xCdaWlp+7/d+L+tCAAAAADg6wShT8Z3vfOf+++9P42ow\nGhET7Lre2toaNf2h1Y7RWBBNo9u3b3/mmWcuv/zy9evXZ10LAAAAAEcnGGUqqo2fcVgw2tHR\nccSnNDc3R00GWu0YjQVxmdFnn302Ik444YSsCwEAAABgUgSjTEV1c/mIeOyxx6rjhoaGF3tK\nS0tL1GSgC6xj9ODBgxGxdOnSrAsBAAAAYFIEo0xFbTC6bdu26ri+/kXfURN0jM73YHT37t0P\nPfRQCEYBAAAA5g+70jMVKRhdvnx5V1dX7dZJEwSjqWP08ccfHx0dra+vX0jB6Jve9KZ0xdXO\nzs6sawEAAABgUnSMMhWf+MQnLr300k9+8pPjjk+wlD51jH7lK1/5P//n/8QLe04HBgZmp8w5\nki4wGs//GQEAAADIP8EoU7Fx48bbbrvtN37jN8YdP2rHaER0d3c/9thj3//+96t3zeuO0Uql\ncujQoTQuFArZFgMAAADAJFlKz9R1dHQ0NjZWKpXqkQmC0bVr17a2tg4MDJRKpfe85z3/+I//\nGBF1dXVjY2PzOhi95ZZb+vr60lgwCgAAADBf6Bhl6urq6sZtNzTBUvpVq1Z97nOfi4hyuVxd\nR3/VVVfFPF9K/4tf/KI6FowCAAAAzBeCUaZl+fLltTcn6BiNiNbW1ogolUrV/ZpWr14dEdWO\ny/nohz/8YXUsGAUAAACYLwSjTMuyZctqb07QMRoRxWIxXhiMnnTSSRHxzDPPzFZ9L7R3794b\nb7zx6quvnqkodnBw8N57763eTH9AAAAAAPJPMMq0jAtGJ+4YTblhuVyuBqMvfelLI+Kpp56a\ntQJf4J3vfOe73vWub3zjGw899NCMnPC+++4rlUqnnXZauqljFAAAAGC+EIwyLdVgNF1sdOJg\nNOWGpVKpul/TKaecUl9fP2fB6Pbt29Ogt7d3Rk7Y1dUVEWeffXa6KRgFAAAAmC8Eo0zLRRdd\nFBGNjY3r16+PyS2l3717d7VjdMmSJevXr9+6dev9998/+8X+/xwzZi4YTdtGbd68Od0UjAIA\nAADMF4JRpuXqq6+OiMbGxrVr18bkltLffPPNzz77bDpSKBROPPHE4eHhRx99dLZLHRsbm/Fg\ntL+/P2qCUdcYBQAAAJgvBKNMS1tbW0Q0NTWtW7cujhaMpnX3o6OjKU+MiGKxePHFF0fE0NDQ\nbJc6NDRUXcI/U8Ho4OBgRKxYsaK9vb2xsXHDhg0zcloAAAAAZltj1gUwvzU3Nzc0NFQ7Ride\nSr9mzZpxR1LHaMxJMJpCzCQtgZ++dJ62trazzjqrrq7OUnoAAACA+UIwynS1trZOsmO0ra1t\n5cqV+/fvrx4pFArNzc0RUSqVZrvOlL0Wi8VSqVQul2fknCkYmBPoeAAAIABJREFUbW1tveuu\nu2bkhAAAAADMDUvpma62trZJXmM0Iu666643vvGNadzY2NjQ0JCC0dnuGB0dHb355psjYsmS\nJTFzOWwKWAuFQmNjY2Oj/80AAAAAMG8IRpmua6+99rd/+7fT5TVPOOGEiR98xhlnnHnmmWm8\nadOmeH7DopkNRm+44YYNGza8853vrB655557/v2///cR0dnZGc8HmtOXzmPPJQAAAIB5R48b\n0/Vf/+t/jYjh4eGPfexj11xzzVEfn1pEt2zZcv/991dvzmww+tnPfnZ4ePjmm2++4YYbzjrr\nrLGxsfe+973prhSMznjH6IycDQAAAIA5IxhlZjQ1Nf3bf/tvJ/PIFCO2tLR0dHTELASjlUpl\neHg4jQ8cOBARDz300COPPJKOzEYwqmMUAAAAYN6xlJ65loLR6v71Kak8dOjQTJ2/NmMdGRmJ\niDvuuKN6ZM2aNTHTS+l1jAIAAADMO4JR5lrqr6wGo8uWLYuI7u7umTr/4OBgdVypVCLiBz/4\nQbp5ww03pLZWS+kBAAAAFjnBKHMtxYjVPdyXLl0aMxqMHt4x+sQTT6Sbb33rW1etWhWW0gMA\nAAAseoJR5tq4pfSFQqG9vX3fvn1f+cpXurq6pn/+2mA0dYzu3bs33SwWiynEtJQeAAAAYJET\njDLXUoxYGyauXr360Ucffcc73vHZz352+uevXUqfOkar/aHFYrGpqSkiqrszTVO5XK6rq9Mx\nCgAAADDvCEaZaylGTEvak7QhUkQcPHhw+ucfGBiojlPH6OHB6Ex1jO7Zs2fVqlV1dXUzcjYA\nAAAA5oxglLmWekVXr15dPXLcccelQV9f3/TPX5uujoyMjI2NVftDi8VievUZ6RitVCrPPvvs\npk2bpn8qAAAAAOaYYJS5dsIJJ7S2tp5zzjnVIyeffHIa9Pf3T//8PT09EXH88cdHRKVSKZfL\nY2NjEVEoFDo7OxsbG+vq6makY3TXrl2VSmXz5s3TPxUAAAAAc6wx6wJYdE4++eRxAWg1GJ3B\njtGNGzc+88wzIyMjaR39BRdc8MUvfrGtrS0impqaZqRjdPv27fF8AgsAAADA/CIYJXvVYHRG\nrjHa3d0dEStXroyIP/uzP1uxYkW6edppp6UHzEgwum3btquvvjoiLKUHAAAAmI8spSd71WD0\nkUcemf7Z9u3bF89v6PT000+/9a1vjed3fEqampqmv5T+ySefTP2tltIDAAAAzEeCUbK3bNmy\nSy65JCL27du3c+fOaZ5t//79EbF27dp0M2Wgac+lpFAoTL9jdGBgIA0spQcAAACYjwSj5MIF\nF1yQBj//+c+neaoHH3ywsbFx3Ar3lpaW6nhGOkarwail9AAAAADzkWCUXHjLW96SmkYfeOCB\n6Zzn4Ycf/vnPf3755ZcvXbq09nhzc3N1PK5j9B/+4R+efPLJY32hFIwuX768vb19GvUCAAAA\nkA3BKLlw5plnfvGLX4xpd4zec889EfHmN7+5sfEFG4vVdowWCoVqx+jg4OAVV1zx3ve+91hf\n6Pbbb4+IE044YTrVAgAAAJAVwSh58ZKXvKSzs3OawejQ0FBELF26tKGhISIuueSSzs7OeGHH\n6JIlS3p7e8fGxiJix44dlUpl7969x/QqPT09X/va1yLi2muvnU61AAAAAGRFMEpe1NXVvfzl\nL3/66ad7enqmfJLUCtrU1HTaaaedcMIJH/jAB0488cR4YcdoZ2dnpVL5whe+EBG7du2KiIMH\nDx7Tq/zsZz9LuerLX/7yKZcKAAAAQIYEo+TIK17xirGxsaM2je7atevxxx8/4l3p4qGFQuEl\nL3nJk08+edVVV23evDle2DGaLj/6nve854orrujr64tjD0bvu+++iPid3/mdU0899ZieCAAA\nAEBOCEbJkTPPPDMmcZnRa6655jWvec0R70odo4VCoXrklFNOiRd2jK5atSoNvvvd7959990R\ncejQodQBOkmpwj/8wz+c/FMAAAAAyBXBKDmSgtEvfvGLO3bsGHfXt771rd27d6fxjh079u/f\nf8Qos7qUvnrkta99bV1dXe0uSX/8x3983HHHpXFaUD86OpouTjpJ+/bti4j169dP/ikAAAAA\n5IpglBw57bTTCoXCww8/fOutt9Yef+qpp37913/9P//n/5xudnV1jY6OVneWr1VdSl898oY3\nvKG3t/f1r3999ci6devWrVuXxmkpfUQMDg5Ovs6enp6Ghoa2trbJPwUAAACAXBGMkiOFQuH0\n00+PiP7+/trjqUOzt7c3IoaGhtK9R4wyU6tpbcdoRByeYKZLjlbj0YgYGBiYfJ0HDx7s7Oys\nq6ub/FMAAAAAyBXBKPly/vnnx2ExZXd3dzy/TL6rqysdPOLi93TN0NqO0SNKwei1116bNmKK\niMHBwcHBwclcabS3t3ffvn2dnZ1HfSQAAAAAuSUYJV/e8pa3xGHdoGnX+HK5fOedd1500UXp\n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\nQ2MUAAAA+vbkk09u3LjR9q7027Zt+9e//uXOMdAYBQAA0B1uvgQAAAD12d58aeDAgfv27avv\nGpYvX/7000/LDyMiIjIyMmy7pTVKTEzcvHnzsWPHTp8+fe3ateLiYj8/vyZNmrRt23bAgAHD\nhw8fO3asn1/N1+VPSEgYOnRonQPLyclp3bp1jS9VVFT8+OOPe/bs+fXXXy9evJiXl1dZWdm4\nceOOHTv2799/9OjRY8aMqXMXAAAA4BwaowAAAFCf641RaUHb2zGtWrVq6tSptc0cHx//yiuv\nnDp1yv46w8PDFy5cOHny5OovudIYtVqt//znP+fPn3/u3Dk7y0ZERCxZsmTcuHF1bgUAAAD1\nxan0AAAA8BDz5s2zfWjnbPpZs2aNGTOmzq6oECInJ2fKlCnPP/98A4zv34qKisaPH//cc8/Z\n74oKIbKyssaPH//oo49aLJYGHAAAAAAER4wCAABACxrkiFEhRL9+/Y4fPy5N+/r6FhQUNG7c\nuMo8//jHP5577jnbZ2JiYuLi4lq2bNmsWbPy8vLs7Oy9e/cmJCTYlsqffPLJ9OnTbZcqKio6\nefKkECItLc320NQVK1b06NFDfmgymWxPhy8vLx86dOj+/fvlZ4xG47hx4+Li4iIiIqStJyQk\nbN682Ww2y/M8/vjjK1asMBgM9Y8EAAAANaMxCgAAAPU1VGN0zpw57777rvxwx44dI0aMsJ2h\nuLi4Xbt2RUVF0sPQ0NBvv/125MiR1VeVnJw8duzYixcvSg+bNm2amZkZFhZWfc5jx471799f\nfpiUlBQdHV3bCJ9//vlPPvlEfvinP/3piy++aNWqVZXZzp8/P2XKFNscvvzyy2nTptW2WgAA\nANQXp9IDAADAc8TGxto+TElJqTLDunXr5K6oEOKjjz6qsSsqhIiOjv7f//1f+WFBQcG6detc\nHF5qaurSpUvlh+PGjfv++++rd0WFEO3bt9+1a9eAAQPkZ15//fXi4mIXBwAAAAAZjVEAAAB4\njm7dutk+zMzMrDJDYWFhZGRkq1atfH19/fz8HnnkETtru+uuu3r27Ck/3LVrl4vDmzdvnnzC\nVvPmzZcvX+7r61vbzAEBAStXrpRPn7906dKaNWtcHAAAAABkNEYBAADgOdq2bWv78MqVK1Vm\nePnll48fP37p0iWz2Xzp0qWgoCD7K7Q9KT4jI8OVseXn59seczpjxoxmzZrZX6RXr1733nuv\n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",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 600,
       "width": 900
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "today = '2021-02-16'\n",
    "ggplot(data,aes(x=Date,y=log(Price)))+geom_line()+\n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=5,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "geom_segment(aes(x = as.Date(today), y = log(Price[1]), \n",
    "                 xend = as.Date('2022-05-01'), yend = log(Price[1])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date('2007-04-02'), y = log(Price[3297]), \n",
    "                 xend = as.Date('2022-05-01'), yend = log(Price[3297])),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme_bw()+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data2 = data[which(data$Date<'2008-01-01'),]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "today = '2007-10-16'\n",
    "ggplot(data2,aes(x=Date,y=log(Price)))+geom_line()+\n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=5,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "geom_segment(aes(x = as.Date(today), y = log(Price[1]), \n",
    "                 xend = as.Date('2008-05-01'), yend = log(Price[1])),\n",
    "            size=1.5,colour='red')+\n",
    "scale_x_date(date_labels = \"%m-%y\", date_breaks = \"3 months\")+\n",
    "theme_bw()+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sp500 = read.csv('S&P 500 Historical Data.csv',header=T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sp500$Price = as.double(gsub(',','',sp500$Price))\n",
    "sp500$Date = as.Date(sp500$Date,format='%b %d,%Y')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ggplot(sp500,aes(x=Date,y=log(Price)))+geom_line()+\n",
    "geom_smooth(method = 'lm', formula = y ~ x) + #绘制回归直线\n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=5,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "theme_bw()+\n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "SP500 <- getSymbols(\"^GSPC\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "sp500 <- data.frame(\"Date\" = index(SP500), \"Price\" = SP500$GSPC.Adjusted)\n",
    "sp500 = sp500[which(sp500$Date>'2010-09-08'),]\n",
    "today = Sys.Date()\n",
    "ggplot(data=sp500, aes(x =Date , y = log(GSPC.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(\"S&P 500 From 1956\") + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(SP500$GSPC.Adjusted[today]), \n",
    "                 xend = as.Date('2023-01-01'), yend = log(SP500$GSPC.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(SP500$GSPC.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(SP500$GSPC.Adjusted[today]*0.82)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "SP500TR  = getSymbols(\"^SP500TR\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( SP500TR), \"Price\" =  SP500TR$SP500TR.Adjusted)\n",
    "today = Sys.Date()-2\n",
    "#v = v[which(v$Date>'1993-01-28'),]\n",
    "ggplot(data= v, aes(x =Date , y = log( SP500TR.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"SP500TR From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "#geom_segment(aes(x = as.Date(today), y = log( SP500TR$ SP500TR.Adjusted[today]), \n",
    "#                 xend = as.Date('2021-1-05'), yend = log( SP500TR$SP500TR.Adjusted[today])),\n",
    "#            size=1.5,colour='red')+\n",
    "\n",
    "#geom_segment(aes(x = as.Date(today), y = log(SP500TR$SP500TR.Adjusted[today]), \n",
    "#                 xend = as.Date(today), yend = log(SP500TR$SP500TR.Adjusted[today]*0.95)),\n",
    "#            size=1.5,colour='darkgreen')+\n",
    "\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "CSIID301  = getSymbols(\"^CSIID301\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( CSIID301), \"Price\" =  CSIID301$CSIID301.Adjusted)\n",
    "today = Sys.Date()-2\n",
    "#v = v[which(v$Date>'1993-01-28'),]\n",
    "ggplot(data= v, aes(x =Date , y = log( CSIID301.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"CSIID301 From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "#geom_segment(aes(x = as.Date(today), y = log( CSIID301$ CSIID301.Adjusted[today]), \n",
    "#                 xend = as.Date('2021-1-05'), yend = log( CSIID301$CSIID301.Adjusted[today])),\n",
    "#            size=1.5,colour='red')+\n",
    "\n",
    "#geom_segment(aes(x = as.Date(today), y = log(CSIID301$CSIID301.Adjusted[today]), \n",
    "#                 xend = as.Date(today), yend = log(CSIID301$CSIID301.Adjusted[today]*0.95)),\n",
    "#            size=1.5,colour='darkgreen')+\n",
    "\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "SPY  = getSymbols(\"SPY\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( SPY), \"Price\" =  SPY$SPY.Adjusted)\n",
    "today = Sys.Date()\n",
    "ggplot(data= v, aes(x =Date , y = log( SPY.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"SPY From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "#geom_segment(aes(x = as.Date(today), y = log( SPY$ SPY.Adjusted[today]), \n",
    "#                 xend = as.Date('2021-1-05'), yend = log( SPY$SPY.Adjusted[today])),\n",
    "#            size=1.5,colour='red')+\n",
    "\n",
    "#geom_segment(aes(x = as.Date(today), y = log(SPY$SPY.Adjusted[today]), \n",
    "#                 xend = as.Date(today), yend = log(SPY$SPY.Adjusted[today]*0.95)),\n",
    "#            size=1.5,colour='darkgreen')+\n",
    "\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "SPY  = getSymbols(\"SPY\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "head(SPY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "HSI =  getSymbols(\"^HSI\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "pbr <- data.frame(\"Date\" = index(HSI), \"Price\" = HSI$HSI.Adjusted)\n",
    "today = Sys.Date()\n",
    "ggplot(data=pbr, aes(x =Date , y = log(HSI.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(\"HSI From 1986\") + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date('2014-05-01'), y = log(HSI$HSI.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(HSI$HSI.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(HSI$HSI.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(HSI$HSI.Adjusted[today]*1.55)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "N225  = getSymbols(\"^N225\", src = \"yahoo\", from = \"1956-01-01\", to = \"2020-10-16\", auto.assign = FALSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pbr <- data.frame(\"Date\" = index(N225), \"Price\" = N225$N225.Adjusted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "N225  = getSymbols(\"^N225\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( N225), \"Price\" =  N225$N225.Adjusted)\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()\n",
    "ggplot(data= v, aes(x =Date , y = log( N225.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"N225 From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( N225$ N225.Adjusted[today]), \n",
    "                 xend = as.Date('2021-07-01'), yend = log( N225$ N225.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(N225$N225.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(N225$N225.Adjusted[today]*0.7)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "N225TR  = getSymbols(\"^N225TR\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( N225TR), \"Price\" =  N225TR$N225TR.Adjusted)\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()-2\n",
    "ggplot(data= v, aes(x =Date , y = log( N225TR.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"N225TR From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( N225TR$ N225TR.Adjusted[today]), \n",
    "                 xend = as.Date('2021-07-01'), yend = log( N225TR$ N225TR.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(N225TR$N225TR.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(N225TR$N225TR.Adjusted[today]*0.7)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "STI  = getSymbols(\"^STI\", src = \"yahoo\", from = \"1956-01-01\", to = \"2020-10-16\", auto.assign = FALSE)\n",
    "sti <- data.frame(\"Date\" = index(STI), \"Price\" = STI$STI.Adjusted)\n",
    "sti = sti[which(sti$STI.Adjusted != 'NA'), ]\n",
    "today = '2020-10-15'\n",
    "ggplot(data=sti, aes(x =Date , y = log(STI.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(\"STI From 1987\") + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date('2009-08-01'), y = log(STI$STI.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(STI$STI.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "VTI  = getSymbols(\"VTI\", src = \"yahoo\", from = \"1956-01-01\", to = \"2020-10-16\", auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( VTI), \"Price\" =  VTI$VTI.Adjusted)\n",
    "today = '2020-10-15'\n",
    "ggplot(data= v, aes(x =Date , y = log( VTI.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(\" VTI From 1987\") + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( VTI$ VTI.Adjusted[today]), \n",
    "                 xend = as.Date('2023-05-01'), yend = log( VTI$ VTI.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "TLT  = getSymbols(\"TLT\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( TLT), \"Price\" =  TLT$TLT.Adjusted)\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( TLT.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(\" TLT From 1987\") + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( TLT$ TLT.Adjusted[today]), \n",
    "                 xend = as.Date('2022-04-01'), yend = log( TLT$ TLT.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "MUYUAN  = getSymbols(\"002714.sz\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( MUYUAN), \"Price\" =  MUYUAN$'002714.SZ.Adjusted',index=index(MUYUAN))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date()-1)\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"MUYUAN From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2020-03-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*1.4)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ShunFeng  = getSymbols(\"002352.sz\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( ShunFeng), \"Price\" =  ShunFeng$'002352.SZ.Adjusted',index=index(ShunFeng))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "#v = v[which(v$Date>'2017-01-01'),]\n",
    "today = toString(Sys.Date()-2)\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"ShunFeng From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2021-04-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*0.9)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "HuaXia  = getSymbols(\"600340.SS\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( HuaXia), \"Price\" =  HuaXia$'600340.SS.Adjusted',index=index(HuaXia))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date())\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"HuaXia From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2017-03-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*4.5)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "SanYi  = getSymbols(\"600031.SS\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( SanYi), \"Price\" =  SanYi$'600031.SS.Adjusted',index=index(SanYi))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date())\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"SanYi From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2017-03-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*4.5)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ZKShuG  = getSymbols(\"603019.SS\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( ZKShuG), \"Price\" =  ZKShuG$'603019.SS.Adjusted',index=index(ZKShuG))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "v = v[which(v$Date>'2015-01-01'),]\n",
    "today = toString(Sys.Date())\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"ZKShuG From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2017-03-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*4.5)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "JSYH  = getSymbols(\"601939.SS\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( JSYH), \"Price\" =  JSYH$'601939.SS.Adjusted',index=index(JSYH))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "v = v[which(v$Date>'2009-01-01'),]\n",
    "today = toString(Sys.Date())\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"JSYH From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2019-03-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*1)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "HengRuiYiYao  = getSymbols(\"600276.SS\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( HengRuiYiYao), \"Price\" =  HengRuiYiYao$'600276.SS.Adjusted',index=index(HengRuiYiYao))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date())\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"HengRuiYiYao From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2019-12-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*1.6)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "TongHuaDongBao  = getSymbols(\"600867.SS\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( TongHuaDongBao), \"Price\" =  TongHuaDongBao$'600867.SS.Adjusted',index=index(TongHuaDongBao))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date())\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"TongHuaDongBao From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2019-12-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*1.6)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "FuXing  = getSymbols(\"600196.SS\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( FuXing), \"Price\" =  FuXing$'600196.SS.Adjusted',index=index(FuXing))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date())\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"FuXing From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2021-03-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*0.9)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ZGWT  = getSymbols(\"000547.SZ\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( ZGWT), \"Price\" =  ZGWT$'000547.SZ.Adjusted',index=index(ZGWT))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date())\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"ZGWT From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2022-03-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*0.8)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "PingAn  = getSymbols(\"601318.SS\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( PingAn), \"Price\" =  PingAn$'601318.SS.Adjusted',index=index(PingAn))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date()-1)\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"PingAn From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2023-04-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*0.7)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "HTKJ  = getSymbols(\"000901.sz\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( HTKJ), \"Price\" =  HTKJ$'000901.SZ.Adjusted',index=index(HTKJ))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date())\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"HTKJ From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2015-04-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*1.5)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ZGWX  = getSymbols(\"600118.SS\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( ZGWX), \"Price\" =  ZGWX$'600118.SS.Adjusted',index=index(ZGWX))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date())\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"ZGWX From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2019-04-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*1.3)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "BDS  = getSymbols(\"002151.sz\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( BDS), \"Price\" =  BDS$'002151.SZ.Adjusted',index=index(BDS))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = Sys.Date()\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"BDS From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2024-04-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "BYJC  = getSymbols(\"600004.SS\", src = \"yahoo\", from = \"1956-01-01\", to =  Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( BYJC), \"Price\" =  BYJC$'600004.SS.Adjusted',index=index(BYJC))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = Sys.Date()\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"BYJC From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2019-04-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "LC  = getSymbols(\"000977.sz\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( LC), \"Price\" =  LC$'000977.SZ.Adjusted',index=index(LC))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "#v = v[which(v$Date>'2015-01-01'),]\n",
    "today = Sys.Date()\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"LC From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2022-01-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "MD  = getSymbols(\"000333.sz\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( MD), \"Price\" =  MD$'000333.SZ.Adjusted',index=index(MD))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"MD From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2021-01-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*1)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "HQC  = getSymbols(\"000069.sz\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( HQC), \"Price\" =  HQC$'000069.SZ.Adjusted',index=index(HQC))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = today = toString(Sys.Date()-2)\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"HQC From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2016-01-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*2.2)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "WK  = getSymbols(\"000002.sz\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( WK), \"Price\" =  WK$'000002.SZ.Adjusted',index=index(WK))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date()-2)\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"WK From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2018-01-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*2.2)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "YuYue  = getSymbols(\"002233.sz\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( YuYue), \"Price\" =  YuYue$'002233.SZ.Adjusted',index=index(YuYue))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date()-2)\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"YuYue From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2018-01-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*2.2)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "SheKou  = getSymbols(\"001979.sz\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( SheKou), \"Price\" =  SheKou$'001979.SZ.Adjusted',index=index(SheKou))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date()-2)\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"SheKou From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2016-01-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*1.3)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "HTFZ  = getSymbols(\"000547.sz\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( HTFZ), \"Price\" =  HTFZ$'000547.SZ.Adjusted',index=index(HTFZ))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date()-2)\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"HTFZ From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2016-01-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*1.3)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "YNBY  = getSymbols(\"000538.sz\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( YNBY), \"Price\" =  YNBY$'000538.SZ.Adjusted',index=index(YNBY))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date()-2)\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"YNBY From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2018-01-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*1.8)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "DaAnJiYin  = getSymbols(\"002030.sz\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( DaAnJiYin), \"Price\" =  DaAnJiYin$'002030.SZ.Adjusted',index=index(DaAnJiYin))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date()-2)\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"DaAnJiYin From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2018-01-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*1.8)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "BeiRuiJiYin  = getSymbols(\"000710.sz\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( BeiRuiJiYin), \"Price\" =  BeiRuiJiYin$'000710.SZ.Adjusted',index=index(BeiRuiJiYin))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "v = v[which(v$Date>'2017-01-01'),]\n",
    "today = toString(Sys.Date()-2)\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"BeiRuiJiYin From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2018-01-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*1.8)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "WanMeiShiJie  = getSymbols(\"002624.sz\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( WanMeiShiJie), \"Price\" =  WanMeiShiJie$'002624.SZ.Adjusted',index=index(WanMeiShiJie))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "v = v[which(v$Date>'2014-12-01'),]\n",
    "today = toString(Sys.Date()-2)\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"WanMeiShiJie From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2019-01-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date(today), yend = log(v[today,2]*1.4)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ShenHongLi  = getSymbols(\"159905.SZ\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( ShenHongLi), \"Price\" =  ShenHongLi$'159905.SZ.Adjusted',index=index(ShenHongLi))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date()-2)\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + \n",
    "ggtitle(paste(\"ShenHongLi From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2022-01-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "HS300  = getSymbols(\"510330.SS\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( HS300), \"Price\" =  HS300$'510330.SS.Adjusted',index=index(HS300))\n",
    "names(v) <- c(\"Date\",\"Price\")\n",
    "today = toString(Sys.Date()-2)\n",
    "ggplot(data= v, aes(x =Date , y = log(Price))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + \n",
    "ggtitle(paste(\"HS300 From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(v[today,2]), \n",
    "                 xend = as.Date('2022-01-01'), yend = log(v[today,2])),\n",
    "            size=1,colour='red')+\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "AMZN  = getSymbols(\"AMZN\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( AMZN), \"Price\" =  AMZN$AMZN.Adjusted)\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( AMZN.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"AMZN From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( AMZN$ AMZN.Adjusted[today]), \n",
    "                 xend = as.Date('2023-04-01'), yend = log( AMZN$ AMZN.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(AMZN$AMZN.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(AMZN$AMZN.Adjusted[today]*0.5)),\n",
    "           size=1.5,colour='darkgreen')+\n",
    "\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "MSFT  = getSymbols(\"MSFT\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( MSFT), \"Price\" =  MSFT$MSFT.Adjusted)\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( MSFT.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"MSFT From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( MSFT$ MSFT.Adjusted[today]), \n",
    "                 xend = as.Date('2022-01-01'), yend = log( MSFT$ MSFT.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(MSFT$MSFT.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(MSFT$MSFT.Adjusted[today]*0.85)),\n",
    "           size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "FBT  = getSymbols(\"FBT\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( FBT), \"Price\" =  FBT$FBT.Adjusted)\n",
    "\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( FBT.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"FBT From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( FBT$ FBT.Adjusted[today]), \n",
    "                 xend = as.Date('2019-08-05'), yend = log( FBT$ FBT.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(FBT$FBT.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(FBT$FBT.Adjusted[today]*1.25)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "XBI  = getSymbols(\"XBI\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( XBI), \"Price\" =  XBI$XBI.Adjusted)\n",
    "today = Sys.Date()-1\n",
    "v = v[which(v$Date>'2006-12-30'),]\n",
    "ggplot(data= v, aes(x =Date , y = log( XBI.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"XBI From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( XBI$ XBI.Adjusted[today]), \n",
    "                 xend = as.Date('2021-1-05'), yend = log( XBI$XBI.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(XBI$XBI.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(XBI$XBI.Adjusted[today]*0.95)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "IBB  = getSymbols(\"IBB\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( IBB), \"Price\" =  IBB$IBB.Adjusted)\n",
    "today = Sys.Date()-1\n",
    "v = v[which(v$Date>'2006-12-30'),]\n",
    "ggplot(data= v, aes(x =Date , y = log( IBB.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"IBB From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( IBB$ IBB.Adjusted[today]), \n",
    "                 xend = as.Date('2019-10-05'), yend = log( IBB$IBB.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(IBB$IBB.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(IBB$IBB.Adjusted[today]*1.15)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "VBR  = getSymbols(\"VBR\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( VBR), \"Price\" =  VBR$VBR.Adjusted)\n",
    "today = Sys.Date()-1\n",
    "#v = v[which(v$Date>'2006-12-30'),]\n",
    "ggplot(data= v, aes(x =Date , y = log( VBR.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"VBR From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( VBR$ VBR.Adjusted[today]), \n",
    "                 xend = as.Date('2019-08-05'), yend = log( VBR$VBR.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(VBR$VBR.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(VBR$VBR.Adjusted[today]*1.15)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "####果然small value才是正道。\n",
    "VTV  = getSymbols(\"VTV\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( VTV), \"Price\" =  VTV$VTV.Adjusted)\n",
    "today = Sys.Date()-1\n",
    "#v = v[which(v$Date>'2006-12-30'),]\n",
    "ggplot(data= v, aes(x =Date , y = log( VTV.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"VTV From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( VTV$ VTV.Adjusted[today]), \n",
    "                 xend = as.Date('2019-08-05'), yend = log( VTV$VTV.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(VTV$VTV.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(VTV$VTV.Adjusted[today]*1.15)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "IJS  = getSymbols(\"IJS\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( IJS), \"Price\" =  IJS$IJS.Adjusted)\n",
    "today = Sys.Date()-1\n",
    "v = v[which(v$Date>='2004-01-30'),]\n",
    "ggplot(data= v, aes(x =Date , y = log( IJS.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"IJS From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( IJS$ IJS.Adjusted[today]), \n",
    "                 xend = as.Date('2019-08-05'), yend = log( IJS$IJS.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(IJS$IJS.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(IJS$IJS.Adjusted[today]*1.15)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"3 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "SPY  = getSymbols(\"SPY\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( SPY), \"Price\" =  SPY$SPY.Adjusted)\n",
    "today = Sys.Date()-1\n",
    "v = v[which(v$Date>='2004-01-30'),]\n",
    "ggplot(data= v, aes(x =Date , y = log( SPY.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"SPY From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( SPY$ SPY.Adjusted[today]), \n",
    "                 xend = as.Date('2021-01-05'), yend = log( SPY$SPY.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(SPY$SPY.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(SPY$SPY.Adjusted[today]*1.)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"3 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "XLV  = getSymbols(\"XLV\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( XLV), \"Price\" =  XLV$XLV.Adjusted)\n",
    "today = Sys.Date()\n",
    "ggplot(data= v, aes(x =Date , y = log( XLV.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"XLV From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( XLV$ XLV.Adjusted[today]), \n",
    "                 xend = as.Date('2024-1-05'), yend = log( XLV$XLV.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(XLV$XLV.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(XLV$XLV.Adjusted[today]*0.75)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "VHT  = getSymbols(\"VHT\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( VHT), \"Price\" =  VHT$VHT.Adjusted)\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( VHT.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"VHT From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( VHT$ VHT.Adjusted[today]), \n",
    "                 xend = as.Date('2022-1-05'), yend = log( VHT$VHT.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(VHT$VHT.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(VHT$VHT.Adjusted[today]*0.9)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ISRG  = getSymbols(\"ISRG\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( ISRG), \"Price\" =  ISRG$ISRG.Adjusted)\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( ISRG.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"ISRG From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( ISRG$ ISRG.Adjusted[today]), \n",
    "                 xend = as.Date('2020-03-05'), yend = log( ISRG$ ISRG.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "JNJ  = getSymbols(\"JNJ\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( JNJ), \"Price\" =  JNJ$JNJ.Adjusted)\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( JNJ.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"JNJ From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( JNJ$ JNJ.Adjusted[today]), \n",
    "                 xend = as.Date('2018-03-05'), yend = log( JNJ$ JNJ.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(JNJ$JNJ.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(JNJ$JNJ.Adjusted[today]*1.6)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "AMD  = getSymbols(\"AMD\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( AMD), \"Price\" =  AMD$AMD.Adjusted)\n",
    "#v = v[which(v$Date>'2016-01-01'),]\n",
    "today = Sys.Date()-2\n",
    "ggplot(data= v, aes(x =Date , y = log( AMD.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"AMD From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( AMD$ AMD.Adjusted[today]), \n",
    "                 xend = as.Date('2022-04-01'), yend = log( AMD$ AMD.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "NVDA  = getSymbols(\"NVDA\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( NVDA), \"Price\" =  NVDA$NVDA.Adjusted)\n",
    "#v = v[which(v$Date>'2016-01-01'),]\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( NVDA.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"NVDA From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( NVDA$ NVDA.Adjusted[today]), \n",
    "                 xend = as.Date('2029-04-01'), yend = log( NVDA$NVDA.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(NVDA$NVDA.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(NVDA$NVDA.Adjusted[today]*0.25)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "CRM  = getSymbols(\"CRM\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( CRM), \"Price\" =  CRM$CRM.Adjusted)\n",
    "#v = v[which(v$Date>'2016-01-01'),]\n",
    "today = Sys.Date()-2\n",
    "ggplot(data= v, aes(x =Date , y = log( CRM.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"CRM From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( CRM$ CRM.Adjusted[today]), \n",
    "                 xend = as.Date('2022-04-01'), yend = log( CRM$ CRM.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(CRM$CRM.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(CRM$CRM.Adjusted[today]*0.85)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ILMN  = getSymbols(\"ILMN\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( ILMN), \"Price\" =  ILMN$ILMN.Adjusted)\n",
    "#v = v[which(v$Date>'2016-01-01'),]\n",
    "today = Sys.Date()-2\n",
    "ggplot(data= v, aes(x =Date , y = log( ILMN.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"ILMN From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( ILMN$ ILMN.Adjusted[today]), \n",
    "                 xend = as.Date('2018-09-01'), yend = log( ILMN$ ILMN.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(ILMN$ILMN.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(ILMN$ILMN.Adjusted[today]*1.55)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "NVO  = getSymbols(\"NVO\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( NVO), \"Price\" =  NVO$NVO.Adjusted)\n",
    "v = v[which(v$Date>'1992-01-01'),]\n",
    "today = Sys.Date()-2\n",
    "ggplot(data= v, aes(x =Date , y = log( NVO.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"NVO From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( NVO$ NVO.Adjusted[today]), \n",
    "                 xend = as.Date('2017-09-01'), yend = log( NVO$ NVO.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(NVO$NVO.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(NVO$NVO.Adjusted[today]*2.5)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ONVO  = getSymbols(\"ONVO\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( ONVO), \"Price\" =  ONVO$ONVO.Adjusted)\n",
    "#v = v[which(v$Date>'1992-01-01'),]\n",
    "today = Sys.Date()-2\n",
    "ggplot(data= v, aes(x =Date , y = log( ONVO.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"ONVO From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( ONVO$ ONVO.Adjusted[today]), \n",
    "                 xend = as.Date('2018-09-01'), yend = log( ONVO$ ONVO.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(ONVO$ONVO.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(ONVO$ONVO.Adjusted[today]*1.2)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "HON  = getSymbols(\"HON\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index(HON), \"Price\" =  HON$HON.Adjusted)\n",
    "#v = v[which(v$Date>'1992-01-01'),]\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( HON.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"HON From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( HON$ HON.Adjusted[today]), \n",
    "                 xend = as.Date('2022-09-01'), yend = log( HON$ HON.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(HON$HON.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(HON$HON.Adjusted[today]*0.8)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "HON  = getSymbols(\"HON\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "head(HON)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "MAXR  = getSymbols(\"MAXR\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( MAXR), \"Price\" =  MAXR$MAXR.Adjusted)\n",
    "v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()-2\n",
    "ggplot(data= v, aes(x =Date , y = log( MAXR.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"MAXR From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( MAXR$ MAXR.Adjusted[today]), \n",
    "                 xend = as.Date('2018-09-01'), yend = log( MAXR$ MAXR.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(MAXR$MAXR.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(MAXR$MAXR.Adjusted[today]*1.2)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "SPCE  = getSymbols(\"SPCE\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( SPCE), \"Price\" =  SPCE$SPCE.Adjusted)\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()-2\n",
    "ggplot(data= v, aes(x =Date , y = log( SPCE.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"SPCE From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( SPCE$ SPCE.Adjusted[today]), \n",
    "                 xend = as.Date('2022-01-01'), yend = log( SPCE$ SPCE.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(SPCE$SPCE.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(SPCE$SPCE.Adjusted[today]*0.75)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "PSTG  = getSymbols(\"PSTG\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( PSTG), \"Price\" =  PSTG$PSTG.Adjusted)\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( PSTG.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"PSTG From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( PSTG$ PSTG.Adjusted[today]), \n",
    "                 xend = as.Date('2020-01-01'), yend = log( PSTG$ PSTG.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(PSTG$PSTG.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(PSTG$PSTG.Adjusted[today]*1.05)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "IBM  = getSymbols(\"IBM\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( IBM), \"Price\" =  IBM$IBM.Adjusted)\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()\n",
    "ggplot(data= v, aes(x =Date , y = log( IBM.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"IBM From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( IBM$ IBM.Adjusted[today]), \n",
    "                 xend = as.Date('2015-01-01'), yend = log( IBM$ IBM.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(IBM$IBM.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(IBM$IBM.Adjusted[today]*1.55)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "BA  = getSymbols(\"BA\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( BA), \"Price\" =  BA$BA.Adjusted)\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()\n",
    "ggplot(data= v, aes(x =Date , y = log( BA.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"BA From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( BA$ BA.Adjusted[today]), \n",
    "                 xend = as.Date('2017-01-01'), yend = log( BA$ BA.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(BA$BA.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(BA$BA.Adjusted[today]*1.8)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "PACB  = getSymbols(\"PACB\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( PACB), \"Price\" =  PACB$PACB.Adjusted)\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( PACB.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"PACB From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( PACB$ PACB.Adjusted[today]), \n",
    "                 xend = as.Date('2017-01-01'), yend = log( PACB$ PACB.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(PACB$PACB.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(PACB$PACB.Adjusted[today]*1.8)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "TSLA  = getSymbols(\"TSLA\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( TSLA), \"Price\" =  TSLA$TSLA.Adjusted)\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()-3\n",
    "ggplot(data= v, aes(x =Date , y = log( TSLA.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"TSLA From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( TSLA$ TSLA.Adjusted[today]), \n",
    "                 xend = as.Date('2024-01-01'), yend = log( TSLA$ TSLA.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(TSLA$TSLA.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(TSLA$TSLA.Adjusted[today]*0.4)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "PDD  = getSymbols(\"PDD\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( PDD), \"Price\" =  PDD$PDD.Adjusted)\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()-2\n",
    "ggplot(data= v, aes(x =Date , y = log( PDD.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"PDD From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( PDD$ PDD.Adjusted[today]), \n",
    "                 xend = as.Date('2021-06-01'), yend = log( PDD$ PDD.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(PDD$PDD.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(PDD$PDD.Adjusted[today]*0.7)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"1 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "WMT  = getSymbols(\"WMT\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date(), auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( WMT), \"Price\" =  WMT$WMT.Adjusted)\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()-2\n",
    "ggplot(data= v, aes(x =Date , y = log( WMT.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"WMT From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( WMT$ WMT.Adjusted[today]), \n",
    "                 xend = as.Date('2015-01-01'), yend = log( WMT$ WMT.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(WMT$WMT.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(WMT$WMT.Adjusted[today]*2.6)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "TMO  = getSymbols(\"TMO\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( TMO), \"Price\" =  TMO$TMO.Adjusted)\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( TMO.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"TMO From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( TMO$ TMO.Adjusted[today]), \n",
    "                 xend = as.Date('2027-01-01'), yend = log( TMO$ TMO.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(TMO$TMO.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(TMO$TMO.Adjusted[today]*0.5)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "BMY  = getSymbols(\"BMY\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( BMY), \"Price\" =  BMY$BMY.Adjusted)\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( BMY.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"BMY From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( BMY$ BMY.Adjusted[today]), \n",
    "                 xend = as.Date('2016-01-01'), yend = log( BMY$ BMY.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(BMY$BMY.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(BMY$BMY.Adjusted[today]*1.5)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "PFE  = getSymbols(\"PFE\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( PFE), \"Price\" =  PFE$PFE.Adjusted)\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( PFE.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"PFE From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( PFE$ PFE.Adjusted[today]), \n",
    "                 xend = as.Date('2016-01-01'), yend = log( PFE$ PFE.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(PFE$PFE.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(PFE$PFE.Adjusted[today]*1.8)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "EXAS  = getSymbols(\"EXAS\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( EXAS), \"Price\" =  EXAS$EXAS.Adjusted)\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( EXAS.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"EXAS From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( EXAS$ EXAS.Adjusted[today]), \n",
    "                 xend = as.Date('2016-01-01'), yend = log( EXAS$ EXAS.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(EXAS$EXAS.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(EXAS$EXAS.Adjusted[today]*1.8)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "KTOS  = getSymbols(\"KTOS\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( KTOS), \"Price\" =  KTOS$KTOS.Adjusted)\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( KTOS.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"KTOS From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( KTOS$ KTOS.Adjusted[today]), \n",
    "                 xend = as.Date('2016-01-01'), yend = log( KTOS$ KTOS.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(KTOS$KTOS.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(KTOS$KTOS.Adjusted[today]*1.8)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "CSCO  = getSymbols(\"CSCO\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( CSCO), \"Price\" =  CSCO$CSCO.Adjusted)\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( CSCO.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"CSCO From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( CSCO$ CSCO.Adjusted[today]), \n",
    "                 xend = as.Date('2016-01-01'), yend = log( CSCO$ CSCO.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(CSCO$CSCO.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(CSCO$CSCO.Adjusted[today]*1.8)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "NTES  = getSymbols(\"NTES\", src = \"yahoo\", from = \"1956-01-01\", to = Sys.Date()+1, auto.assign = FALSE)\n",
    "v <- data.frame(\"Date\" = index( NTES), \"Price\" =  NTES[,6])\n",
    "#v = v[which(v$Date>'2019-01-01'),]\n",
    "today = Sys.Date()-1\n",
    "ggplot(data= v, aes(x =Date , y = log( NTES.Adjusted))) + \n",
    "geom_smooth(method = 'lm', formula = y ~ x,fullrange = T) + #绘制回归直线\n",
    "geom_line(color = \"darkblue\") + ggtitle(paste(\"NTES From \",v[1,1])) + \n",
    "stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T,\n",
    "            size=6,label.x = 0.5,label.y = 0.99) + #添加回归方程和调整R方\n",
    "#stat_fit_tb(tb.type = 'fit.anova',size=5)+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log( NTES$ NTES.Adjusted[today]), \n",
    "                 xend = as.Date('2019-01-01'), yend = log( NTES$ NTES.Adjusted[today])),\n",
    "            size=1.5,colour='red')+\n",
    "\n",
    "geom_segment(aes(x = as.Date(today), y = log(NTES$NTES.Adjusted[today]), \n",
    "                 xend = as.Date(today), yend = log(NTES$NTES.Adjusted[today]*1.6)),\n",
    "            size=1.5,colour='darkgreen')+\n",
    "\n",
    "theme_bw()+\n",
    "xlab(\"Date\") + ylab(\"Log(Price)\") + \n",
    "theme(plot.title = element_text(hjust = 0.5,size=30)) + \n",
    "scale_x_date(date_labels = \"%Y\", date_breaks = \"5 years\")+\n",
    "theme(axis.text = element_text(size=20),axis.title = element_text(size=30),legend.text=element_text(size=30))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "head(NTES[,6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
