{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "UCO_data = pd.read_csv('UCO.csv')  # 读取训练数据\n",
    "SCO_data = pd.read_csv('SCO.csv')  # 读取训练数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3130, 7)\n",
      "(3130, 7)\n"
     ]
    }
   ],
   "source": [
    "print(UCO_data.shape) \n",
    "print(SCO_data.shape) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3130"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(UCO_data['UCO.Adjusted'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21730.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "UCO_data['UCO.Adjusted'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 410,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot(data,start=0,end=-1):\n",
    "    import matplotlib.pyplot as plt\n",
    "    \n",
    "    if(end==-1):\n",
    "        end = len(data)\n",
    "\n",
    "    plt.plot(range(start,end),data[start:end])\n",
    "    plt.title('title name')\n",
    "    plt.xlabel('xAxis name')\n",
    "    plt.ylabel('yAxis name')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 422,
   "metadata": {},
   "outputs": [],
   "source": [
    "def OpenCloseAtSameTime(UCO_price,SCO_price,close_percent=20,initial_money=100,uco_sco_ratio =1,\n",
    "                        min_interval=5,max_interval=20,start=0,end=0):\n",
    "    UCO_price = UCO_data['UCO.Adjusted']\n",
    "    SCO_price = SCO_data['SCO.Adjusted']\n",
    "    ratio = 1- close_percent/100\n",
    "    total_gain = 0\n",
    "    uco_open = UCO_price[0]\n",
    "    sco_open = SCO_price[0]\n",
    "    earnings = [(0,None)]\n",
    "    indexes =  [start]\n",
    "    earnings2 = [0]\n",
    "    longest_waiting = 0\n",
    "    \n",
    "    uco_initial_money = initial_money*uco_sco_ratio/(1+uco_sco_ratio)\n",
    "    sco_initial_money = initial_money*1/(1+uco_sco_ratio)\n",
    "    \n",
    "    for i in range(start,end):\n",
    "        uco_current_price = UCO_price[i]\n",
    "        sco_current_price = SCO_price[i]\n",
    "        uco_trend = uco_current_price/uco_open\n",
    "        sco_trend = sco_current_price/sco_open\n",
    "        waiting = i-indexes[-1]\n",
    "        if(longest_waiting<waiting):\n",
    "            longest_waiting = waiting\n",
    "            \n",
    "        if( (uco_trend < ratio and waiting>min_interval) or waiting>max_interval):\n",
    "            profit = uco_initial_money*(1-uco_trend) + sco_initial_money*(1-sco_trend)\n",
    "            uco_open = uco_current_price\n",
    "            sco_open = sco_current_price\n",
    "            earnings.append((profit,'uco'))\n",
    "            indexes.append(i)\n",
    "            earnings2.append(profit)\n",
    "        elif( (sco_trend < ratio/1000000 and waiting>min_interval) or waiting>max_interval):\n",
    "            profit = uco_initial_money*(1-uco_trend) + sco_initial_money*(1-sco_trend)\n",
    "            uco_open = uco_current_price\n",
    "            sco_open = sco_current_price\n",
    "            earnings.append((profit,'sco'))    \n",
    "            indexes.append(i)\n",
    "            earnings2.append(profit)\n",
    "    return earnings,indexes,earnings2,longest_waiting\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "244.75916525334014 1438\n"
     ]
    }
   ],
   "source": [
    "train_length = int(3130*0.5)\n",
    "uco_sco_ratio=100000000\n",
    "earnings,indexes, earnings2,longest= OpenCloseAtSameTime(UCO_data,SCO_data,0.0001,100,uco_sco_ratio,\n",
    "                                                            0,300000000,0,train_length)\n",
    "print(sum(earnings2),longest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "541.9646406162522 380\n"
     ]
    }
   ],
   "source": [
    "earnings,indexes, earnings2,longest= OpenCloseAtSameTime(UCO_data,SCO_data,0.0001,100,uco_sco_ratio,\n",
    "                                                         0,30000000,train_length,3130)\n",
    "print(sum(earnings2),longest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 458,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ProfitClose(UCO_price,SCO_price,close_percent=10,initial_money=100,uco_sco_ratio =1,\n",
    "                interval=5,start=0,end=0):\n",
    "    ratio = 1- close_percent/100\n",
    "    total_gain = 0\n",
    "    uco_open = UCO_price[0]\n",
    "    sco_open = SCO_price[0]\n",
    "    earnings = [0]\n",
    "    indexes =  [start]\n",
    "    longest_waiting = 0\n",
    "    max_up = 0\n",
    "    uco_initial_money = initial_money*uco_sco_ratio/(1+uco_sco_ratio)\n",
    "    sco_initial_money = initial_money*1/(1+uco_sco_ratio)\n",
    "    \n",
    "    for i in range(start,end):\n",
    "        uco_current_price = UCO_price[i]\n",
    "        sco_current_price = SCO_price[i]\n",
    "        uco_trend = uco_current_price/uco_open\n",
    "        sco_trend = sco_current_price/sco_open\n",
    "        profit = uco_initial_money*(1-uco_trend) + sco_initial_money*(1-sco_trend)\n",
    "        waiting = i-indexes[-1]\n",
    "        if(longest_waiting<waiting):\n",
    "            longest_waiting = waiting\n",
    "            \n",
    "        if(uco_trend>max_up):\n",
    "            max_up = uco_trend\n",
    "        \n",
    "        if((waiting>interval and profit>0) or profit/initial_money>100):\n",
    "            uco_open = uco_current_price\n",
    "            sco_open = sco_current_price\n",
    "            earnings.append(profit)\n",
    "            indexes.append(i)\n",
    "        \n",
    "   \n",
    "    return earnings,indexes,longest_waiting,max_up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 459,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "670.6748886550101 1438 5.251661129568107\n"
     ]
    }
   ],
   "source": [
    "train_length = int(3130*0.999)\n",
    "uco_sco_ratio = 100000000\n",
    "earnings,indexes,longest,max_up= ProfitClose(UCO_data['UCO.Adjusted'],SCO_data['SCO.Adjusted'],10,100,uco_sco_ratio,\n",
    "                                      0,0,train_length)\n",
    "print(sum(earnings), longest, max_up)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 491,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "332.1006142163514 1465 2.717557361410564\n",
      "3794\n"
     ]
    }
   ],
   "source": [
    "USO_data = pd.read_csv('USO.csv')  # 读取训练数据\n",
    "train_length = int(len(USO_data)*1)\n",
    "uco_sco_ratio = 100000000\n",
    "earnings,indexes,longest,max_up= ProfitClose(USO_data['USO.Adjusted'],USO_data['USO.Adjusted'],10,100,uco_sco_ratio,\n",
    "                                      0,0,train_length)\n",
    "print(sum(earnings), longest, max_up)\n",
    "print(train_length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 411,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot(UCO_data['UCO.Adjusted'],56,1494)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 485,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "897.6415891972629 133 2.0181365563880074\n",
      "2827\n"
     ]
    }
   ],
   "source": [
    "SQQQ_data = pd.read_csv('SQQQ.csv')  # 读取训练数据\n",
    "train_length = int(len(SQQQ_data)*1)\n",
    "uco_sco_ratio = 100000000\n",
    "earnings,indexes,longest,max_up= ProfitClose(SQQQ_data['SQQQ.Adjusted'],UCO_data['UCO.Adjusted'],10,100,uco_sco_ratio,\n",
    "                                      0,0,train_length)\n",
    "print(sum(earnings), longest, max_up)\n",
    "print(train_length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 493,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "288.75255013395554 510 1.8901456303663422\n",
      "3744\n"
     ]
    }
   ],
   "source": [
    "PSQ_data = pd.read_csv('PSQ.csv')  # 读取训练数据\n",
    "train_length = int(len(PSQ_data)*1)\n",
    "uco_sco_ratio = 100000000\n",
    "earnings,indexes,longest,max_up= ProfitClose(PSQ_data['PSQ.Adjusted'],PSQ_data['PSQ.Adjusted'],10,100,uco_sco_ratio,\n",
    "                                      0,0,train_length)\n",
    "print(sum(earnings), longest, max_up)\n",
    "print(train_length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 483,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "718.6773139289531 124 2.4159395401317596\n",
      "2986\n"
     ]
    }
   ],
   "source": [
    "SPXU_data = pd.read_csv('SPXU.csv')  # 读取训练数据\n",
    "train_length = int(len(SPXU_data)*1)\n",
    "uco_sco_ratio = 100000000\n",
    "earnings,indexes,longest,max_up= ProfitClose(SPXU_data['SPXU.Adjusted'],UCO_data['UCO.Adjusted'],10,100,uco_sco_ratio,\n",
    "                                      0,0,train_length)\n",
    "print(sum(earnings), longest, max_up)\n",
    "print(train_length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 487,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1709.8746442313943 226 10.45652145557656\n",
      "2412\n"
     ]
    }
   ],
   "source": [
    "UVXY_data = pd.read_csv('UVXY.csv')  # 读取训练数据\n",
    "train_length = int(len(UVXY_data)*1)\n",
    "uco_sco_ratio = 100000000\n",
    "earnings,indexes,longest,max_up= ProfitClose(UVXY_data['UVXY.Adjusted'],UCO_data['UCO.Adjusted'],10,100,uco_sco_ratio,\n",
    "                                      0,0,train_length)\n",
    "print(sum(earnings), longest, max_up)\n",
    "print(train_length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 488,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "681.1475104122682 315 5.150960567246112\n",
      "2601\n"
     ]
    }
   ],
   "source": [
    "VIXY_data = pd.read_csv('VIXY.csv')  # 读取训练数据\n",
    "train_length = int(len(VIXY_data)*1)\n",
    "uco_sco_ratio = 100000000\n",
    "earnings,indexes,longest,max_up= ProfitClose(VIXY_data['VIXY.Adjusted'],UCO_data['UCO.Adjusted'],10,100,uco_sco_ratio,\n",
    "                                      0,0,train_length)\n",
    "print(sum(earnings), longest, max_up)\n",
    "print(train_length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 496,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "399.5542893193928 727 1.908211430636413\n",
      "3035\n"
     ]
    }
   ],
   "source": [
    "#这是债券的，千万不要搞，债券比较稳定，没有杠杆损耗\n",
    "TMV_data = pd.read_csv('TMV.csv')  # 读取训练数据\n",
    "train_length = int(len(TMV_data)*1)\n",
    "uco_sco_ratio = 100000000\n",
    "earnings,indexes,longest,max_up= ProfitClose(TMV_data['TMV.Adjusted'],UCO_data['UCO.Adjusted'],10,100,uco_sco_ratio,\n",
    "                                      0,0,train_length)\n",
    "print(sum(earnings), longest, max_up)\n",
    "print(train_length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 497,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1049.5045099366512 350 4.473684106510661\n",
      "1910\n"
     ]
    }
   ],
   "source": [
    "JDST_data = pd.read_csv('JDST.csv')  # 读取训练数据\n",
    "train_length = int(len(JDST_data)*1)\n",
    "uco_sco_ratio = 100000000\n",
    "earnings,indexes,longest,max_up= ProfitClose(JDST_data['JDST.Adjusted'],UCO_data['UCO.Adjusted'],10,100,uco_sco_ratio,\n",
    "                                      0,0,train_length)\n",
    "print(sum(earnings), longest, max_up)\n",
    "print(train_length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 498,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "687.9145522598917 845 7.328616236829308\n",
      "2619\n"
     ]
    }
   ],
   "source": [
    "DUST_data = pd.read_csv('DUST.csv')  # 读取训练数据\n",
    "train_length = int(len(DUST_data)*1)\n",
    "uco_sco_ratio = 100000000\n",
    "earnings,indexes,longest,max_up= ProfitClose(DUST_data['DUST.Adjusted'],UCO_data['UCO.Adjusted'],10,100,uco_sco_ratio,\n",
    "                                      0,0,train_length)\n",
    "print(sum(earnings), longest, max_up)\n",
    "print(train_length)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "  "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
