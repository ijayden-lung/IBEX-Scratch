{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "'/ibex/scratch/longy/workspace/stat210/Week1'"
      ],
      "text/latex": [
       "'/ibex/scratch/longy/workspace/stat210/Week1'"
      ],
      "text/markdown": [
       "'/ibex/scratch/longy/workspace/stat210/Week1'"
      ],
      "text/plain": [
       "[1] \"/ibex/scratch/longy/workspace/stat210/Week1\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "getwd() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "setwd('/ibex/scratch/longy/workspace/stat210/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "'/ibex/scratch/longy/workspace/stat210'"
      ],
      "text/latex": [
       "'/ibex/scratch/longy/workspace/stat210'"
      ],
      "text/markdown": [
       "'/ibex/scratch/longy/workspace/stat210'"
      ],
      "text/plain": [
       "[1] \"/ibex/scratch/longy/workspace/stat210\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "getwd() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "setwd('/ibex/scratch/longy/workspace/stat210/Week1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [],
      "text/latex": [],
      "text/markdown": [],
      "text/plain": [
       "character(0)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ls()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre class=language-r><code>function (x, na.rm = FALSE) \n",
       "sqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x), \n",
       "<span style=white-space:pre-wrap>    na.rm = na.rm))</span></code></pre>"
      ],
      "text/latex": [
       "\\begin{minted}{r}\n",
       "function (x, na.rm = FALSE) \n",
       "sqrt(var(if (is.vector(x) \\textbar{}\\textbar{} is.factor(x)) x else as.double(x), \n",
       "    na.rm = na.rm))\n",
       "\\end{minted}"
      ],
      "text/markdown": [
       "```r\n",
       "function (x, na.rm = FALSE) \n",
       "sqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x), \n",
       "    na.rm = na.rm))\n",
       "```"
      ],
      "text/plain": [
       "function (x, na.rm = FALSE) \n",
       "sqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x), \n",
       "    na.rm = na.rm))\n",
       "<bytecode: 0x55a26b93f8d0>\n",
       "<environment: namespace:stats>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 19 × 2</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>temperature</th><th scope=col>pressure</th></tr>\n",
       "\t<tr><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>  0</td><td>  0.0002</td></tr>\n",
       "\t<tr><td> 20</td><td>  0.0012</td></tr>\n",
       "\t<tr><td> 40</td><td>  0.0060</td></tr>\n",
       "\t<tr><td> 60</td><td>  0.0300</td></tr>\n",
       "\t<tr><td> 80</td><td>  0.0900</td></tr>\n",
       "\t<tr><td>100</td><td>  0.2700</td></tr>\n",
       "\t<tr><td>120</td><td>  0.7500</td></tr>\n",
       "\t<tr><td>140</td><td>  1.8500</td></tr>\n",
       "\t<tr><td>160</td><td>  4.2000</td></tr>\n",
       "\t<tr><td>180</td><td>  8.8000</td></tr>\n",
       "\t<tr><td>200</td><td> 17.3000</td></tr>\n",
       "\t<tr><td>220</td><td> 32.1000</td></tr>\n",
       "\t<tr><td>240</td><td> 57.0000</td></tr>\n",
       "\t<tr><td>260</td><td> 96.0000</td></tr>\n",
       "\t<tr><td>280</td><td>157.0000</td></tr>\n",
       "\t<tr><td>300</td><td>247.0000</td></tr>\n",
       "\t<tr><td>320</td><td>376.0000</td></tr>\n",
       "\t<tr><td>340</td><td>558.0000</td></tr>\n",
       "\t<tr><td>360</td><td>806.0000</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 19 × 2\n",
       "\\begin{tabular}{ll}\n",
       " temperature & pressure\\\\\n",
       " <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t   0 &   0.0002\\\\\n",
       "\t  20 &   0.0012\\\\\n",
       "\t  40 &   0.0060\\\\\n",
       "\t  60 &   0.0300\\\\\n",
       "\t  80 &   0.0900\\\\\n",
       "\t 100 &   0.2700\\\\\n",
       "\t 120 &   0.7500\\\\\n",
       "\t 140 &   1.8500\\\\\n",
       "\t 160 &   4.2000\\\\\n",
       "\t 180 &   8.8000\\\\\n",
       "\t 200 &  17.3000\\\\\n",
       "\t 220 &  32.1000\\\\\n",
       "\t 240 &  57.0000\\\\\n",
       "\t 260 &  96.0000\\\\\n",
       "\t 280 & 157.0000\\\\\n",
       "\t 300 & 247.0000\\\\\n",
       "\t 320 & 376.0000\\\\\n",
       "\t 340 & 558.0000\\\\\n",
       "\t 360 & 806.0000\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 19 × 2\n",
       "\n",
       "| temperature &lt;dbl&gt; | pressure &lt;dbl&gt; |\n",
       "|---|---|\n",
       "|   0 |   0.0002 |\n",
       "|  20 |   0.0012 |\n",
       "|  40 |   0.0060 |\n",
       "|  60 |   0.0300 |\n",
       "|  80 |   0.0900 |\n",
       "| 100 |   0.2700 |\n",
       "| 120 |   0.7500 |\n",
       "| 140 |   1.8500 |\n",
       "| 160 |   4.2000 |\n",
       "| 180 |   8.8000 |\n",
       "| 200 |  17.3000 |\n",
       "| 220 |  32.1000 |\n",
       "| 240 |  57.0000 |\n",
       "| 260 |  96.0000 |\n",
       "| 280 | 157.0000 |\n",
       "| 300 | 247.0000 |\n",
       "| 320 | 376.0000 |\n",
       "| 340 | 558.0000 |\n",
       "| 360 | 806.0000 |\n",
       "\n"
      ],
      "text/plain": [
       "   temperature pressure\n",
       "1    0           0.0002\n",
       "2   20           0.0012\n",
       "3   40           0.0060\n",
       "4   60           0.0300\n",
       "5   80           0.0900\n",
       "6  100           0.2700\n",
       "7  120           0.7500\n",
       "8  140           1.8500\n",
       "9  160           4.2000\n",
       "10 180           8.8000\n",
       "11 200          17.3000\n",
       "12 220          32.1000\n",
       "13 240          57.0000\n",
       "14 260          96.0000\n",
       "15 280         157.0000\n",
       "16 300         247.0000\n",
       "17 320         376.0000\n",
       "18 340         558.0000\n",
       "19 360         806.0000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "2.30258509299405"
      ],
      "text/latex": [
       "2.30258509299405"
      ],
      "text/markdown": [
       "2.30258509299405"
      ],
      "text/plain": [
       "[1] 2.302585"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1.38493542219562</li><li>0.82473207548894</li><li>1.09530253372206</li><li>1.28111594807605</li><li>0.900584793751159</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1.38493542219562\n",
       "\\item 0.82473207548894\n",
       "\\item 1.09530253372206\n",
       "\\item 1.28111594807605\n",
       "\\item 0.900584793751159\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1.38493542219562\n",
       "2. 0.82473207548894\n",
       "3. 1.09530253372206\n",
       "4. 1.28111594807605\n",
       "5. 0.900584793751159\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 1.3849354 0.8247321 1.0953025 1.2811159 0.9005848"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 6 × 2</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>speed</th><th scope=col>dist</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>4</td><td> 2</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>4</td><td>10</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>7</td><td> 4</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>7</td><td>22</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>8</td><td>16</td></tr>\n",
       "\t<tr><th scope=row>6</th><td>9</td><td>10</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 2\n",
       "\\begin{tabular}{r|ll}\n",
       "  & speed & dist\\\\\n",
       "  & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t1 & 4 &  2\\\\\n",
       "\t2 & 4 & 10\\\\\n",
       "\t3 & 7 &  4\\\\\n",
       "\t4 & 7 & 22\\\\\n",
       "\t5 & 8 & 16\\\\\n",
       "\t6 & 9 & 10\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 2\n",
       "\n",
       "| <!--/--> | speed &lt;dbl&gt; | dist &lt;dbl&gt; |\n",
       "|---|---|---|\n",
       "| 1 | 4 |  2 |\n",
       "| 2 | 4 | 10 |\n",
       "| 3 | 7 |  4 |\n",
       "| 4 | 7 | 22 |\n",
       "| 5 | 8 | 16 |\n",
       "| 6 | 9 | 10 |\n",
       "\n"
      ],
      "text/plain": [
       "  speed dist\n",
       "1 4      2  \n",
       "2 4     10  \n",
       "3 7      4  \n",
       "4 7     22  \n",
       "5 8     16  \n",
       "6 9     10  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'data.frame':\t50 obs. of  2 variables:\n",
      " $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n",
      " $ dist : num  2 10 4 22 16 10 18 26 34 17 ...\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0gAAANICAMAAADKOT/pAAADAFBMVEUAAAABAQECAgIDAwME\nBAQFBQUGBgYHBwcICAgJCQkKCgoLCwsMDAwNDQ0ODg4PDw8QEBARERESEhITExMUFBQVFRUW\nFhYXFxcYGBgZGRkaGhobGxscHBwdHR0eHh4fHx8gICAhISEiIiIjIyMkJCQlJSUmJiYnJyco\nKCgpKSkqKiorKyssLCwtLS0uLi4vLy8wMDAxMTEyMjIzMzM0NDQ1NTU2NjY3Nzc4ODg5OTk6\nOjo7Ozs8PDw9PT0+Pj4/Pz9AQEBBQUFCQkJDQ0NERERFRUVGRkZHR0dISEhJSUlKSkpLS0tM\nTExNTU1OTk5PT09QUFBRUVFSUlJTU1NUVFRVVVVWVlZXV1dYWFhZWVlaWlpbW1tcXFxdXV1e\nXl5fX19gYGBhYWFiYmJjY2NkZGRlZWVmZmZnZ2doaGhpaWlqampra2tsbGxtbW1ubm5vb29w\ncHBxcXFycnJzc3N0dHR1dXV2dnZ3d3d4eHh5eXl6enp7e3t8fHx9fX1+fn5/f3+AgICBgYGC\ngoKDg4OEhISFhYWGhoaHh4eIiIiJiYmKioqLi4uMjIyNjY2Ojo6Pj4+QkJCRkZGSkpKTk5OU\nlJSVlZWWlpaXl5eYmJiZmZmampqbm5ucnJydnZ2enp6fn5+goKChoaGioqKjo6OkpKSlpaWm\npqanp6eoqKipqamqqqqrq6usrKytra2urq6vr6+wsLCxsbGysrKzs7O0tLS1tbW2tra3t7e4\nuLi5ubm6urq7u7u8vLy9vb2+vr6/v7/AwMDBwcHCwsLDw8PExMTFxcXGxsbHx8fIyMjJycnK\nysrLy8vMzMzNzc3Ozs7Pz8/Q0NDR0dHS0tLT09PU1NTV1dXW1tbX19fY2NjZ2dna2trb29vc\n3Nzd3d3e3t7f39/g4ODh4eHi4uLj4+Pk5OTl5eXm5ubn5+fo6Ojp6enq6urr6+vs7Ozt7e3u\n7u7v7+/w8PDx8fHy8vLz8/P09PT19fX29vb39/f4+Pj5+fn6+vr7+/v8/Pz9/f3+/v7////i\nsF19AAAACXBIWXMAABJ0AAASdAHeZh94AAAgAElEQVR4nO3dB3hT5f7A8TdtU2ihRZAtUKao\nTBEFFRAFF0MUBAQVKjjY8Be0Dq7gYFgURQVUHIjXrVXAjShchiCgiIpKQRAQBxsKbaFt/k3O\n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\nAggJEEBIgABCAgQQEiCAkAABhAQIICRAACEBAggJEEBIgABCAgQQEiCAkAABhAQIIKQwFN3G\n6hlEHkIKQ4RkPkIKQ4RkPkIKQ4RkPkKyvazU5onlm6XmejxXq12Dq8Y2nuX9t38Mq+Ou3OOr\nfwzfb1W2yuD9hGQ+QrK9m1T/2U9fo4Z7PH3VeSkrll2q5ng8fyVVSHl5cq0yS/42XBZdc/Kc\nG9q7Ccl0hGR78ed7v/5fr5z8kPrljw6UqevxDI1Zkz/cntD6b8MrlPfn0jBFSKYjJNurUPNP\nfdRXzfcuOqtdeZVb/e51uTp80jA3roF3/TeEZD5Csr0ZKvHGF3Z6R33Vj97FQPX1H6rADycN\nd6pLveszCcl8hGR/i68up1xdtnlD+tX7z8PU5+mq5Uea/ScNN6nuvh1chGQ6QnKCrEUDXQ2z\n80Pa6P2n69W3f6iWBetOGu7QfiId5ieS+QjJIYaq1fkhveMdnqf+8lQuu987/Cv/P4XD47EN\nvaMVhGQ+QrK7L2u+5F0MV1/nh9Q1f/Szq7G3q3vyh39V7/a3YUffq3b9Ccl8hGR3x5vG3jJz\n1qCodnn5IXXu9vSsuuoVj+fPOuqmuZPruD/92/BDV9W7pnW7pAIhmY6QbG/vmAbxFVpMPux9\nsSF9TM3Ys+Z6/+3vQ2vHnHLV6n8MX28WW2XQ/tpnWznfyERIDtJX7bB6CigCITkIIdkXITkI\nIdkXITkIIdkXIQECCAkQQEiAAEICBBASIICQAAGEBAggJEAAIQECCAkQQEiAAEICBBASIICQ\nAAGEBAggJEAAIQECCAkQQEiAAEICBBASIICQAAGEBAggJEAAIQECCAkQQEiAgP8HTJX1S/XE\nBu8AAAAASUVORK5CYII=",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 420
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sd\n",
    "\n",
    "pressure\n",
    "\n",
    "log(10)\n",
    "\n",
    "rnorm(5)\n",
    "\n",
    "data()\n",
    "\n",
    "data(cars)\n",
    "\n",
    "plot(cars)\n",
    "\n",
    "head(cars)\n",
    "\n",
    "str(cars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "x <-c(1, 1.5,2,2.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>1.5</li><li>2</li><li>2.5</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 1.5\n",
       "\\item 2\n",
       "\\item 2.5\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 1.5\n",
       "3. 2\n",
       "4. 2.5\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 1.0 1.5 2.0 2.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>1.5</li><li>2</li><li>2.5</li><li>3</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 1.5\n",
       "\\item 2\n",
       "\\item 2.5\n",
       "\\item 3\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 1.5\n",
       "3. 2\n",
       "4. 2.5\n",
       "5. 3\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 1.0 1.5 2.0 2.5 3.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'this'</li><li>'is'</li><li>'an'</li><li>'example'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'this'\n",
       "\\item 'is'\n",
       "\\item 'an'\n",
       "\\item 'example'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'this'\n",
       "2. 'is'\n",
       "3. 'an'\n",
       "4. 'example'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"this\"    \"is\"      \"an\"      \"example\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'1'</li><li>'1.5'</li><li>'2'</li><li>'2.5'</li><li>'3'</li><li>'a'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item '1'\n",
       "\\item '1.5'\n",
       "\\item '2'\n",
       "\\item '2.5'\n",
       "\\item '3'\n",
       "\\item 'a'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. '1'\n",
       "2. '1.5'\n",
       "3. '2'\n",
       "4. '2.5'\n",
       "5. '3'\n",
       "6. 'a'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"1\"   \"1.5\" \"2\"   \"2.5\" \"3\"   \"a\"  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 1.5 2 2.5 3 a"
     ]
    }
   ],
   "source": [
    "(x <- c(x,3))\n",
    "\n",
    "# and also characters can be used:\n",
    "\n",
    "(y <- c('this','is','an','example'))\n",
    "\n",
    "# However, if one combines numbers and characters, all entries of \n",
    "# the vector will be considered as characters and it is not posible \n",
    "# to operate on them as numbers:\n",
    "\n",
    "(z <- c(x,'a'))\n",
    "\n",
    "# If you want to avoid the quotation marks when printing characters, \n",
    "# you may use the function cat:\n",
    "\n",
    "cat(z)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "ename": "ERROR",
     "evalue": "Error in eval(expr, envir, enclos): object 'seq(from=1, to=1, by=((to-from)/length.out-1),length.out = NULL)' not found\n",
     "output_type": "error",
     "traceback": [
      "Error in eval(expr, envir, enclos): object 'seq(from=1, to=1, by=((to-from)/length.out-1),length.out = NULL)' not found\nTraceback:\n"
     ]
    }
   ],
   "source": [
    "\n",
    "### seq\n",
    "# This function is used to form regular sequences of numbers. \n",
    "# The basic syntax is \n",
    "\n",
    "#seq(from=1, to=1, by=((to-from)/length.out-1),length.out = NULL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>0</li><li>5</li><li>10</li><li>15</li><li>20</li><li>25</li><li>30</li><li>35</li><li>40</li><li>45</li><li>50</li><li>55</li><li>60</li><li>65</li><li>70</li><li>75</li><li>80</li><li>85</li><li>90</li><li>95</li><li>100</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 0\n",
       "\\item 5\n",
       "\\item 10\n",
       "\\item 15\n",
       "\\item 20\n",
       "\\item 25\n",
       "\\item 30\n",
       "\\item 35\n",
       "\\item 40\n",
       "\\item 45\n",
       "\\item 50\n",
       "\\item 55\n",
       "\\item 60\n",
       "\\item 65\n",
       "\\item 70\n",
       "\\item 75\n",
       "\\item 80\n",
       "\\item 85\n",
       "\\item 90\n",
       "\\item 95\n",
       "\\item 100\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 0\n",
       "2. 5\n",
       "3. 10\n",
       "4. 15\n",
       "5. 20\n",
       "6. 25\n",
       "7. 30\n",
       "8. 35\n",
       "9. 40\n",
       "10. 45\n",
       "11. 50\n",
       "12. 55\n",
       "13. 60\n",
       "14. 65\n",
       "15. 70\n",
       "16. 75\n",
       "17. 80\n",
       "18. 85\n",
       "19. 90\n",
       "20. 95\n",
       "21. 100\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1]   0   5  10  15  20  25  30  35  40  45  50  55  60  65  70  75  80  85  90\n",
       "[20]  95 100"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1955</li><li>1956</li><li>1957</li><li>1958</li><li>1959</li><li>1960</li><li>1961</li><li>1962</li><li>1963</li><li>1964</li><li>1965</li><li>1966</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1955\n",
       "\\item 1956\n",
       "\\item 1957\n",
       "\\item 1958\n",
       "\\item 1959\n",
       "\\item 1960\n",
       "\\item 1961\n",
       "\\item 1962\n",
       "\\item 1963\n",
       "\\item 1964\n",
       "\\item 1965\n",
       "\\item 1966\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1955\n",
       "2. 1956\n",
       "3. 1957\n",
       "4. 1958\n",
       "5. 1959\n",
       "6. 1960\n",
       "7. 1961\n",
       "8. 1962\n",
       "9. 1963\n",
       "10. 1964\n",
       "11. 1965\n",
       "12. 1966\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>10</li><li>10.2</li><li>10.4</li><li>10.6</li><li>10.8</li><li>11</li><li>11.2</li><li>11.4</li><li>11.6</li><li>11.8</li><li>12</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 10\n",
       "\\item 10.2\n",
       "\\item 10.4\n",
       "\\item 10.6\n",
       "\\item 10.8\n",
       "\\item 11\n",
       "\\item 11.2\n",
       "\\item 11.4\n",
       "\\item 11.6\n",
       "\\item 11.8\n",
       "\\item 12\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 10\n",
       "2. 10.2\n",
       "3. 10.4\n",
       "4. 10.6\n",
       "5. 10.8\n",
       "6. 11\n",
       "7. 11.2\n",
       "8. 11.4\n",
       "9. 11.6\n",
       "10. 11.8\n",
       "11. 12\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 10.0 10.2 10.4 10.6 10.8 11.0 11.2 11.4 11.6 11.8 12.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "seq(0,100,5)\n",
    "seq(1955,1966,1)\n",
    "seq(10,12,0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1955</li><li>1956</li><li>1957</li><li>1958</li><li>1959</li><li>1960</li><li>1961</li><li>1962</li><li>1963</li><li>1964</li><li>1965</li><li>1966</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1955\n",
       "\\item 1956\n",
       "\\item 1957\n",
       "\\item 1958\n",
       "\\item 1959\n",
       "\\item 1960\n",
       "\\item 1961\n",
       "\\item 1962\n",
       "\\item 1963\n",
       "\\item 1964\n",
       "\\item 1965\n",
       "\\item 1966\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1955\n",
       "2. 1956\n",
       "3. 1957\n",
       "4. 1958\n",
       "5. 1959\n",
       "6. 1960\n",
       "7. 1961\n",
       "8. 1962\n",
       "9. 1963\n",
       "10. 1964\n",
       "11. 1965\n",
       "12. 1966\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 1 2 3 4 5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>5</li><li>4</li><li>3</li><li>2</li><li>1</li><li>0</li><li>-1</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 0\n",
       "\\item -1\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 5\n",
       "2. 4\n",
       "3. 3\n",
       "4. 2\n",
       "5. 1\n",
       "6. 0\n",
       "7. -1\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  5  4  3  2  1  0 -1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 1 is the default value for the lower limit of the sequence and \n",
    "# also for the increment:\n",
    "\n",
    "seq(1955,1966)\n",
    "seq(5)\n",
    "seq(5,-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 1 2 3 4 5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>5</li><li>4</li><li>3</li><li>2</li><li>1</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 5\n",
       "2. 4\n",
       "3. 3\n",
       "4. 2\n",
       "5. 1\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 5 4 3 2 1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>10</li><li>10.2</li><li>10.4</li><li>10.6</li><li>10.8</li><li>11</li><li>11.2</li><li>11.4</li><li>11.6</li><li>11.8</li><li>12</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 10\n",
       "\\item 10.2\n",
       "\\item 10.4\n",
       "\\item 10.6\n",
       "\\item 10.8\n",
       "\\item 11\n",
       "\\item 11.2\n",
       "\\item 11.4\n",
       "\\item 11.6\n",
       "\\item 11.8\n",
       "\\item 12\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 10\n",
       "2. 10.2\n",
       "3. 10.4\n",
       "4. 10.6\n",
       "5. 10.8\n",
       "6. 11\n",
       "7. 11.2\n",
       "8. 11.4\n",
       "9. 11.6\n",
       "10. 11.8\n",
       "11. 12\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 10.0 10.2 10.4 10.6 10.8 11.0 11.2 11.4 11.6 11.8 12.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# There is a shorthand for this function when the increment is 1:\n",
    "\n",
    "1:5\n",
    "5:1\n",
    "50:60/5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>10</li><li>10</li><li>10</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 10\n",
       "\\item 10\n",
       "\\item 10\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 10\n",
       "2. 10\n",
       "3. 10\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 10 10 10"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>0</li><li>5</li><li>0</li><li>5</li><li>0</li><li>5</li><li>0</li><li>5</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 0\n",
       "\\item 5\n",
       "\\item 0\n",
       "\\item 5\n",
       "\\item 0\n",
       "\\item 5\n",
       "\\item 0\n",
       "\\item 5\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 0\n",
       "2. 5\n",
       "3. 0\n",
       "4. 5\n",
       "5. 0\n",
       "6. 5\n",
       "7. 0\n",
       "8. 5\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 0 5 0 5 0 5 0 5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'wx'</li><li>'yz'</li><li>'wx'</li><li>'yz'</li><li>'wx'</li><li>'yz'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'wx'\n",
       "\\item 'yz'\n",
       "\\item 'wx'\n",
       "\\item 'yz'\n",
       "\\item 'wx'\n",
       "\\item 'yz'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'wx'\n",
       "2. 'yz'\n",
       "3. 'wx'\n",
       "4. 'yz'\n",
       "5. 'wx'\n",
       "6. 'yz'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"wx\" \"yz\" \"wx\" \"yz\" \"wx\" \"yz\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "6. 1\n",
       "7. 2\n",
       "8. 3\n",
       "9. 4\n",
       "10. 5\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 1 2 3 4 5 1 2 3 4 5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### rep\n",
    "# This function replicates a pattern. The syntax is \n",
    "#rep(x,times)\n",
    "\n",
    "# where x is the object to be replicated and times is the number \n",
    "# of replications:\n",
    "\n",
    "rep(10,3)\n",
    "rep(c(0,5), 4)\n",
    "rep(c('wx','yz'),3)\n",
    "rep(1:5,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>10</li><li>10</li><li>20</li><li>20</li><li>20</li><li>20</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 10\n",
       "\\item 10\n",
       "\\item 20\n",
       "\\item 20\n",
       "\\item 20\n",
       "\\item 20\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 10\n",
       "2. 10\n",
       "3. 20\n",
       "4. 20\n",
       "5. 20\n",
       "6. 20\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 10 10 20 20 20 20"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>2</li><li>3</li><li>3</li><li>3</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 2\n",
       "4. 3\n",
       "5. 3\n",
       "6. 3\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 1 2 2 3 3 3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>1</li><li>1</li><li>1</li><li>2</li><li>2</li><li>2</li><li>2</li><li>3</li><li>3</li><li>3</li><li>3</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 1\n",
       "3. 1\n",
       "4. 1\n",
       "5. 2\n",
       "6. 2\n",
       "7. 2\n",
       "8. 2\n",
       "9. 3\n",
       "10. 3\n",
       "11. 3\n",
       "12. 3\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 1 1 1 1 2 2 2 2 3 3 3 3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The number of replications can be a vector, in which\n",
    "# case it must have the same number of components as the pattern, \n",
    "# and then each element of the pattern is repeated the corresponding \n",
    "# number of times.\n",
    "\n",
    "rep(c(10,20),c(2,4))\n",
    "rep(1:3,1:3)\n",
    "rep(1:3,rep(4,3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>1</li><li>2</li><li>3</li><li>4</li><li>1</li><li>2</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 1\n",
       "6. 2\n",
       "7. 3\n",
       "8. 4\n",
       "9. 1\n",
       "10. 2\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 1 2 3 4 1 2 3 4 1 2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# It is also possible to specify the number of terms the replications \n",
    "# should have using the option length:\n",
    "\n",
    "rep(c(1,2,3,4), length=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "0.435480481040914"
      ],
      "text/latex": [
       "0.435480481040914"
      ],
      "text/markdown": [
       "0.435480481040914"
      ],
      "text/plain": [
       "[1] 0.4354805"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##Indexing\n",
    "\n",
    "# To get a particular component from a vector, you can write the \n",
    "# position of the element in the vector within square brackets after \n",
    "# the vector's name, as in the following example:\n",
    "\n",
    "z <- rnorm(10)\n",
    "z[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "'s'"
      ],
      "text/latex": [
       "'s'"
      ],
      "text/markdown": [
       "'s'"
      ],
      "text/plain": [
       "[1] \"s\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'k'</li><li>'m'</li><li>'o'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'k'\n",
       "\\item 'm'\n",
       "\\item 'o'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'k'\n",
       "2. 'm'\n",
       "3. 'o'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"k\" \"m\" \"o\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'k'</li><li>'m'</li><li>'o'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'k'\n",
       "\\item 'm'\n",
       "\\item 'o'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'k'\n",
       "2. 'm'\n",
       "3. 'o'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"k\" \"m\" \"o\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "letters[19]\n",
    "letters[c(11,13,15)]\n",
    "letters[seq(11,15,2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'a'</li><li>'b'</li><li>'c'</li><li>'d'</li><li>'e'</li><li>'f'</li><li>'g'</li><li>'h'</li><li>'i'</li><li>'j'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'a'\n",
       "\\item 'b'\n",
       "\\item 'c'\n",
       "\\item 'd'\n",
       "\\item 'e'\n",
       "\\item 'f'\n",
       "\\item 'g'\n",
       "\\item 'h'\n",
       "\\item 'i'\n",
       "\\item 'j'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'a'\n",
       "2. 'b'\n",
       "3. 'c'\n",
       "4. 'd'\n",
       "5. 'e'\n",
       "6. 'f'\n",
       "7. 'g'\n",
       "8. 'h'\n",
       "9. 'i'\n",
       "10. 'j'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'b'</li><li>'d'</li><li>'f'</li><li>'h'</li><li>'j'</li><li>'l'</li><li>'n'</li><li>'p'</li><li>'r'</li><li>'t'</li><li>'v'</li><li>'x'</li><li>'z'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'b'\n",
       "\\item 'd'\n",
       "\\item 'f'\n",
       "\\item 'h'\n",
       "\\item 'j'\n",
       "\\item 'l'\n",
       "\\item 'n'\n",
       "\\item 'p'\n",
       "\\item 'r'\n",
       "\\item 't'\n",
       "\\item 'v'\n",
       "\\item 'x'\n",
       "\\item 'z'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'b'\n",
       "2. 'd'\n",
       "3. 'f'\n",
       "4. 'h'\n",
       "5. 'j'\n",
       "6. 'l'\n",
       "7. 'n'\n",
       "8. 'p'\n",
       "9. 'r'\n",
       "10. 't'\n",
       "11. 'v'\n",
       "12. 'x'\n",
       "13. 'z'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \"b\" \"d\" \"f\" \"h\" \"j\" \"l\" \"n\" \"p\" \"r\" \"t\" \"v\" \"x\" \"z\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# 2.- Negative numbers that correspond to entries to be excluded:\n",
    "\n",
    "letters[-(11:26)]\n",
    "letters[-seq(1,25,2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>TRUE</li><li>TRUE</li><li>TRUE</li><li>TRUE</li><li>TRUE</li><li>TRUE</li><li>TRUE</li><li>TRUE</li><li>TRUE</li><li>TRUE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. TRUE\n",
       "2. TRUE\n",
       "3. TRUE\n",
       "4. TRUE\n",
       "5. TRUE\n",
       "6. TRUE\n",
       "7. TRUE\n",
       "8. TRUE\n",
       "9. TRUE\n",
       "10. TRUE\n",
       "11. FALSE\n",
       "12. FALSE\n",
       "13. FALSE\n",
       "14. FALSE\n",
       "15. FALSE\n",
       "16. FALSE\n",
       "17. FALSE\n",
       "18. FALSE\n",
       "19. FALSE\n",
       "20. FALSE\n",
       "21. FALSE\n",
       "22. FALSE\n",
       "23. FALSE\n",
       "24. FALSE\n",
       "25. FALSE\n",
       "26. FALSE\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE\n",
       "[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n",
       "[25] FALSE FALSE"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'a'</li><li>'b'</li><li>'c'</li><li>'d'</li><li>'e'</li><li>'f'</li><li>'g'</li><li>'h'</li><li>'i'</li><li>'j'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'a'\n",
       "\\item 'b'\n",
       "\\item 'c'\n",
       "\\item 'd'\n",
       "\\item 'e'\n",
       "\\item 'f'\n",
       "\\item 'g'\n",
       "\\item 'h'\n",
       "\\item 'i'\n",
       "\\item 'j'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'a'\n",
       "2. 'b'\n",
       "3. 'c'\n",
       "4. 'd'\n",
       "5. 'e'\n",
       "6. 'f'\n",
       "7. 'g'\n",
       "8. 'h'\n",
       "9. 'i'\n",
       "10. 'j'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. FALSE\n",
       "2. TRUE\n",
       "3. FALSE\n",
       "4. TRUE\n",
       "5. FALSE\n",
       "6. TRUE\n",
       "7. FALSE\n",
       "8. TRUE\n",
       "9. FALSE\n",
       "10. TRUE\n",
       "11. FALSE\n",
       "12. TRUE\n",
       "13. FALSE\n",
       "14. TRUE\n",
       "15. FALSE\n",
       "16. TRUE\n",
       "17. FALSE\n",
       "18. TRUE\n",
       "19. FALSE\n",
       "20. TRUE\n",
       "21. FALSE\n",
       "22. TRUE\n",
       "23. FALSE\n",
       "24. TRUE\n",
       "25. FALSE\n",
       "26. TRUE\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE\n",
       "[13] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE\n",
       "[25] FALSE  TRUE"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'b'</li><li>'d'</li><li>'f'</li><li>'h'</li><li>'j'</li><li>'l'</li><li>'n'</li><li>'p'</li><li>'r'</li><li>'t'</li><li>'v'</li><li>'x'</li><li>'z'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'b'\n",
       "\\item 'd'\n",
       "\\item 'f'\n",
       "\\item 'h'\n",
       "\\item 'j'\n",
       "\\item 'l'\n",
       "\\item 'n'\n",
       "\\item 'p'\n",
       "\\item 'r'\n",
       "\\item 't'\n",
       "\\item 'v'\n",
       "\\item 'x'\n",
       "\\item 'z'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'b'\n",
       "2. 'd'\n",
       "3. 'f'\n",
       "4. 'h'\n",
       "5. 'j'\n",
       "6. 'l'\n",
       "7. 'n'\n",
       "8. 'p'\n",
       "9. 'r'\n",
       "10. 't'\n",
       "11. 'v'\n",
       "12. 'x'\n",
       "13. 'z'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \"b\" \"d\" \"f\" \"h\" \"j\" \"l\" \"n\" \"p\" \"r\" \"t\" \"v\" \"x\" \"z\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 3.- Logical variables. TRUE values will be included while FALSE \n",
    " # values will not.\n",
    "\n",
    "a <- 1:26\n",
    "a < 11\n",
    "letters[a<11]\n",
    "a %% 2 == 0\n",
    "letters[a %% 2==0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'b'</li><li>'c'</li><li>'d'</li><li>'e'</li><li>'f'</li><li>'g'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'b'\n",
       "\\item 'c'\n",
       "\\item 'd'\n",
       "\\item 'e'\n",
       "\\item 'f'\n",
       "\\item 'g'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'b'\n",
       "2. 'c'\n",
       "3. 'd'\n",
       "4. 'e'\n",
       "5. 'f'\n",
       "6. 'g'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"b\" \"c\" \"d\" \"e\" \"f\" \"g\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Double inequalities such as $1 < x \\leq 7$ should be written \n",
    "# using the \\& symbol: 1 < a \\& a <= 7:\n",
    "\n",
    "letters[1 < a & a <= 7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>9</li><li>10</li><li>12</li><li>11</li><li>15</li><li>12</li><li>14</li><li>17</li><li>13</li><li>10</li><li>10</li><li>9</li><li>10</li><li>13</li><li>16</li><li>12</li><li>15</li><li>13</li><li>11</li><li>14</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 9\n",
       "\\item 10\n",
       "\\item 12\n",
       "\\item 11\n",
       "\\item 15\n",
       "\\item 12\n",
       "\\item 14\n",
       "\\item 17\n",
       "\\item 13\n",
       "\\item 10\n",
       "\\item 10\n",
       "\\item 9\n",
       "\\item 10\n",
       "\\item 13\n",
       "\\item 16\n",
       "\\item 12\n",
       "\\item 15\n",
       "\\item 13\n",
       "\\item 11\n",
       "\\item 14\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 9\n",
       "2. 10\n",
       "3. 12\n",
       "4. 11\n",
       "5. 15\n",
       "6. 12\n",
       "7. 14\n",
       "8. 17\n",
       "9. 13\n",
       "10. 10\n",
       "11. 10\n",
       "12. 9\n",
       "13. 10\n",
       "14. 13\n",
       "15. 16\n",
       "16. 12\n",
       "17. 15\n",
       "18. 13\n",
       "19. 11\n",
       "20. 14\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1]  9 10 12 11 15 12 14 17 13 10 10  9 10 13 16 12 15 13 11 14"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>10</li><li>12</li><li>12</li><li>14</li><li>10</li><li>10</li><li>10</li><li>16</li><li>12</li><li>14</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 10\n",
       "\\item 12\n",
       "\\item 12\n",
       "\\item 14\n",
       "\\item 10\n",
       "\\item 10\n",
       "\\item 10\n",
       "\\item 16\n",
       "\\item 12\n",
       "\\item 14\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 10\n",
       "2. 12\n",
       "3. 12\n",
       "4. 14\n",
       "5. 10\n",
       "6. 10\n",
       "7. 10\n",
       "8. 16\n",
       "9. 12\n",
       "10. 14\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 10 12 12 14 10 10 10 16 12 14"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>9</li><li>11</li><li>15</li><li>17</li><li>13</li><li>9</li><li>13</li><li>15</li><li>13</li><li>11</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 9\n",
       "\\item 11\n",
       "\\item 15\n",
       "\\item 17\n",
       "\\item 13\n",
       "\\item 9\n",
       "\\item 13\n",
       "\\item 15\n",
       "\\item 13\n",
       "\\item 11\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 9\n",
       "2. 11\n",
       "3. 15\n",
       "4. 17\n",
       "5. 13\n",
       "6. 9\n",
       "7. 13\n",
       "8. 15\n",
       "9. 13\n",
       "10. 11\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1]  9 11 15 17 13  9 13 15 13 11"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We have used this operators to get the letters that occupy \n",
    "# even positions in the vector letters but they can also be \n",
    "# used to get the even (or odd) components of a vector:\n",
    "\n",
    "(x <- rbinom(20, 40, prob=1/3))\n",
    "x[x %% 2==0]\n",
    "x[x %% 2!=0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'a'</li><li>'c'</li><li>'e'</li><li>'g'</li><li>'i'</li><li>'k'</li><li>'m'</li><li>'o'</li><li>'q'</li><li>'s'</li><li>'u'</li><li>'w'</li><li>'y'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'a'\n",
       "\\item 'c'\n",
       "\\item 'e'\n",
       "\\item 'g'\n",
       "\\item 'i'\n",
       "\\item 'k'\n",
       "\\item 'm'\n",
       "\\item 'o'\n",
       "\\item 'q'\n",
       "\\item 's'\n",
       "\\item 'u'\n",
       "\\item 'w'\n",
       "\\item 'y'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'a'\n",
       "2. 'c'\n",
       "3. 'e'\n",
       "4. 'g'\n",
       "5. 'i'\n",
       "6. 'k'\n",
       "7. 'm'\n",
       "8. 'o'\n",
       "9. 'q'\n",
       "10. 's'\n",
       "11. 'u'\n",
       "12. 'w'\n",
       "13. 'y'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \"a\" \"c\" \"e\" \"g\" \"i\" \"k\" \"m\" \"o\" \"q\" \"s\" \"u\" \"w\" \"y\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# If the indexing vector is shorter than the object to which it is \n",
    "# being applied, it is recycled:\n",
    "\n",
    "letters[c(T,F)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'data.frame':\t31 obs. of  3 variables:\n",
      " $ Girth : num  8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ...\n",
      " $ Height: num  70 65 63 72 81 83 66 75 80 75 ...\n",
      " $ Volume: num  10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ...\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>26</li><li>27</li><li>28</li><li>29</li><li>30</li><li>31</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 26\n",
       "\\item 27\n",
       "\\item 28\n",
       "\\item 29\n",
       "\\item 30\n",
       "\\item 31\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 26\n",
       "2. 27\n",
       "3. 28\n",
       "4. 29\n",
       "5. 30\n",
       "6. 31\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 26 27 28 29 30 31"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 6 × 3</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>Girth</th><th scope=col>Height</th><th scope=col>Volume</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>26</th><td>17.3</td><td>81</td><td>55.4</td></tr>\n",
       "\t<tr><th scope=row>27</th><td>17.5</td><td>82</td><td>55.7</td></tr>\n",
       "\t<tr><th scope=row>28</th><td>17.9</td><td>80</td><td>58.3</td></tr>\n",
       "\t<tr><th scope=row>29</th><td>18.0</td><td>80</td><td>51.5</td></tr>\n",
       "\t<tr><th scope=row>30</th><td>18.0</td><td>80</td><td>51.0</td></tr>\n",
       "\t<tr><th scope=row>31</th><td>20.6</td><td>87</td><td>77.0</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 3\n",
       "\\begin{tabular}{r|lll}\n",
       "  & Girth & Height & Volume\\\\\n",
       "  & <dbl> & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t26 & 17.3 & 81 & 55.4\\\\\n",
       "\t27 & 17.5 & 82 & 55.7\\\\\n",
       "\t28 & 17.9 & 80 & 58.3\\\\\n",
       "\t29 & 18.0 & 80 & 51.5\\\\\n",
       "\t30 & 18.0 & 80 & 51.0\\\\\n",
       "\t31 & 20.6 & 87 & 77.0\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 3\n",
       "\n",
       "| <!--/--> | Girth &lt;dbl&gt; | Height &lt;dbl&gt; | Volume &lt;dbl&gt; |\n",
       "|---|---|---|---|\n",
       "| 26 | 17.3 | 81 | 55.4 |\n",
       "| 27 | 17.5 | 82 | 55.7 |\n",
       "| 28 | 17.9 | 80 | 58.3 |\n",
       "| 29 | 18.0 | 80 | 51.5 |\n",
       "| 30 | 18.0 | 80 | 51.0 |\n",
       "| 31 | 20.6 | 87 | 77.0 |\n",
       "\n"
      ],
      "text/plain": [
       "   Girth Height Volume\n",
       "26 17.3  81     55.4  \n",
       "27 17.5  82     55.7  \n",
       "28 17.9  80     58.3  \n",
       "29 18.0  80     51.5  \n",
       "30 18.0  80     51.0  \n",
       "31 20.6  87     77.0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 6 × 3</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>Girth</th><th scope=col>Height</th><th scope=col>Volume</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>26</th><td>17.3</td><td>81</td><td>55.4</td></tr>\n",
       "\t<tr><th scope=row>27</th><td>17.5</td><td>82</td><td>55.7</td></tr>\n",
       "\t<tr><th scope=row>28</th><td>17.9</td><td>80</td><td>58.3</td></tr>\n",
       "\t<tr><th scope=row>29</th><td>18.0</td><td>80</td><td>51.5</td></tr>\n",
       "\t<tr><th scope=row>30</th><td>18.0</td><td>80</td><td>51.0</td></tr>\n",
       "\t<tr><th scope=row>31</th><td>20.6</td><td>87</td><td>77.0</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 3\n",
       "\\begin{tabular}{r|lll}\n",
       "  & Girth & Height & Volume\\\\\n",
       "  & <dbl> & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t26 & 17.3 & 81 & 55.4\\\\\n",
       "\t27 & 17.5 & 82 & 55.7\\\\\n",
       "\t28 & 17.9 & 80 & 58.3\\\\\n",
       "\t29 & 18.0 & 80 & 51.5\\\\\n",
       "\t30 & 18.0 & 80 & 51.0\\\\\n",
       "\t31 & 20.6 & 87 & 77.0\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 3\n",
       "\n",
       "| <!--/--> | Girth &lt;dbl&gt; | Height &lt;dbl&gt; | Volume &lt;dbl&gt; |\n",
       "|---|---|---|---|\n",
       "| 26 | 17.3 | 81 | 55.4 |\n",
       "| 27 | 17.5 | 82 | 55.7 |\n",
       "| 28 | 17.9 | 80 | 58.3 |\n",
       "| 29 | 18.0 | 80 | 51.5 |\n",
       "| 30 | 18.0 | 80 | 51.0 |\n",
       "| 31 | 20.6 | 87 | 77.0 |\n",
       "\n"
      ],
      "text/plain": [
       "   Girth Height Volume\n",
       "26 17.3  81     55.4  \n",
       "27 17.5  82     55.7  \n",
       "28 17.9  80     58.3  \n",
       "29 18.0  80     51.5  \n",
       "30 18.0  80     51.0  \n",
       "31 20.6  87     77.0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "### which\n",
    "\n",
    "# This function gives a list of the positions within an object \n",
    "# occupied by entries that satisfy a certain condition. For \n",
    "# the next example we use the data set trees which provides \n",
    "# measurements of the Girth, Height and Volume of timber in \n",
    "# 31 felled black cherry trees. Girth is the diameter of the \n",
    "# tree (in inches) measured at 4 ft 6 in above the ground. \n",
    "# The expression tree\\$Volume indicates the variable Volume \n",
    "# of this data set.\n",
    "\n",
    "\n",
    "str(trees)\n",
    "which(trees$Volume > 50)\n",
    "trees[which(trees$Volume > 50),]\n",
    "trees[trees$Volume > 50,]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>6</li><li>5</li><li>4</li><li>6</li><li>5</li><li>4</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 6\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 6\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 6\n",
       "2. 5\n",
       "3. 4\n",
       "4. 6\n",
       "5. 5\n",
       "6. 4\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 6 5 4 6 5 4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "1"
      ],
      "text/latex": [
       "1"
      ],
      "text/markdown": [
       "1"
      ],
      "text/plain": [
       "[1] 1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "3"
      ],
      "text/latex": [
       "3"
      ],
      "text/markdown": [
       "3"
      ],
      "text/plain": [
       "[1] 3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# The functions which.max and  which.min that give the position \n",
    "# of the (first) maximum and (first) minimum values of an vector:\n",
    "\n",
    "(b <- rep(6:4,2))\n",
    "which.max(b); which.min(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 8 × 3</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>age</th><th scope=col>weight</th><th scope=col>sex</th></tr>\n",
       "\t<tr><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;fct&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>20</td><td>50</td><td>Male  </td></tr>\n",
       "\t<tr><td>40</td><td>50</td><td>Male  </td></tr>\n",
       "\t<tr><td>20</td><td>70</td><td>Male  </td></tr>\n",
       "\t<tr><td>40</td><td>70</td><td>Male  </td></tr>\n",
       "\t<tr><td>20</td><td>50</td><td>Female</td></tr>\n",
       "\t<tr><td>40</td><td>50</td><td>Female</td></tr>\n",
       "\t<tr><td>20</td><td>70</td><td>Female</td></tr>\n",
       "\t<tr><td>40</td><td>70</td><td>Female</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 8 × 3\n",
       "\\begin{tabular}{lll}\n",
       " age & weight & sex\\\\\n",
       " <dbl> & <dbl> & <fct>\\\\\n",
       "\\hline\n",
       "\t 20 & 50 & Male  \\\\\n",
       "\t 40 & 50 & Male  \\\\\n",
       "\t 20 & 70 & Male  \\\\\n",
       "\t 40 & 70 & Male  \\\\\n",
       "\t 20 & 50 & Female\\\\\n",
       "\t 40 & 50 & Female\\\\\n",
       "\t 20 & 70 & Female\\\\\n",
       "\t 40 & 70 & Female\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 8 × 3\n",
       "\n",
       "| age &lt;dbl&gt; | weight &lt;dbl&gt; | sex &lt;fct&gt; |\n",
       "|---|---|---|\n",
       "| 20 | 50 | Male   |\n",
       "| 40 | 50 | Male   |\n",
       "| 20 | 70 | Male   |\n",
       "| 40 | 70 | Male   |\n",
       "| 20 | 50 | Female |\n",
       "| 40 | 50 | Female |\n",
       "| 20 | 70 | Female |\n",
       "| 40 | 70 | Female |\n",
       "\n"
      ],
      "text/plain": [
       "  age weight sex   \n",
       "1 20  50     Male  \n",
       "2 40  50     Male  \n",
       "3 20  70     Male  \n",
       "4 40  70     Male  \n",
       "5 20  50     Female\n",
       "6 40  50     Female\n",
       "7 20  70     Female\n",
       "8 40  70     Female"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## expand.grid\n",
    " \n",
    "# This function creates a data frame with all possible \n",
    "# combinations of vectors or factors that appear as arguments \n",
    "# for the function. Let's look at an example:\n",
    "\n",
    "expand.grid(age=c(20,40),weight=c(50,70),sex=c('Male','Female'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'regular'</li><li>'bad'</li><li>'bad'</li><li>'regular'</li><li>'good'</li><li>'good'</li><li>'regular'</li><li>'bad'</li><li>'good'</li><li>'good'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'regular'\n",
       "\\item 'bad'\n",
       "\\item 'bad'\n",
       "\\item 'regular'\n",
       "\\item 'good'\n",
       "\\item 'good'\n",
       "\\item 'regular'\n",
       "\\item 'bad'\n",
       "\\item 'good'\n",
       "\\item 'good'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'regular'\n",
       "2. 'bad'\n",
       "3. 'bad'\n",
       "4. 'regular'\n",
       "5. 'good'\n",
       "6. 'good'\n",
       "7. 'regular'\n",
       "8. 'bad'\n",
       "9. 'good'\n",
       "10. 'good'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \"regular\" \"bad\"     \"bad\"     \"regular\" \"good\"    \"good\"    \"regular\"\n",
       " [8] \"bad\"     \"good\"    \"good\"   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'good'</li><li>'good'</li><li>'good'</li><li>'good'</li><li>'good'</li><li>'good'</li><li>'good'</li><li>'good'</li><li>'good'</li><li>'bad'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'good'\n",
       "\\item 'good'\n",
       "\\item 'good'\n",
       "\\item 'good'\n",
       "\\item 'good'\n",
       "\\item 'good'\n",
       "\\item 'good'\n",
       "\\item 'good'\n",
       "\\item 'good'\n",
       "\\item 'bad'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'good'\n",
       "2. 'good'\n",
       "3. 'good'\n",
       "4. 'good'\n",
       "5. 'good'\n",
       "6. 'good'\n",
       "7. 'good'\n",
       "8. 'good'\n",
       "9. 'good'\n",
       "10. 'bad'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \"good\" \"good\" \"good\" \"good\" \"good\" \"good\" \"good\" \"good\" \"good\" \"bad\" "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "## Sampling\n",
    "\n",
    "# The sample function generates random samples from a given set. \n",
    "# The syntax is \n",
    "###\n",
    "# sample(x, size, replace = FALSE, prob = NULL)\n",
    "###\n",
    "# where x is the set from which we want to obtain the sample, \n",
    "# size is the size of the sample, replace indicates if repetitions \n",
    "# are allowed or not, and prob is a probability vector if we want \n",
    "# to get a sample with a non-uniform distribution. Let's look at \n",
    "# some examples. \n",
    "\n",
    "\n",
    "xy <- c('bad','regular','good')\n",
    "sample(xy,10,replace=T)\n",
    "pp <- c(0.1,0.1,0.8)\n",
    "sample(xy,10,replace=T,prob=pp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>-1.59661530016901</li><li>-2.75595290435043</li><li>0.333708037769304</li><li>-0.498931876076869</li><li>1.35388429373378</li><li>0.843827008425952</li><li>-1.13379721483015</li><li>-0.27683200652119</li><li>-0.343797545803911</li><li>0.0824135261964889</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item -1.59661530016901\n",
       "\\item -2.75595290435043\n",
       "\\item 0.333708037769304\n",
       "\\item -0.498931876076869\n",
       "\\item 1.35388429373378\n",
       "\\item 0.843827008425952\n",
       "\\item -1.13379721483015\n",
       "\\item -0.27683200652119\n",
       "\\item -0.343797545803911\n",
       "\\item 0.0824135261964889\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. -1.59661530016901\n",
       "2. -2.75595290435043\n",
       "3. 0.333708037769304\n",
       "4. -0.498931876076869\n",
       "5. 1.35388429373378\n",
       "6. 0.843827008425952\n",
       "7. -1.13379721483015\n",
       "8. -0.27683200652119\n",
       "9. -0.343797545803911\n",
       "10. 0.0824135261964889\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] -1.59661530 -2.75595290  0.33370804 -0.49893188  1.35388429  0.84382701\n",
       " [7] -1.13379721 -0.27683201 -0.34379755  0.08241353"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>7</li><li>10</li><li>10</li><li>10</li><li>9</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 7\n",
       "\\item 10\n",
       "\\item 10\n",
       "\\item 10\n",
       "\\item 9\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 7\n",
       "2. 10\n",
       "3. 10\n",
       "4. 10\n",
       "5. 9\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  7 10 10 10  9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>0.380712508223951</li><li>0.49674351233989</li><li>0.141793910416894</li><li>0.0778103892407616</li><li>0.811463633753704</li><li>0.0638953247478043</li><li>1.20417384529329</li><li>2.11751319641683</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 0.380712508223951\n",
       "\\item 0.49674351233989\n",
       "\\item 0.141793910416894\n",
       "\\item 0.0778103892407616\n",
       "\\item 0.811463633753704\n",
       "\\item 0.0638953247478043\n",
       "\\item 1.20417384529329\n",
       "\\item 2.11751319641683\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 0.380712508223951\n",
       "2. 0.49674351233989\n",
       "3. 0.141793910416894\n",
       "4. 0.0778103892407616\n",
       "5. 0.811463633753704\n",
       "6. 0.0638953247478043\n",
       "7. 1.20417384529329\n",
       "8. 2.11751319641683\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 0.38071251 0.49674351 0.14179391 0.07781039 0.81146363 0.06389532 1.20417385\n",
       "[8] 2.11751320"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>9</li><li>10</li><li>4</li><li>13</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 9\n",
       "\\item 10\n",
       "\\item 4\n",
       "\\item 13\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 9\n",
       "2. 10\n",
       "3. 4\n",
       "4. 13\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  9 10  4 13"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# \\begin{center\n",
    "# \\begin{tabular{ll\n",
    "# \\hline {\\bf Distribution & {\\bf Function\\\\\n",
    "# \\hline Gaussian & rnorm(n, mean=0, sd=1)\\\\\n",
    "# Exponential &rexp(n, rate=1)\\\\\n",
    "# Gamma & rgamma(n, shape, scale=1)\\\\\n",
    "# Poisson & rpois(n, lambda)\\\\\n",
    "# Weibull & rweibull(n, shape, scale=1)\\\\\n",
    "# Cauchy & rcauchy(n, location=0, scale=1)\\\\\n",
    "# Beta & rbeta(n, shape1, shape2)\\\\\n",
    "# t & rt(n, df)\\\\\n",
    "# Fisher & rf(n, df1, df2)\\\\\n",
    "# $\\chi^2$ & rchisq(n, df)\\\\\n",
    "# Binomial & rbinom(n, size, prob)\\\\\n",
    "# Multinomial & rmultinom(n, size, prob)\\\\\n",
    "# Geometric & rgeom(n, prob)\\\\\n",
    "# Hipergeometric & rhyper(nn, m, n, k)\\\\\n",
    "# Logistic & rlogis(n, location=0, scale=1)\\\\\n",
    "# Lognormal & rlnorm(n, meanlog=0, sdlog=1)\\\\\n",
    "# Negative Binomial & rnbinom(n, size, prob)\\\\\n",
    "# Uniform & runif(,n min=0, max=1)\\\\\n",
    "#  \\hline\n",
    "# \\end{tabular\n",
    "# \n",
    "# \\bigskip\n",
    "# {\\small Table 1.3. Functions for generating random numbers.\n",
    "# \\end{center\n",
    "\n",
    "# Let`s look at some examples:\n",
    "\n",
    "(rnorm(10))\n",
    "(rbinom(5, 20, 0.5))\n",
    "(rexp(8))\n",
    "(rpois(4, lambda=10))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "0.97500210485178"
      ],
      "text/latex": [
       "0.97500210485178"
      ],
      "text/markdown": [
       "0.97500210485178"
      ],
      "text/plain": [
       "[1] 0.9750021"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "1.95996398454005"
      ],
      "text/latex": [
       "1.95996398454005"
      ],
      "text/markdown": [
       "1.95996398454005"
      ],
      "text/plain": [
       "[1] 1.959964"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Associated with these functions for generating random numbers \n",
    "# are three others (for each distribution) that allow to obtain \n",
    "# values for the density, distribution and quantile functions. \n",
    "# The initial letter R must be replaced by d, p or q, respectively. \n",
    "# The main argument for these functions is the vector of points \n",
    "# where we want the function to be evaluated.\n",
    "\n",
    "pnorm(1.96)   ####number to prob\n",
    "qnorm(0.975)###### prbo to number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>-1.95996398454005</li><li>1.95996398454005</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item -1.95996398454005\n",
       "\\item 1.95996398454005\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. -1.95996398454005\n",
       "2. 1.95996398454005\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] -1.959964  1.959964"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The quantiles for the normal distribution for a two-sided test \n",
    "# at the 5\\% level are\n",
    "qnorm(c(0.025,0.975))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0gAAANICAIAAAByhViMAAAACXBIWXMAABJ0AAASdAHeZh94\nAAAgAElEQVR4nOzde3zO9f/H8edlR8yGnBqGzXJoaZVDkoqEqdCBlFMOJefDz6lyrCSn0lcl\nSmTkUJSyiiY0xyikg2/McgpDYg4btv3++Hy7vvsOs82293V9rsf95tbts8/1ua7rucvi6fU5\nOdLT0wUAAAD3V8h0AAAAAOQNih0AAIBNUOwAAABsgmIHAABgExQ7AAAAm6DYAQAA2ATFDgAA\nwCYodgAAADZBsQMAALAJih0AAIBNUOwAAABsgmIHAABgExQ7AAAAm6DYAQAA2ATFDgAAwCYo\ndgAAADZBsQMAALAJih0AAIBNUOwAAABsgmIHAABgExQ7AAAAm6DYAQAA2ATFDgAAwCYodgAA\nADZBsQMAALAJih0AAIBNUOwAAABsgmIHAABgExQ7AAAAm6DYAQAA2ATFDgAAwCYodgAAADZB\nsQMAALAJih0AAIBNUOwAAABsgmIHAABgExQ7AAAAm6DYAQAA2ATFDgAAwCYodgDc3ieffOJw\nOBwOh7+/v3u9eDbfroAzGHlHAHmCYgfY3/vvv+/4xy233JKampppg3nz5lmPNm/e3EjCApPx\no7AUKlSoRIkSNWrU6NSp0+LFiy9evGg6IwDknrfpAAAK1M8//zxnzpxu3bqZDuIq0tPT//77\n77///nvXrl3R0dEhISFz5sxp1KiRc4PIyMg33nhDkrd3bv7APHr0aPny5VNTU3/77bfq1atf\nc/vrfLtcuGLCgo8BIE/wfyzgcUaOHNmuXbuiRYuaDmJYixYtfHx80tLS/vrrr+3bt589e1bS\n/v37mzRpsmTJktatW1ubVa1adcCAAbl+l8WLF18+Is3Cdb5dLlwxYcHHAJAn2BULeJzDhw9P\nmTLFdArz5s+f/9lnn33++efr1q07ceLEtGnTChcuLCktLa19+/aHDh3Kk3dZtGhRnrxO/nH9\nhACyj2IHeJDGjRs7HA5JkyZNOnLkyDW3P3369KuvvnrnnXeWLFnS19e3bNmyzZo1mz17dqYB\nzwcffGAdr3bvvfdeunSpf//+pUuXLlu2bMaH7rnnHkmffPLJbbfdVqRIkcqVK48YMcI6oO23\n335r2bJliRIlAgICmjZt+ssvv2R88fT09IULFzZr1qxMmTI+Pj6BgYH16tWbNm1ajsZg1+Tn\n59enT59PP/3U+nzOnTs3btw466GrnUZw6dKlmTNnNmnSxApWpkyZOnXqjB8//vjx49YGDz30\nkMPhWL9+vfVljRo1HA6HNQbL4hPL+qyFQoUKSfr000/vueeeoKCgwMDARo0arVmzJuM2I0aM\nsF7hzjvvzLj+s88+s9Y7965mkTCLGDn9qbB+6+Pi4h544AHrd7lhw4axsbHX/l0BkAvpAOzu\nvffes/5/79at2xNPPGEtP/vss84NoqOjrZXNmjVzrty+fXv58uWv+OdG/fr1jx8/7tzyo48+\nstbXqlXLOQv08vJKT09fuHCh9WVERMTixYut2uTUu3fvvXv3lipVKuPK0qVL//33384Xb9++\n/RUzPPTQQ2lpadY2H3/8sbXSz88vmx+FpJMnT16+QcuWLa1Hy5QpY73+FV/8woUL99133xWD\nhYaG7tmzJz09/cEHH7z80f79+2f9iV3x7ZwrAwICpk+fnuk1CxUqtHz5cufGL774orW+Xr16\nGb+1Tz/9NOMbZZ3wah9p9n8qMv7Wr1ixwtfXN+PGXl5esbGxWf9mAcgFJnaABzlz5syrr75q\n/RU7a9asX3/99Wpbnjx58sEHH7R2R1apUmX69OmfffbZsGHDrGHPxo0bO3fu7NzYx8fHWjh9\n+vTUqVN9fHwiIyOrVq0qycvLy3roxIkTgwYNevjhh/v06RMUFGStfP/993v37u3r69u/f/96\n9epZK48dOzZ79mxrefny5fPnz5dUqFChd955Z+fOnbNmzbIyLF++/JNPPsnDD8fy6KOPWguJ\niYm7du262mazZs2y5mTVq1dfsGDBhg0bvv7668cee0zS3r17rXNTJk6cuGzZMudT5s+fHxcX\n179/f2X5iWXt4sWLQ4cO7d69+4IFCyZOnGh9kmlpaT179rxw4UJOv9ksEl5Rjn4qMv7W9+jR\no2bNms8//3zTpk2tlampqS+88EJOAwO4Jk6eADzIpUuXQkNDe/XqNXXq1NTU1KFDhy5fvvyK\nW06bNs36+zswMHDdunXBwcGSWrVqFRER0bFjR0kxMTE//PDDHXfckfFZf/zxR3h4+N69eytU\nqJDpBQ8fPtymTZvFixdLatSokdWBUlJSVq9e/csvv4SGhl64cKFWrVr//ve/JX377bfWDsF9\n+/ZZU6WqVav27NlTUkRExLJlyz7//HNJy5cvb9OmTd5+RNWqVXMuHzlypEaNGlfcbPPmzdbC\nM888065dO2u5cePGnTt3vuGGGypUqJCWllazZs2SJUs6n3L77bdfflZsFp/YFaWkpHTp0sU5\ntAsNDX388cclHThwYNWqVVFRUdn6Jv+RnYQZ5e6n4vDhww0bNly5cqW1V7dDhw5WWd+6devF\nixedHRdAnmBiB3ickSNHFi9eXFJMTMy33357xW2WLl1qLTz66KPW39+WJ598skSJEtbyl19+\nefkTx44de7WOMmTIEGvh4Ycf9vPzs5YfeeSR0NBQSb6+vg8//LC18sCBA9ZC7969ly9fvnz5\n8qlTpzpfp1KlStZCdg4TzKmAgADnclJS0tU2CwwMtBbefPPN6Ojoo0ePSvLx8fnoo4+mTZs2\nbNgw62C47MjiE7ui3r17O5dbt27tTLJp06bsv0juXM9PhfNYvS5dulgLaWlpf/75Zz7GBTwS\nxQ7wOCVLlnz++eet5cGDB6enp2faID093XkGwy233JLxIS8vL+dQ57fffrv8xRs3bny1942I\niLAWfHx8SpcubS3XqlXLucGNN95oLWRsVLGxsa1btw4LC/P397cOxp82bZr1UN6eP2E5efKk\nc9lZVi7XpUuXIkWKSNq/f3+nTp3KlStXtWrV7t27L126NKepsvjELufj41OzZk3nl15eXs4d\nuPv378/R++bU9fxU1K5d27ns7OXKsjoDyB2KHeCJ+vXrFxISImnbtm3z5s3LdBHac+fOXbp0\nyVrOOMGyOC+Ad/nfyl5eXs7Glomfn591MRHnl9aCNTu0ZDq+XtL06dMfeOCBZcuW7d2719vb\nu0aNGrfeemumky3y1vbt253L1kd0RZGRkTExMTfffLNzTXx8/KxZsx577LGqVatu3Lgxm2+X\nxSd2RUWLFs00C7T6paTz589n/3VyIdc/FX5+fsWKFXN+yT3KgHxFsQM8kb+//yuvvGItv/ji\ni5mKXZEiRZxrTp8+nem5zr+5nedAOHl7e2d/F+Q1nTlzZvDgwdbyU089dezYsV9//XX79u1t\n27bNq7e4nPNcztDQ0Iyzpcvdd999O3fu3LBhw0svvdS8eXPnp/HHH3+0atXKutzxNeX0Ezt/\n/nymCavzjS6/4nRKSkrGLxMTE7P/RpfL9U8FgIJEsQM8VIcOHSIjIyUdOHDAefUNi8PhcO42\nzTjBknTx4kXnubQZ96Lmh23btp07d85aHjJkiHPgZ51gkR+s81ut5Q4dOlxze4fDUb9+/ZEj\nR3711VcnTpxYtmyZtff22LFj3333XX4kTElJyfjtX7p0ac+ePdZy5cqVrQXnOO3PP//M2AJ/\n/PHH63lrF/mpAJA1ih3goRwOx6RJk6zljNe8sDiv+vHZZ58dPHjQuX7OnDnWbMbhcDhvupVP\nMg6crEsZS/r1119Xr16daeX1S01Nfffdd59++mnry9KlS2dxQ63z58+PHz++S5curVq1SktL\ns1Z6eXm1bNmyTp06GcNnvG6f88LF12nmzJnO5aVLlzpHZXfffbe14DwVIzExMSYmxlq27oR7\n+avlKKEr/FQAyBqXOwE8V5MmTZo1a7ZixQpnO3Hq27fvzJkzDx48ePbs2UaNGg0cOLBcuXKb\nNm3617/+ZW3QrVu3m266KV/j1axZs1ChQla2l19++dVXX01ISOjZs2d4eLg1tdq+ffumTZus\nk2pzoX379ta1Ns6cObNjxw5nrfHx8Vm4cGEWZ04ULlx48eLF1tSqbdu23bp1K1OmzLlz51av\nXm2VTj8/v7vuuktSqVKlfHx8rAL6wgsv9O3bNygoyHktt+zLWB/ffvttSffdd9+ePXvGjh1r\nra9WrZp1gwdJd911l8PhsGZ17dq169ChQ7FixT744IPIyEjnPNIpRwld4acCwDWYvDoygALh\nvN3CY489lumhn376KeMxXtm888Sjjz5qHexlyeLGD1d7KCwszFo/ffp050rn6a5hYWHWmr59\n+2Z66+Dg4ISEhIzX2hg9enTu7jxxRRUqVIiLi7vmt7Bz586rXaOkUKFCs2bNcm6Z6dpyDz74\nYC4+sXnz5lkry5Qp47zXmZO/v//69eszvshzzz2XaZvw8PB169ZZyw6Hw3nTjpwmvP6fCue1\nbCTt3Lkz698vADnFrljAo91yyy0Z7xaQ0a233vrrr7++8sorderUCQoK8vHxufHGGx955JHP\nP/98yZIlBXNu45QpUyZMmFCzZs3ChQuXL1++e/fuW7ZsqVy58ocfflitWjVvb+8KFSpc7RrC\n2Wd9a1FRUdOnT9+9e7dzn2YWIiIitm7d+vLLL9euXbts2bI+Pj5FihSpXr36s88+u23btq5d\nuzq3fO+991q3bl28eHF/f/8qVapYk7ycSk5OthZKliz5wgsvzJ49OzIy0t/fv0SJEi1btty0\naVOml33rrbfGjx8fHh7u6+tbvnz5Z599dt26dc6D8NLT0zOeQpujhK7wUwEgC/8Z1wMAAMDd\n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\nAMiRc9Je6Q/pgHRAOijtkw5KhyTrSCY/qaxU/p//3iyVkspKZaRSUmnpBk+amZllq2I3adKk\nCRMmuM6B8/7SHNMZ8lZ8fLyky2/I269fv4iIiGnTpi1dujQ6OtrhcERFRb3zzjuVKlW6znes\nU6dO3bp1L19funRp57KPj891vgsAwPKX9Lu0S4qXEqS9UoJ0RJJUWKokVZAqSI2kClJFqbxU\nTiplODX+y1bFDvkqLS0tJiZG0j333HP5o40bN27cuHFKSkpcXNy8efPmzp3bpEmTX375xTq/\nIddatGjB5U4AIJ/sk36WfpF+l/4t7ZKOS5IqSqFSqNRCqiKFSlUk7jLkFih2yK4ZM2YkJCS0\nbNmybNmyV9vGz8/PuuhMkSJFpk+fvn379ivO2wAABS9J2i7tkHZKP0s/S6elwlINqZr0gNRb\nqibd9M85B3BHblPsateufc1tDh06VABJPFBaWtqMGTMGDBgQGBg4adKkTI9u2rTpscceGz9+\nfKdOnZwrCxUqpH92klq3ejt//r/noScnJ+/atatYsWJhYWEF8Q0AgEdKkrZJP/zz63fJIVWV\nbpGaSoOkW6Qwidtx2onbFLtt27bpWkdTXbp0qaDi2FxsbGxycrKk9PT0xMTE1atX79u3r0yZ\nMkuWLLnpppsybVy7du2SJUs+88wz69ati4yMdDgcW7dunTNnzt13322d3xAaGirptddeS0hI\naNiwYZ06dfbs2XPbbbfdf//9sbGxBf/dAYCN7ZE2SBul9dIvkkOqLt0h9ZRul25jGmd3blPs\nhgwZ8s477/z4449ZnPQ6fPjwCRMmFGQqu1q/fv369eut5cDAwGrVqnXr1q1Pnz4lSpS4fGNv\nb++1a9e+/PLLX3zxxfz58318fCpXrvzKK6/07dvX4XBIatmy5WOPPfbll1/u3r175syZOb0j\nGQAgC2nSDmm19J20UUqUykr1pY5SfZqc53G4zjmkWbt48WK9evW8vLw2bNhwtbmdVezy/Dua\nMWPG/PnzY2Njr/M8ALigqKioyMjI8ePHmw4CADnzq7Ra+lZaI/0l1ZDule6S6kuuctEv+7pw\n4YKfn9/69evvuusu01kyc5vLyvj4+MyfP/+XX3554YUXTGcBAMCA09InUlcpWLpZmiIVl/4l\n/Sn9Kk2XOtLqPJ7b7IqVVKNGjSNHjmRxIF1UVFTx4sULMhIAAPntV+lL6UtpneQnNZHGSk2k\nKqaDwQW5U7GTFBgYmMWj995777333ltgYQAAyD8/SEukT6Td0k3Sg9ILUkPJz3QwuDI3K3YA\nANhYuvT9P33uD6mO9Iz0CDtYkW0UOwAAzPu3FC3Nkw5Id0p9pUel670tIzwPxQ4AAGP+khZK\nc6XNUqTUX2orlTedCu6LYgcAQEFLk76SZkkx0g1Se+k96RbTqWADFDsAAApOovSBNEM6LD0i\nLZMe4KZeyDsUOwAACsIP0kwpWiopdZd6SWVMR4L9UOwAAMhHF6VF0mRppxQlfSxFudHtAeBu\n+NGCi2rXrp3D4Thy5IjpIACQS0nSG1JVqZd0v7RHWi49yF+9yE/8dOF/zJs3z5GBr69vuXLl\nmjZt+uabb546daogk0RGRjZr1szP7z9X4nzttdf27NlTkAEAINcSpTFSZek1qYv0hzSFG0Wg\nQLArFlfQoEGDu+++W9KFCxcOHToUFxf3zTffjB8/ft68eU2aNCmYDMOHDx8+fLi1fPjw4eef\nfz4yMrJqVS7SCcClHZTGS7OkUGmi1IEbRaBgUexwBU2aNBkzZozzy9TU1Dlz5vTr169ly5Zr\n166tU6dOAefZsmVLAb8jAOTUYek1aaZUTVootWSnGEzgpw7X5uXl1a1btw8//PD8+fP9+vVz\nrj969Gjv3r0rVark6+tbunTp1q1bZ2xgTz31lMPhOHPmzLBhwypXruzn51exYsU33ngjPT3d\n2iAlJWXSpEm33nprUFBQsWLFatWqNWnSpLS0NOtR5zF2Dz30UKtWrSRFRUU5HI5169Y1bNjQ\ny8vrwIEDGUOeOHHCx8enfv36+f5xAMD/Oi4Nl6pKsdIM6UepNX+/whB+8JBdjz/++O23375p\n06bdu3dLOnbsWL169ebPn//kk09+8MEHgwYN+uGHHxo2bLh27Vpre19fX+tZp0+fXrhw4erV\nq2vWrDlo0KA5c+ZYG/Ts2XPo0KERERETJkyYPHly1apVhw4dmrE4WkaMGNGxY0dJo0aN+vTT\nT2vWrNm9e/e0tLS5c+dm3GzJkiWXLl16+umn8/dTAIAMTksvSJWlz6T3pZ1SJ/5mhVHsikUO\nNGvW7Mcff9y0aVN4ePjo0aMPHTq0cePG2rVrW4926NDh5ptvHjx4sDW38/b2llSyZMnp06db\nG0yfPj0sLGzp0qVdunSRtGjRovr168+fP996tEePHoMGDdq/f39qaqqX13+v1nnnnXeuWbNG\nUv369Zs3by6pTZs2/fv3//DDD1988UXnZosXL/b392/Xrl3+fwwAoFRpljRKKiy9I7XnIsNw\nDRS7fHQhNX3Wrr9TUtMK8k0LORyPhwYGF82X39ny5ctLSkxMTE9P//jjj2vVqlWhQgXnFUl8\nfHzuuuuuFStWnDlzJiAgwFrZuXNn59NDQ0OLFCly8OBB5/b79u1LTEwsU+Y/F+l8/fXXsxOj\nSJEiTz755Lvvvrt+/foGDRpIOnbs2Jo1a9q2bRsUFJRH3ysAXNUq6f+kPdJgabjkbzoP4ESx\ny0e+Xo6mFYteTEsvyDd1SKUL59e/Gy9evCjJ29s7MTHx+PHjx48fv/HGGy/fbP/+/TVr1rSW\nQ0JCMj7k4+NjvYikl156qX///uHh4a1atWrUqFHTpk2t4pgd3bt3f/fdd+fMmWMVuyVLlqSm\nplqDQADIP/+WRkpLpPbS11I503mATCh2+Sss0Nd0hLwUHx8vKTg4OCkpSVJkZOT48eMv3yw4\nONi57OPjc7VX69evX0RExLRp05YuXRodHe1wOKKiot55551KlSpdM8kdd9xx2223LV68+F//\n+lfhwoUXL15csWLF+++/PzffFQBkwxlplDRNaiztkCJM5wGuiGKH7EpLS4uJiZF0zz33OFda\nB73lWuPGjRs3bpySkhIXFzdv3ry5c+c2adLkl19+sU68yFq3bt369OkTExNz9913r1279vnn\nny9UiEOWAeSLz6R+kpf0qfSQ6TBAFviLENk1Y8aMhISEli1bli1btmzZsqVKldq1a9fff/+d\ncZtjx47l4pX9/PyaNGkyZ86c5557bs+ePdu3b8/Os9q3b1+4cOFFixYtWrQoLS2N82EB5Ic/\npTZSG+kRaSetDi6PYodrS0tLmz59+oABAwIDAydNmmStbNOmTXJysvNLSceOHatVq9bDDz+c\nndfctGlT+fLlM12yxBq5Xb731jpJ9vz58xlXFi9e/NFHH/3yyy/nzJlz9913c1MKAHnrkvSm\nVF1KkDZJb0oBpiMB18SuWFxBbGxscnKypPT09MTExNWrV+/bt69MmTJLliy56aabrG3GjBkT\nExPz6quvHj58+N577/3zzz/ffffdEydOXH4huiuqXbt2yZIln3nmmXXr1kVGRjocjq1bt1oV\nLTIyMtPGoaGhkl577bWEhISGDRs6b33RvXv3+fPnb9++/f3338+zbx4ApJ+lznomOawAACAA\n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\nHq6lxSfzf33Kb48+i0Qiee+WsqPr/no7kfzwTa8i1OVjV+yzN1RWamrqn3/P7du3/6dHnjp1\nytDQ0M7OrqSkRMiECu7Dv8DS0tL58+cD6NWrV1ZWllghFdanPP14fuInSkxMBDBixIj3bp87\ndy6AqKgoMUIpKz7ryo1vejKk2h+77PvyUrt2bemnnS7XuXNnNze3HTt2JCQkNGnSRN7BlMUH\nfoFSqXT06NFBQUGTJk1atWqVpqamwNkU36c//eijrKystLS0UlJS3rs9KSkJgI2NjRihSL3w\nTU+2VPtjl8fYCerJkyctWrQYPnz4e7fn5+cDyM3NFSOU8pk6dWpQUNCSJUvWrFnDNziSNx0d\nHXt7+9jY2Ly8vHc3lpaWnj592tLS0srKSsRspCb4plduavixy2InKAsLi1evXu3evfvixYvv\nbrx3715kZKSRkZGtra2I2ZTF/v37AwICpkyZ8vXXX4udhdTFqFGj8vLyfvzxx3e3bNy48enT\np6NHjxYxFakJvulVhBp+7PKSYkILCwsbNGiQhobGwIED69ev/+TJk7179+bm5q5bt65seXH6\nsAYNGiQlJU2aNMnAwOC9u2bPns3rO33Y6dOnjx49WvbnFStWmJmZjRgxouxfZ86cWbVqVfGi\nKbSSkpIuXbr8/vvvbm5urVu3vnPnzu7du21tbS9cuPDX5yG9h8+6CuKbXgWp3ceumAf4qasL\nFy64u7ubmZlpampWqlSpe/fuBw8eFDuU0vjAkzk5OVnsdIpu6dKl//TbS0xMFDudQsvOzi67\nCru2traFhcWECRMyMjLEDqUc+KyrIL7pVZxafexyjx0RERGRiuAxdkREREQqgsWOiIiISEWw\n2BERERGpCBY7IiIiIhXBYkdERESkIljsiIiIiFQEix0RERGRimCxIyIiIlIRLHZEREREKoLF\njoiIiEhFsNgRERERqQgWOyIiIiIVwWJHREREpCJY7IiIiIhUBIsdERERkYpgsSMiIiJSESx2\nRERERCqCxY6IiIhIRbDYEREREakIFjsiIiIiFcFiR0RERKQiWOyIiIiIVASLHREREZGKYLEj\nIiIiUhEsdkREREQqgsWOiIiISEWw2BERERGpCBY7IiIiIhXBYkdERESkIljsiIiIiFQEix0R\nERGRimCxIyIiIlIRLHZERB/i7e0tkUgeP34sdhAioo9jsSMi1dSnTx+JRHL27Nm/vbe0tNTK\nykpPTy8jI0PgYERE8sNiR0Sqyd/fH8CmTZv+9t7IyMjU1NSBAwdWrVpV2FxERHLEYkdEqqlP\nnz4WFhZ79+7Nzs7+671lhc/Pz0/wXEREcsRiR0SqSVNTc9SoUbm5ubt27XrvroyMjIMHDzZq\n1KhTp04AYmNj+/fvX61aNR0dnTp16vj4+Dx8+PBvt9m3b1+JRPL69et3txQXF0skku7du7+7\n5cWLFxMmTLC2ttbR0TEzM3N3d7906dK7ewsKCn788ccWLVqYmpoaGxvb2dn9+OOPpaWlMvwP\nJyJ1xmJHRCpr9OjRGhoaf/02NiQkpLCwsGx33ZUrVzp16hQbGztlypT169cPHjw4PDzcycmp\nfMfevXz50snJafv27YMHDw4KCpo2bdqVK1ecnZ1Pnz5d9oBx48bNmjXL1tZ22bJlK1asaNCg\nwaxZsyZPnlzB/1IiojJaYgcgIpIXS0vL3r17HzlyJD4+vlmzZu9uDwoK0tXVHTFiBIDY2Nim\nTZuuXLmyc+fOZfdaWFhMmjRp586dEydO/NyJCxYsePLkSUxMTJs2bcpuGTZsWLNmzWbMmFG2\n32737t1t27bdvn172b3+/v7Tpk179OhRSUmJpqZmxf5ziYi4x46I/q+d+wtpqo0DOP474TRF\nWUUx/2yIhFAStnAFSTlZBkq4GxdCF0YkK2+i625qEgkNKigiCHFsE4xUKPQiSgTXhaLJIJYR\nQThpkzmhUbDFlL0X521vb/LG2z+Cp+/n6vA858/Orr6cs2dK0x/Lff7QbnZ29vnz5y6XS182\n0dPT8+zZM73qstlsJpOpq6sTkf96G/sVuVzu/v379fX1ZrN5+RODwdDY2Dg3N/fhwwcRMRgM\ni4uLiUQif9S1a9eGh4epOgA/BWEHQGXHjh0zm836u1d9ZOOyiUAgYLfbt27dWlhYWFxcfOTI\nERFZW1v71mslEolkMjk/P1/xb48ePRKRaDQqIr29vbFYrLa2tqura2Bg4O3btz/lNgFAx6tY\nACrTl1B4PJ6HDx+6XK50Oj00NLRr166mpiZ9hwsXLvT19dlstuvXr9fU1BQVFUUike7u7u+4\nlr781mq19vX1bZytrKwUkXPnzu3Zs+fmzZujo6OBQEDTtLa2ttu3b1dXV//AXQLA3wg7AIrr\n7u6+fPlyf3+/y+UaGRlJpVIXL17UpzKZzI0bNywWy+TkZGlpqT6YSqX+/8nzDwJFpKysTN9o\nbW39yiEOh8PhcHz8+DEUCgWDQb/f39LSEolECgsLv+3GAGADXsUCUJzZbG5ra3v8+HEymQwG\ng5s3b9aXTYjI8vJyOp222Wz5qhOR/ArWjQwGg4hks9n8yJs3b/LbJpNp+/btL1++/Pz/UERk\nZWVl46mKiopaWlp8Pt/Zs2dfv34dDoe/9/4A4B+EHQD1ud3u9fX1u3fvTkxMdHR0bNu2TR83\nmUyapn2+TiIcDvv9fhHJZDIbz1NRUSEiCwsL+RF957zjx49nMhmv15sfWVlZqa+vb29vF5Hp\n6emqqqovDtm0aZN8SkYA+EFaLpf73Z8BAH6t9fX1mpqaZDKZTqenpqYOHz6cn2pvbx8bGztz\n5kxzc/OLFy9u3bo1ODjodDrLy8uvXr3qdDpPnz597969paUls9k8PT198ODBhoYGr9dbUlLy\n4MGDp0+fhsPhAwcOPHnyREQSicT+/fuj0eipU6fsdnssFrtz5048Hh8fHz969Oja2tq+ffte\nvXp18uRJq9Wqadrc3JzP52tsbJyamtI07fd9QwBUkQOAP8ClS5dEZPfu3V+MJxKJEydO7Nix\nw2g0OhyOUCiUy+U8Hk9paWl5eXk8Hu/s7BSRpaUlfX+fz1dXV1dcXGwymdxu97t37yorKw8d\nOpQ/YTwe7+npsVgsBQUFW7ZscTqdMzMz+dnV1dXz58/v3LmzpKTEaDTu3bv3ypUr79+///Vf\nAIA/Ak/sAAAAFMFv7AAAABRB2AEAACiCsAMAAFAEYQcAAKAIwg4AAEARhB0AAIAiCDsAAABF\nEHYAAACKIOwAAAAUQdgBAAAogrADAABQBGEHAACgCMIOAABAEYQdAACAIgg7AAAARRB2AAAA\niiDsAAAAFEHYAQAAKIKwAwAAUARhBwAAoAjCDgAAQBGEHQAAgCIIOwAAAEUQdgAAAIog7AAA\nABRB2AEAACiCsAMAAFAEYQcAAKAIwg4AAEARhB0AAIAi/gLk+TBro7XdYQAAAABJRU5ErkJg\ngg==",
      "text/plain": [
       "Plot with title “Normal Distribution”"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 420
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Graph for the density and distribution function, standard normal \n",
    "# distribution:\n",
    "\n",
    "points.x <- seq(-3,3,length=100)\n",
    "points.den <- dnorm(points.x)\n",
    "points.fd <- pnorm(points.x)\n",
    "plot(points.x, points.fd,type='l',xlab='Values',\n",
    "ylab='', main='Normal Distribution',col='cyan')\n",
    "lines(points.x,points.den,col='darkblue')\n",
    "legend('topleft',c('Dist. Fn','Density'),col=c('cyan','skyblue'),lty=rep(1,2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>5</li><li>4</li><li>3</li><li>2</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 5\n",
       "2. 4\n",
       "3. 3\n",
       "4. 2\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 5 4 3 2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>2</li><li>4</li><li>6</li><li>8</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 6\n",
       "\\item 8\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 2\n",
       "2. 4\n",
       "3. 6\n",
       "4. 8\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 2 4 6 8"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>7</li><li>8</li><li>9</li><li>10</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 7\n",
       "\\item 8\n",
       "\\item 9\n",
       "\\item 10\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 7\n",
       "2. 8\n",
       "3. 9\n",
       "4. 10\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  7  8  9 10"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>3</li><li>0</li><li>-3</li><li>-6</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 3\n",
       "\\item 0\n",
       "\\item -3\n",
       "\\item -6\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 3\n",
       "2. 0\n",
       "3. -3\n",
       "4. -6\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  3  0 -3 -6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>10</li><li>16</li><li>18</li><li>16</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 10\n",
       "\\item 16\n",
       "\\item 18\n",
       "\\item 16\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 10\n",
       "2. 16\n",
       "3. 18\n",
       "4. 16\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 10 16 18 16"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>2.5</li><li>1</li><li>0.5</li><li>0.25</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 2.5\n",
       "\\item 1\n",
       "\\item 0.5\n",
       "\\item 0.25\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 2.5\n",
       "2. 1\n",
       "3. 0.5\n",
       "4. 0.25\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 2.50 1.00 0.50 0.25"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>25</li><li>256</li><li>729</li><li>256</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 25\n",
       "\\item 256\n",
       "\\item 729\n",
       "\\item 256\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 25\n",
       "2. 256\n",
       "3. 729\n",
       "4. 256\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  25 256 729 256"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "## Vectorized Operations\n",
    "# R performs vector operations componentwise: if we add two vectors \n",
    "# of equal length, the result is another vector of the same length, \n",
    "# whose components are the sum of the components of the vectors we \n",
    "# add. This is also true for any other arithmetic operation, \n",
    "# including powers. \n",
    "\n",
    "(a <- 5:2)\n",
    "(b <- (1:4)*2)\n",
    "a + b\n",
    "a - b\n",
    "a * b\n",
    "a / b\n",
    "a^b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1.6094379124341</li><li>1.38629436111989</li><li>1.09861228866811</li><li>0.693147180559945</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1.6094379124341\n",
       "\\item 1.38629436111989\n",
       "\\item 1.09861228866811\n",
       "\\item 0.693147180559945\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1.6094379124341\n",
       "2. 1.38629436111989\n",
       "3. 1.09861228866811\n",
       "4. 0.693147180559945\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 1.6094379 1.3862944 1.0986123 0.6931472"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Function evaluation is also a vectorized operation, this means \n",
    "# that if, for instance, we want to evaluate the logarithm of the \n",
    "# components of a certaiin vector a, we only have to write log(a):\n",
    "\n",
    "log(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>10</li><li>9</li><li>8</li><li>7</li><li>6</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 10\n",
       "\\item 9\n",
       "\\item 8\n",
       "\\item 7\n",
       "\\item 6\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 10\n",
       "2. 9\n",
       "3. 8\n",
       "4. 7\n",
       "5. 6\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 10  9  8  7  6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>3</li><li>5</li><li>7</li><li>9</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 5\n",
       "\\item 7\n",
       "\\item 9\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 3\n",
       "3. 5\n",
       "4. 7\n",
       "5. 9\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 1 3 5 7 9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>-0.17081773231247</li><li>-0.503905180921417</li><li>-0.825833621718904</li><li>-1.13497993283898</li><li>-1.42711635564015</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item -0.17081773231247\n",
       "\\item -0.503905180921417\n",
       "\\item -0.825833621718904\n",
       "\\item -1.13497993283898\n",
       "\\item -1.42711635564015\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. -0.17081773231247\n",
       "2. -0.503905180921417\n",
       "3. -0.825833621718904\n",
       "4. -1.13497993283898\n",
       "5. -1.42711635564015\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] -0.1708177 -0.5039052 -0.8258336 -1.1349799 -1.4271164"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "(x <- 10:6)\n",
    "(y <- seq(1,9,2))\n",
    "\n",
    "# We now define the function in terms of these vectors we have \n",
    "# created and store the results in a new vector z.\n",
    "\n",
    "(z <- log((x^2 + 2*y) / (x + y)^2 ))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>&lt;NA&gt;</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item <NA>\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "6. &lt;NA&gt;\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  1  2  3  4  5 NA"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>2</li><li>4</li><li>6</li><li>8</li><li>10</li><li>&lt;NA&gt;</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 6\n",
       "\\item 8\n",
       "\\item 10\n",
       "\\item <NA>\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 2\n",
       "2. 4\n",
       "3. 6\n",
       "4. 8\n",
       "5. 10\n",
       "6. &lt;NA&gt;\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  2  4  6  8 10 NA"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "&lt;NA&gt;"
      ],
      "text/latex": [
       "<NA>"
      ],
      "text/markdown": [
       "&lt;NA&gt;"
      ],
      "text/plain": [
       "[1] NA"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "## NAs and Infs\n",
    "# Missing data in R are denoted by NA (not available). When we do \n",
    "# an operation with an NA the result will be an NA. \n",
    "\n",
    "(y <- c(1:5,NA))\n",
    "2*y\n",
    "max(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "Inf"
      ],
      "text/latex": [
       "Inf"
      ],
      "text/markdown": [
       "Inf"
      ],
      "text/plain": [
       "[1] Inf"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "Inf"
      ],
      "text/latex": [
       "Inf"
      ],
      "text/markdown": [
       "Inf"
      ],
      "text/plain": [
       "[1] Inf"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "0"
      ],
      "text/latex": [
       "0"
      ],
      "text/markdown": [
       "0"
      ],
      "text/plain": [
       "[1] 0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "NaN"
      ],
      "text/latex": [
       "NaN"
      ],
      "text/markdown": [
       "NaN"
      ],
      "text/plain": [
       "[1] NaN"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Care must be taken with this but R has methods for dealing with\n",
    "# missing data that will appear in the course as needed.\n",
    "# \n",
    "# R can handle adequately the values $\\pm \\infty$ with $\\pm$Inf or \n",
    "# non-numerical values with NaN (not a number):\n",
    "\n",
    "(x <- 2/0)\n",
    "exp(x)\n",
    "exp(-x)\n",
    "x - x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>0</li><li>12</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 0\n",
       "\\item 12\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 0\n",
       "3. 12\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  1  0 12"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>0</li><li>12.3</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 0\n",
       "\\item 12.3\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 0\n",
       "3. 12.3\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  1.0  0.0 12.3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1+0i</li><li>8.3+0i</li><li>12+3i</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1+0i\n",
       "\\item 8.3+0i\n",
       "\\item 12+3i\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1+0i\n",
       "2. 8.3+0i\n",
       "3. 12+3i\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  1.0+0i  8.3+0i 12.0+3i"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'FALSE'</li><li>'12.3'</li><li>'hi'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'FALSE'\n",
       "\\item '12.3'\n",
       "\\item 'hi'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'FALSE'\n",
       "2. '12.3'\n",
       "3. 'hi'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"FALSE\" \"12.3\"  \"hi\"   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# It is important to observe that if elements of different modes \n",
    "# are combined in the same vector, they will all be assigned the \n",
    "# most informative mode among those present:\n",
    "\n",
    "c(T,F,12)\n",
    "c(T,F,12.3)\n",
    "c(T,8.3,12+3i)\n",
    "c(F,12.3,'hi')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "'character'"
      ],
      "text/latex": [
       "'character'"
      ],
      "text/markdown": [
       "'character'"
      ],
      "text/plain": [
       "[1] \"character\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "26"
      ],
      "text/latex": [
       "26"
      ],
      "text/markdown": [
       "26"
      ],
      "text/plain": [
       "[1] 26"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# *Mode* and *length* are atributes of an object. \n",
    "# All objects in R have these two attributes, which are known as \n",
    "# implicit attributes. Vectors only have these two. \n",
    "# Other attributes refer to the structure of more complicated objects.\n",
    "\n",
    "# The functions mode and length give the atributes of an object:\n",
    "\n",
    "mode(letters); length(letters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 6\n",
       "\\item 7\n",
       "\\item 8\n",
       "\\item 9\n",
       "\\item 10\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "6. 6\n",
       "7. 7\n",
       "8. 8\n",
       "9. 9\n",
       "10. 10\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1]  1  2  3  4  5  6  7  8  9 10"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 2 × 5 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>3</td><td>5</td><td>7</td><td> 9</td></tr>\n",
       "\t<tr><td>2</td><td>4</td><td>6</td><td>8</td><td>10</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 2 × 5 of type int\n",
       "\\begin{tabular}{lllll}\n",
       "\t 1 & 3 & 5 & 7 &  9\\\\\n",
       "\t 2 & 4 & 6 & 8 & 10\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 2 × 5 of type int\n",
       "\n",
       "| 1 | 3 | 5 | 7 |  9 |\n",
       "| 2 | 4 | 6 | 8 | 10 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3] [,4] [,5]\n",
       "[1,] 1    3    5    7     9  \n",
       "[2,] 2    4    6    8    10  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We can introduce a multidimensional structure to the elements of \n",
    "# a vector by adding the attribute dim, creating an object called \n",
    "# an array. The dim attribute is a numeric vector that specifies \n",
    "# how many elements should be placed in each dimension. The length \n",
    "# of the dim attribute determines how many dimensions there are.\n",
    "# \n",
    "# If dim has length 2 the array is called a matrix. In this case \n",
    "# the first element determines the number of rows and the second, \n",
    "# the number of columns.\n",
    "\n",
    "x <- 1:10\n",
    "x\n",
    "dim(x) <- c(2,5)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "'numeric'"
      ],
      "text/latex": [
       "'numeric'"
      ],
      "text/markdown": [
       "'numeric'"
      ],
      "text/plain": [
       "[1] \"numeric\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "'numeric'"
      ],
      "text/latex": [
       "'numeric'"
      ],
      "text/markdown": [
       "'numeric'"
      ],
      "text/plain": [
       "[1] \"numeric\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "'numeric'"
      ],
      "text/latex": [
       "'numeric'"
      ],
      "text/markdown": [
       "'numeric'"
      ],
      "text/plain": [
       "[1] \"numeric\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "'matrix'"
      ],
      "text/latex": [
       "'matrix'"
      ],
      "text/markdown": [
       "'matrix'"
      ],
      "text/plain": [
       "[1] \"matrix\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "TRUE"
      ],
      "text/latex": [
       "TRUE"
      ],
      "text/markdown": [
       "TRUE"
      ],
      "text/plain": [
       "[1] TRUE"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "'list'"
      ],
      "text/latex": [
       "'list'"
      ],
      "text/markdown": [
       "'list'"
      ],
      "text/plain": [
       "[1] \"list\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "'data.frame'"
      ],
      "text/latex": [
       "'data.frame'"
      ],
      "text/markdown": [
       "'data.frame'"
      ],
      "text/plain": [
       "[1] \"data.frame\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "'numeric'"
      ],
      "text/latex": [
       "'numeric'"
      ],
      "text/markdown": [
       "'numeric'"
      ],
      "text/plain": [
       "[1] \"numeric\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "## Class\n",
    "# Another important attribute for R objects is the class. \n",
    "# R is an object-oriented language, which means the functions \n",
    "# will act differently depending on the object, and the relevant \n",
    "# attribute for this is the class. If an object has no specific \n",
    "# class assigned to it, such as a simple numeric vector, it's class \n",
    "# is usually the same as its mode, by convention.\n",
    "\n",
    "xx <- (1:10)/2\n",
    "mode(xx)\n",
    "class(xx)\n",
    "dim(xx) <- c(2,5)\n",
    "mode(xx)\n",
    "class(xx)\n",
    "is.numeric(xx)\n",
    "xx <- data.frame(xx)\n",
    "mode(xx)\n",
    "class(xx)\n",
    "mode(xx[2,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>0.5</li><li>1</li><li>1.5</li><li>2</li><li>2.5</li><li>3</li><li>3.5</li><li>4</li><li>4.5</li><li>5</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 0.5\n",
       "\\item 1\n",
       "\\item 1.5\n",
       "\\item 2\n",
       "\\item 2.5\n",
       "\\item 3\n",
       "\\item 3.5\n",
       "\\item 4\n",
       "\\item 4.5\n",
       "\\item 5\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 0.5\n",
       "2. 1\n",
       "3. 1.5\n",
       "4. 2\n",
       "5. 2.5\n",
       "6. 3\n",
       "7. 3.5\n",
       "8. 4\n",
       "9. 4.5\n",
       "10. 5\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "(xx <- (1:10)/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "dim(xx) <- c(2,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "'matrix'"
      ],
      "text/latex": [
       "'matrix'"
      ],
      "text/markdown": [
       "'matrix'"
      ],
      "text/plain": [
       "[1] \"matrix\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "class(xx)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>male</li><li>female</li><li>female</li><li>male</li><li>female</li></ol>\n",
       "\n",
       "<details>\n",
       "\t<summary style=display:list-item;cursor:pointer>\n",
       "\t\t<strong>Levels</strong>:\n",
       "\t</summary>\n",
       "\t<style>\n",
       "\t.list-inline {list-style: none; margin:0; padding: 0}\n",
       "\t.list-inline>li {display: inline-block}\n",
       "\t.list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "\t</style>\n",
       "\t<ol class=list-inline><li>'female'</li><li>'male'</li></ol>\n",
       "</details>"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item male\n",
       "\\item female\n",
       "\\item female\n",
       "\\item male\n",
       "\\item female\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\emph{Levels}: \\begin{enumerate*}\n",
       "\\item 'female'\n",
       "\\item 'male'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. male\n",
       "2. female\n",
       "3. female\n",
       "4. male\n",
       "5. female\n",
       "\n",
       "\n",
       "\n",
       "**Levels**: 1. 'female'\n",
       "2. 'male'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] male   female female male   female\n",
       "Levels: female male"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# When you create a data frame by reading a file using a command \n",
    "# such as read.table, all variables containing one or more character \n",
    "# stings will be converted automatically into factors.\n",
    "\n",
    "# The function factor can be used to create a factor:\n",
    "\n",
    "(gender <- factor(c('male', 'female','female','male', 'female' )))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "TRUE"
      ],
      "text/latex": [
       "TRUE"
      ],
      "text/markdown": [
       "TRUE"
      ],
      "text/plain": [
       "[1] TRUE"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "FALSE"
      ],
      "text/latex": [
       "FALSE"
      ],
      "text/markdown": [
       "FALSE"
      ],
      "text/plain": [
       "[1] FALSE"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'setosa'</li><li>'versicolor'</li><li>'virginica'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'setosa'\n",
       "\\item 'versicolor'\n",
       "\\item 'virginica'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'setosa'\n",
       "2. 'versicolor'\n",
       "3. 'virginica'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"setosa\"     \"versicolor\" \"virginica\" "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "3"
      ],
      "text/latex": [
       "3"
      ],
      "text/markdown": [
       "3"
      ],
      "text/plain": [
       "[1] 3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "3"
      ],
      "text/latex": [
       "3"
      ],
      "text/markdown": [
       "3"
      ],
      "text/plain": [
       "[1] 3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Some important functions for dealing with factors are the following.\n",
    "\n",
    "attach(iris)\n",
    "is.factor(Species)\n",
    "is.factor(Sepal.Length)\n",
    "levels(Species)\n",
    "nlevels(Species)\n",
    "length(levels(Species))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Suppose a factor has $n$ levels. Internally, this factor consists\n",
    "#  of two items, a vector of integers between $1$ and $n$,\n",
    "#  corresponding to the levels of the factor, and a vector of\n",
    "#  length $n$, containing strings describing what the levels are.\n",
    "\n",
    "opinion <- c(1,2,2,2,1,0,4,4,2,3,0,1,5)\n",
    "fopinion <- factor(opinion,levels=0:5)      ####Level,\n",
    "levels(fopinion) <- c('awful','bad','regular','good', 'great','excellent') ####Assigned name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>2</li><li>2</li><li>1</li><li>0</li><li>4</li><li>4</li><li>2</li><li>3</li><li>0</li><li>1</li><li>5</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 0\n",
       "\\item 4\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 0\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 2\n",
       "4. 2\n",
       "5. 1\n",
       "6. 0\n",
       "7. 4\n",
       "8. 4\n",
       "9. 2\n",
       "10. 3\n",
       "11. 0\n",
       "12. 1\n",
       "13. 5\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 1 2 2 2 1 0 4 4 2 3 0 1 5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>2</li><li>2</li><li>1</li><li>0</li><li>4</li><li>4</li><li>2</li><li>3</li><li>0</li><li>1</li><li>5</li></ol>\n",
       "\n",
       "<details>\n",
       "\t<summary style=display:list-item;cursor:pointer>\n",
       "\t\t<strong>Levels</strong>:\n",
       "\t</summary>\n",
       "\t<style>\n",
       "\t.list-inline {list-style: none; margin:0; padding: 0}\n",
       "\t.list-inline>li {display: inline-block}\n",
       "\t.list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "\t</style>\n",
       "\t<ol class=list-inline><li>'0'</li><li>'1'</li><li>'2'</li><li>'3'</li><li>'4'</li><li>'5'</li></ol>\n",
       "</details>"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 0\n",
       "\\item 4\n",
       "\\item 4\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 0\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\emph{Levels}: \\begin{enumerate*}\n",
       "\\item '0'\n",
       "\\item '1'\n",
       "\\item '2'\n",
       "\\item '3'\n",
       "\\item '4'\n",
       "\\item '5'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 2\n",
       "4. 2\n",
       "5. 1\n",
       "6. 0\n",
       "7. 4\n",
       "8. 4\n",
       "9. 2\n",
       "10. 3\n",
       "11. 0\n",
       "12. 1\n",
       "13. 5\n",
       "\n",
       "\n",
       "\n",
       "**Levels**: 1. '0'\n",
       "2. '1'\n",
       "3. '2'\n",
       "4. '3'\n",
       "5. '4'\n",
       "6. '5'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 1 2 2 2 1 0 4 4 2 3 0 1 5\n",
       "Levels: 0 1 2 3 4 5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'0'</li><li>'1'</li><li>'2'</li><li>'3'</li><li>'4'</li><li>'5'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item '0'\n",
       "\\item '1'\n",
       "\\item '2'\n",
       "\\item '3'\n",
       "\\item '4'\n",
       "\\item '5'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. '0'\n",
       "2. '1'\n",
       "3. '2'\n",
       "4. '3'\n",
       "5. '4'\n",
       "6. '5'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"0\" \"1\" \"2\" \"3\" \"4\" \"5\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>2</li><li>3</li><li>3</li><li>3</li><li>2</li><li>1</li><li>5</li><li>5</li><li>3</li><li>4</li><li>1</li><li>2</li><li>6</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 5\n",
       "\\item 5\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 6\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 2\n",
       "2. 3\n",
       "3. 3\n",
       "4. 3\n",
       "5. 2\n",
       "6. 1\n",
       "7. 5\n",
       "8. 5\n",
       "9. 3\n",
       "10. 4\n",
       "11. 1\n",
       "12. 2\n",
       "13. 6\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 2 3 3 3 2 1 5 5 3 4 1 2 6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The first command creates a numerical vector opinion that\n",
    "# corresponds to the graded opinions of 8 users of a webpage.\n",
    "# The second command creates a factor fopinion with this data \n",
    "# and 5 levels, from 0 to 4. The final line assigns the names for\n",
    "# the levels. \n",
    "\n",
    "# Now we look at the objects we have created:\n",
    "\n",
    "opinion\n",
    "fopinion\n",
    "levels(fopinion)\n",
    "as.numeric(fopinion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'0'</li><li>'1'</li><li>'2'</li><li>'3'</li><li>'4'</li><li>'5'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item '0'\n",
       "\\item '1'\n",
       "\\item '2'\n",
       "\\item '3'\n",
       "\\item '4'\n",
       "\\item '5'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. '0'\n",
       "2. '1'\n",
       "3. '2'\n",
       "4. '3'\n",
       "5. '4'\n",
       "6. '5'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"0\" \"1\" \"2\" \"3\" \"4\" \"5\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'-1'</li><li>'1'</li><li>'2'</li><li>'3'</li><li>'5'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item '-1'\n",
       "\\item '1'\n",
       "\\item '2'\n",
       "\\item '3'\n",
       "\\item '5'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. '-1'\n",
       "2. '1'\n",
       "3. '2'\n",
       "4. '3'\n",
       "5. '5'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"-1\" \"1\"  \"2\"  \"3\"  \"5\" "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The function as.numeric extracts the numerical coding for \n",
    "# the levels, while levels gives the names of the levels. \n",
    "# Observe that the original coding in a scale from 0 to 4 has \n",
    "# been changed to a scale from 1 to 5: The internal representation \n",
    "# always uses a scale starting at 1.\n",
    "\n",
    "# When using factor the option levels may be omitted and R will \n",
    "# then define the levels using the values present in the argument.\n",
    "# Beware that if a value in a scale is missing, it will not be\n",
    "# included among the levels, as the next example shows\n",
    "opinion = c(3,4,5,0,2,4,5,1,1,1)\n",
    "test1 <- factor(opinion,c(0,1,2,3,4,5))\n",
    "test2 <- factor(c(-1,1,2,3,5))\n",
    "levels(test1)\n",
    "levels(test2)\n",
    "levels(test1) <- c('awful','bad','regular','good', 'great','excellent') ####Assigned name\n",
    "test1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'medium'</li><li>'medium'</li><li>'low'</li><li>'low'</li><li>'medium'</li><li>'low'</li><li>'high'</li><li>'medium'</li><li>'high'</li><li>'medium'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'medium'\n",
       "\\item 'medium'\n",
       "\\item 'low'\n",
       "\\item 'low'\n",
       "\\item 'medium'\n",
       "\\item 'low'\n",
       "\\item 'high'\n",
       "\\item 'medium'\n",
       "\\item 'high'\n",
       "\\item 'medium'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'medium'\n",
       "2. 'medium'\n",
       "3. 'low'\n",
       "4. 'low'\n",
       "5. 'medium'\n",
       "6. 'low'\n",
       "7. 'high'\n",
       "8. 'medium'\n",
       "9. 'high'\n",
       "10. 'medium'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \"medium\" \"medium\" \"low\"    \"low\"    \"medium\" \"low\"    \"high\"   \"medium\"\n",
       " [9] \"high\"   \"medium\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>medium</li><li>medium</li><li>low</li><li>low</li><li>medium</li><li>low</li><li>high</li><li>medium</li><li>high</li><li>medium</li></ol>\n",
       "\n",
       "<details>\n",
       "\t<summary style=display:list-item;cursor:pointer>\n",
       "\t\t<strong>Levels</strong>:\n",
       "\t</summary>\n",
       "\t<style>\n",
       "\t.list-inline {list-style: none; margin:0; padding: 0}\n",
       "\t.list-inline>li {display: inline-block}\n",
       "\t.list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "\t</style>\n",
       "\t<ol class=list-inline><li>'high'</li><li>'low'</li><li>'medium'</li></ol>\n",
       "</details>"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item medium\n",
       "\\item medium\n",
       "\\item low\n",
       "\\item low\n",
       "\\item medium\n",
       "\\item low\n",
       "\\item high\n",
       "\\item medium\n",
       "\\item high\n",
       "\\item medium\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\emph{Levels}: \\begin{enumerate*}\n",
       "\\item 'high'\n",
       "\\item 'low'\n",
       "\\item 'medium'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. medium\n",
       "2. medium\n",
       "3. low\n",
       "4. low\n",
       "5. medium\n",
       "6. low\n",
       "7. high\n",
       "8. medium\n",
       "9. high\n",
       "10. medium\n",
       "\n",
       "\n",
       "\n",
       "**Levels**: 1. 'high'\n",
       "2. 'low'\n",
       "3. 'medium'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] medium medium low    low    medium low    high   medium high   medium\n",
       "Levels: high low medium"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>medium</li><li>medium</li><li>low</li><li>low</li><li>medium</li><li>low</li><li>high</li><li>medium</li><li>high</li><li>medium</li></ol>\n",
       "\n",
       "<details>\n",
       "\t<summary style=display:list-item;cursor:pointer>\n",
       "\t\t<strong>Levels</strong>:\n",
       "\t</summary>\n",
       "\t<style>\n",
       "\t.list-inline {list-style: none; margin:0; padding: 0}\n",
       "\t.list-inline>li {display: inline-block}\n",
       "\t.list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "\t</style>\n",
       "\t<ol class=list-inline><li>'high'</li><li>'low'</li><li>'medium'</li></ol>\n",
       "</details>"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item medium\n",
       "\\item medium\n",
       "\\item low\n",
       "\\item low\n",
       "\\item medium\n",
       "\\item low\n",
       "\\item high\n",
       "\\item medium\n",
       "\\item high\n",
       "\\item medium\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\emph{Levels}: \\begin{enumerate*}\n",
       "\\item 'high'\n",
       "\\item 'low'\n",
       "\\item 'medium'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. medium\n",
       "2. medium\n",
       "3. low\n",
       "4. low\n",
       "5. medium\n",
       "6. low\n",
       "7. high\n",
       "8. medium\n",
       "9. high\n",
       "10. medium\n",
       "\n",
       "\n",
       "\n",
       "**Levels**: 1. 'high'\n",
       "2. 'low'\n",
       "3. 'medium'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] medium medium low    low    medium low    high   medium high   medium\n",
       "Levels: high < low < medium"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#### Ordered Factors\n",
    "# There are two kinds of factors, with order, known as *ordinals*, \n",
    "# and those without order, known as *nominal* factors. \n",
    "# Ordered factors have a natural order such a length scales \n",
    "# (short, medium or long) or satisfaction scales \n",
    "# (excellent, good, normal, bad, awful). \n",
    "# For the second group of factors there is no natural order. \n",
    "# Examples are the type of soil or the make of a car.\n",
    "# There are two commands for creating a factor, factor, and ordered. \n",
    "# We have already seen examples of the use of the factor fuction. \n",
    "# Let's now see some examples of the use of the function ordered \n",
    "# to explore the differences between the two. We will use these\n",
    "# functions to create a random vector with the values high, \n",
    "# medium, and low.\n",
    "\n",
    "(xx <- sample(c('high','medium','low'),10,replace=T))\n",
    "(yy <- factor(xx))\n",
    "(zz <- ordered(xx))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "'character'"
      ],
      "text/latex": [
       "'character'"
      ],
      "text/markdown": [
       "'character'"
      ],
      "text/plain": [
       "[1] \"character\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "'factor'"
      ],
      "text/latex": [
       "'factor'"
      ],
      "text/markdown": [
       "'factor'"
      ],
      "text/plain": [
       "[1] \"factor\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'ordered'</li><li>'factor'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'ordered'\n",
       "\\item 'factor'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'ordered'\n",
       "2. 'factor'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"ordered\" \"factor\" "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "FALSE"
      ],
      "text/latex": [
       "FALSE"
      ],
      "text/markdown": [
       "FALSE"
      ],
      "text/plain": [
       "[1] FALSE"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "TRUE"
      ],
      "text/latex": [
       "TRUE"
      ],
      "text/markdown": [
       "TRUE"
      ],
      "text/plain": [
       "[1] TRUE"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "TRUE"
      ],
      "text/latex": [
       "TRUE"
      ],
      "text/markdown": [
       "TRUE"
      ],
      "text/plain": [
       "[1] TRUE"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We see some differences in the way the data are presented. \n",
    "# In the first case (xx), the elements are of character mode, \n",
    "# since they are between quotation marks. In the other two cases\n",
    "# the elements are factors. The levels for yy are presented \n",
    "# unordered while those for zz are (alphabetically) ordered. \n",
    "# We can verify the class  of each of these objects:\n",
    "\n",
    "class(xx)\n",
    "class(yy)\n",
    "class(zz)\n",
    "is.factor(xx)\n",
    "is.factor(yy)\n",
    "is.factor(zz)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'high'</li><li>'low'</li><li>'medium'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'high'\n",
       "\\item 'low'\n",
       "\\item 'medium'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'high'\n",
       "2. 'low'\n",
       "3. 'medium'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"high\"   \"low\"    \"medium\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>medium</li><li>medium</li><li>low</li><li>low</li><li>medium</li><li>low</li><li>high</li><li>medium</li><li>high</li><li>medium</li></ol>\n",
       "\n",
       "<details>\n",
       "\t<summary style=display:list-item;cursor:pointer>\n",
       "\t\t<strong>Levels</strong>:\n",
       "\t</summary>\n",
       "\t<style>\n",
       "\t.list-inline {list-style: none; margin:0; padding: 0}\n",
       "\t.list-inline>li {display: inline-block}\n",
       "\t.list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "\t</style>\n",
       "\t<ol class=list-inline><li>'high'</li><li>'low'</li><li>'medium'</li></ol>\n",
       "</details>"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item medium\n",
       "\\item medium\n",
       "\\item low\n",
       "\\item low\n",
       "\\item medium\n",
       "\\item low\n",
       "\\item high\n",
       "\\item medium\n",
       "\\item high\n",
       "\\item medium\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\emph{Levels}: \\begin{enumerate*}\n",
       "\\item 'high'\n",
       "\\item 'low'\n",
       "\\item 'medium'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. medium\n",
       "2. medium\n",
       "3. low\n",
       "4. low\n",
       "5. medium\n",
       "6. low\n",
       "7. high\n",
       "8. medium\n",
       "9. high\n",
       "10. medium\n",
       "\n",
       "\n",
       "\n",
       "**Levels**: 1. 'high'\n",
       "2. 'low'\n",
       "3. 'medium'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] medium medium low    low    medium low    high   medium high   medium\n",
       "Levels: high < low < medium"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>high</li><li>high</li><li>medium</li><li>medium</li><li>high</li><li>medium</li><li>low</li><li>high</li><li>low</li><li>high</li></ol>\n",
       "\n",
       "<details>\n",
       "\t<summary style=display:list-item;cursor:pointer>\n",
       "\t\t<strong>Levels</strong>:\n",
       "\t</summary>\n",
       "\t<style>\n",
       "\t.list-inline {list-style: none; margin:0; padding: 0}\n",
       "\t.list-inline>li {display: inline-block}\n",
       "\t.list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "\t</style>\n",
       "\t<ol class=list-inline><li>'low'</li><li>'medium'</li><li>'high'</li></ol>\n",
       "</details>"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item high\n",
       "\\item high\n",
       "\\item medium\n",
       "\\item medium\n",
       "\\item high\n",
       "\\item medium\n",
       "\\item low\n",
       "\\item high\n",
       "\\item low\n",
       "\\item high\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\emph{Levels}: \\begin{enumerate*}\n",
       "\\item 'low'\n",
       "\\item 'medium'\n",
       "\\item 'high'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. high\n",
       "2. high\n",
       "3. medium\n",
       "4. medium\n",
       "5. high\n",
       "6. medium\n",
       "7. low\n",
       "8. high\n",
       "9. low\n",
       "10. high\n",
       "\n",
       "\n",
       "\n",
       "**Levels**: 1. 'low'\n",
       "2. 'medium'\n",
       "3. 'high'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] high   high   medium medium high   medium low    high   low    high  \n",
       "Levels: low < medium < high"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# For the ordered factor zz, the alphabetical order is not the\n",
    "# natural order among the levels, which would be\n",
    "# low < medium < high. If we try  to change this using the\n",
    "# function levels, the result is not perhaps what you would expect:\n",
    "\n",
    "levels(zz)\n",
    "zz\n",
    "levels(zz) <- c('low','medium','high')\n",
    "zz  ####Wrong"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'medium'</li><li>'medium'</li><li>'low'</li><li>'low'</li><li>'medium'</li><li>'low'</li><li>'high'</li><li>'medium'</li><li>'high'</li><li>'medium'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'medium'\n",
       "\\item 'medium'\n",
       "\\item 'low'\n",
       "\\item 'low'\n",
       "\\item 'medium'\n",
       "\\item 'low'\n",
       "\\item 'high'\n",
       "\\item 'medium'\n",
       "\\item 'high'\n",
       "\\item 'medium'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'medium'\n",
       "2. 'medium'\n",
       "3. 'low'\n",
       "4. 'low'\n",
       "5. 'medium'\n",
       "6. 'low'\n",
       "7. 'high'\n",
       "8. 'medium'\n",
       "9. 'high'\n",
       "10. 'medium'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \"medium\" \"medium\" \"low\"    \"low\"    \"medium\" \"low\"    \"high\"   \"medium\"\n",
       " [9] \"high\"   \"medium\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>medium</li><li>medium</li><li>low</li><li>low</li><li>medium</li><li>low</li><li>high</li><li>medium</li><li>high</li><li>medium</li></ol>\n",
       "\n",
       "<details>\n",
       "\t<summary style=display:list-item;cursor:pointer>\n",
       "\t\t<strong>Levels</strong>:\n",
       "\t</summary>\n",
       "\t<style>\n",
       "\t.list-inline {list-style: none; margin:0; padding: 0}\n",
       "\t.list-inline>li {display: inline-block}\n",
       "\t.list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "\t</style>\n",
       "\t<ol class=list-inline><li>'low'</li><li>'medium'</li><li>'high'</li></ol>\n",
       "</details>"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item medium\n",
       "\\item medium\n",
       "\\item low\n",
       "\\item low\n",
       "\\item medium\n",
       "\\item low\n",
       "\\item high\n",
       "\\item medium\n",
       "\\item high\n",
       "\\item medium\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\emph{Levels}: \\begin{enumerate*}\n",
       "\\item 'low'\n",
       "\\item 'medium'\n",
       "\\item 'high'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. medium\n",
       "2. medium\n",
       "3. low\n",
       "4. low\n",
       "5. medium\n",
       "6. low\n",
       "7. high\n",
       "8. medium\n",
       "9. high\n",
       "10. medium\n",
       "\n",
       "\n",
       "\n",
       "**Levels**: 1. 'low'\n",
       "2. 'medium'\n",
       "3. 'high'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] medium medium low    low    medium low    high   medium high   medium\n",
       "Levels: low < medium < high"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The outcome is that everything changes, not only the levels \n",
    "# but also the values. What this command does is to 'translate' \n",
    "# everything, values and levels of the object, to new labels \n",
    "# for the levels.\n",
    "\n",
    "# Levels should be assigned when the object is created and for \n",
    "# we may use the function ordered:\n",
    "\n",
    "xx\n",
    "(ww <- ordered(xx,levels=c('low','medium','high')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "xx\n",
       "  high    low medium \n",
       "     2      3      5 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "yy\n",
       "  high    low medium \n",
       "     2      3      5 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "zz\n",
       "   low medium   high \n",
       "     2      3      5 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "ww\n",
       "   low medium   high \n",
       "     3      5      2 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "### Tables \n",
    "# The function table is useful for summing up in a table the\n",
    "# frequency of factor values in a vector:\n",
    "\n",
    "table(xx)\n",
    "table(yy)\n",
    "table(zz)\n",
    "table(ww)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'data.frame':\t32 obs. of  11 variables:\n",
      " $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n",
      " $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n",
      " $ disp: num  160 160 108 258 360 ...\n",
      " $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n",
      " $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n",
      " $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n",
      " $ qsec: num  16.5 17 18.6 19.4 17 ...\n",
      " $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n",
      " $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n",
      " $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n",
      " $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "   gear\n",
       "cyl  3  4  5\n",
       "  4  1  8  2\n",
       "  6  2  4  1\n",
       "  8 12  0  2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's see another example using the dataset mtcars, that has \n",
    "# data on fuel consumption and 10 other variables for 32 cars, \n",
    "# 1973-74 models, taken from the 1974 \\textsl{Motor Trend magazine.\n",
    "\n",
    "attach(mtcars)\n",
    "str(mtcars)\n",
    "table(cyl, gear)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       ", , am = 0\n",
       "\n",
       "   gear\n",
       "cyl  3  4  5\n",
       "  4  1  2  0\n",
       "  6  2  2  0\n",
       "  8 12  0  0\n",
       "\n",
       ", , am = 1\n",
       "\n",
       "   gear\n",
       "cyl  3  4  5\n",
       "  4  0  6  2\n",
       "  6  0  2  1\n",
       "  8  0  0  2\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# More than two factors can be used to build up the table:\n",
    "\n",
    "table(cyl, gear,am)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 6 × 1 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td></tr>\n",
       "\t<tr><td>2</td></tr>\n",
       "\t<tr><td>3</td></tr>\n",
       "\t<tr><td>4</td></tr>\n",
       "\t<tr><td>5</td></tr>\n",
       "\t<tr><td>6</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 6 × 1 of type int\n",
       "\\begin{tabular}{l}\n",
       "\t 1\\\\\n",
       "\t 2\\\\\n",
       "\t 3\\\\\n",
       "\t 4\\\\\n",
       "\t 5\\\\\n",
       "\t 6\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 6 × 1 of type int\n",
       "\n",
       "| 1 |\n",
       "| 2 |\n",
       "| 3 |\n",
       "| 4 |\n",
       "| 5 |\n",
       "| 6 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1]\n",
       "[1,] 1   \n",
       "[2,] 2   \n",
       "[3,] 3   \n",
       "[4,] 4   \n",
       "[5,] 5   \n",
       "[6,] 6   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 2 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>4</td></tr>\n",
       "\t<tr><td>2</td><td>5</td></tr>\n",
       "\t<tr><td>3</td><td>6</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 2 of type int\n",
       "\\begin{tabular}{ll}\n",
       "\t 1 & 4\\\\\n",
       "\t 2 & 5\\\\\n",
       "\t 3 & 6\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 2 of type int\n",
       "\n",
       "| 1 | 4 |\n",
       "| 2 | 5 |\n",
       "| 3 | 6 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2]\n",
       "[1,] 1    4   \n",
       "[2,] 2    5   \n",
       "[3,] 3    6   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Matrices\n",
    "# A matrix is a rectangular arrangement of cells, each of which\n",
    "# contains a value.\n",
    "# To create an matrix in R you can use the matrix function, \n",
    "# whose syntax is\n",
    "\n",
    "###\n",
    "# matrix(data, nrow, ncol, byrow=F, dimnames = NULL)\n",
    "###\n",
    "\n",
    "# where nrow and ncol represent, respectively, the\n",
    "# number of rows and columns in the matrix.\n",
    "\n",
    "# Only the first argument is indispensable. If neither the second\n",
    "# nor the third argument appear, the data is placed in a\n",
    "# one-dimensional matrix, i.e.,  a vector. If only one of the\n",
    "# dimensions is included, the other is determined by division.\n",
    "\n",
    "matrix(1:6)\n",
    "matrix(1:6, nrow=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 2 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>2</td></tr>\n",
       "\t<tr><td>3</td><td>4</td></tr>\n",
       "\t<tr><td>5</td><td>6</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 2 of type int\n",
       "\\begin{tabular}{ll}\n",
       "\t 1 & 2\\\\\n",
       "\t 3 & 4\\\\\n",
       "\t 5 & 6\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 2 of type int\n",
       "\n",
       "| 1 | 2 |\n",
       "| 3 | 4 |\n",
       "| 5 | 6 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2]\n",
       "[1,] 1    2   \n",
       "[2,] 3    4   \n",
       "[3,] 5    6   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Observe that in the second example the elements are stored in\n",
    "# the matrix column-wise. If we want the elements to be stored\n",
    "# row-wise, the option byrows has to be set to T:\n",
    "\n",
    "matrix(1:6, nrow=3, byrow=T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 2 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>2</td></tr>\n",
       "\t<tr><td>3</td><td>4</td></tr>\n",
       "\t<tr><td>5</td><td>6</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 2 of type int\n",
       "\\begin{tabular}{ll}\n",
       "\t 1 & 2\\\\\n",
       "\t 3 & 4\\\\\n",
       "\t 5 & 6\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 2 of type int\n",
       "\n",
       "| 1 | 2 |\n",
       "| 3 | 4 |\n",
       "| 5 | 6 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2]\n",
       "[1,] 1    2   \n",
       "[2,] 3    4   \n",
       "[3,] 5    6   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 2 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>0</td><td> 6</td></tr>\n",
       "\t<tr><td>2</td><td> 8</td></tr>\n",
       "\t<tr><td>4</td><td>10</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 2 of type dbl\n",
       "\\begin{tabular}{ll}\n",
       "\t 0 &  6\\\\\n",
       "\t 2 &  8\\\\\n",
       "\t 4 & 10\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 2 of type dbl\n",
       "\n",
       "| 0 |  6 |\n",
       "| 2 |  8 |\n",
       "| 4 | 10 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2]\n",
       "[1,] 0     6  \n",
       "[2,] 2     8  \n",
       "[3,] 4    10  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 2 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>0</td><td> 6</td></tr>\n",
       "\t<tr><td>2</td><td> 8</td></tr>\n",
       "\t<tr><td>4</td><td>10</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 2 of type dbl\n",
       "\\begin{tabular}{ll}\n",
       "\t 0 &  6\\\\\n",
       "\t 2 &  8\\\\\n",
       "\t 4 & 10\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 2 of type dbl\n",
       "\n",
       "| 0 |  6 |\n",
       "| 2 |  8 |\n",
       "| 4 | 10 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2]\n",
       "[1,] 0     6  \n",
       "[2,] 2     8  \n",
       "[3,] 4    10  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 2 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td> 8</td></tr>\n",
       "\t<tr><td>5</td><td>12</td></tr>\n",
       "\t<tr><td>9</td><td>16</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 2 of type dbl\n",
       "\\begin{tabular}{ll}\n",
       "\t 1 &  8\\\\\n",
       "\t 5 & 12\\\\\n",
       "\t 9 & 16\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 2 of type dbl\n",
       "\n",
       "| 1 |  8 |\n",
       "| 5 | 12 |\n",
       "| 9 | 16 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2]\n",
       "[1,] 1     8  \n",
       "[2,] 5    12  \n",
       "[3,] 9    16  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 2 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>-4</td></tr>\n",
       "\t<tr><td>1</td><td>-4</td></tr>\n",
       "\t<tr><td>1</td><td>-4</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 2 of type dbl\n",
       "\\begin{tabular}{ll}\n",
       "\t 1 & -4\\\\\n",
       "\t 1 & -4\\\\\n",
       "\t 1 & -4\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 2 of type dbl\n",
       "\n",
       "| 1 | -4 |\n",
       "| 1 | -4 |\n",
       "| 1 | -4 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2]\n",
       "[1,] 1    -4  \n",
       "[2,] 1    -4  \n",
       "[3,] 1    -4  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The elements of a matrix must all be of the same type.\n",
    "# To store columns of different types in a two-dimensional array \n",
    "# it is necessary to use a data frame, an object that we will \n",
    "# study a little later.  \n",
    "# To add and subtract matrices, operations that are carried out\n",
    "# component by component, the only necessary condition is that\n",
    "# both matrices have the same dimensions.  The usual addition \n",
    "# and subtraction symbols are used for these operations.\n",
    "\n",
    "(A <-  matrix(1:6, nrow=3, byrow=T))\n",
    "(B <-  matrix(seq(0, 10, 2), 3, 2))\n",
    "(B <-  matrix(seq(0, 10, 2), nrow=3))\n",
    "A+B\n",
    "A-B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 2 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>-4</td><td>-3</td></tr>\n",
       "\t<tr><td>-2</td><td>-1</td></tr>\n",
       "\t<tr><td> 0</td><td> 1</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 2 of type dbl\n",
       "\\begin{tabular}{ll}\n",
       "\t -4 & -3\\\\\n",
       "\t -2 & -1\\\\\n",
       "\t  0 &  1\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 2 of type dbl\n",
       "\n",
       "| -4 | -3 |\n",
       "| -2 | -1 |\n",
       "|  0 |  1 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2]\n",
       "[1,] -4   -3  \n",
       "[2,] -2   -1  \n",
       "[3,]  0    1  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 2 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>0</td><td>3</td></tr>\n",
       "\t<tr><td>1</td><td>4</td></tr>\n",
       "\t<tr><td>2</td><td>5</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 2 of type dbl\n",
       "\\begin{tabular}{ll}\n",
       "\t 0 & 3\\\\\n",
       "\t 1 & 4\\\\\n",
       "\t 2 & 5\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 2 of type dbl\n",
       "\n",
       "| 0 | 3 |\n",
       "| 1 | 4 |\n",
       "| 2 | 5 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2]\n",
       "[1,] 0    3   \n",
       "[2,] 1    4   \n",
       "[3,] 2    5   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# You can also add, substract, multiply or divide by a scalar:\n",
    "\n",
    "A-5\n",
    "B/2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 2 × 4 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>3</td><td> 9</td><td>15</td><td>21</td></tr>\n",
       "\t<tr><td>6</td><td>12</td><td>18</td><td>24</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 2 × 4 of type dbl\n",
       "\\begin{tabular}{llll}\n",
       "\t 3 &  9 & 15 & 21\\\\\n",
       "\t 6 & 12 & 18 & 24\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 2 × 4 of type dbl\n",
       "\n",
       "| 3 |  9 | 15 | 21 |\n",
       "| 6 | 12 | 18 | 24 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3] [,4]\n",
       "[1,] 3     9   15   21  \n",
       "[2,] 6    12   18   24  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 4 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>15</td><td> 33</td><td> 51</td><td> 69</td></tr>\n",
       "\t<tr><td>33</td><td> 75</td><td>117</td><td>159</td></tr>\n",
       "\t<tr><td>51</td><td>117</td><td>183</td><td>249</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 4 of type dbl\n",
       "\\begin{tabular}{llll}\n",
       "\t 15 &  33 &  51 &  69\\\\\n",
       "\t 33 &  75 & 117 & 159\\\\\n",
       "\t 51 & 117 & 183 & 249\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 4 of type dbl\n",
       "\n",
       "| 15 |  33 |  51 |  69 |\n",
       "| 33 |  75 | 117 | 159 |\n",
       "| 51 | 117 | 183 | 249 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3] [,4]\n",
       "[1,] 15    33   51   69 \n",
       "[2,] 33    75  117  159 \n",
       "[3,] 51   117  183  249 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Matrix multiplication is a more complicated operation. \n",
    "# The syntax for matrix multiplication is %*%.\n",
    "# The rule for multiplication of matrices is that the number of\n",
    "# columns in the first matrix must be equal to the number of rows\n",
    "# in the second. \n",
    "# For example, the matrix A we have defined above is a 3 x 2 matrix.\n",
    "# We can multiply it by any matrix that has 2 rows:\n",
    "\n",
    "(D <- matrix ((1:8)*3,2))\n",
    "A %*% D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 2 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td> 0</td><td>12</td></tr>\n",
       "\t<tr><td> 6</td><td>32</td></tr>\n",
       "\t<tr><td>20</td><td>60</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 2 of type dbl\n",
       "\\begin{tabular}{ll}\n",
       "\t  0 & 12\\\\\n",
       "\t  6 & 32\\\\\n",
       "\t 20 & 60\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 2 of type dbl\n",
       "\n",
       "|  0 | 12 |\n",
       "|  6 | 32 |\n",
       "| 20 | 60 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2]\n",
       "[1,]  0   12  \n",
       "[2,]  6   32  \n",
       "[3,] 20   60  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# It is also possible to multiply two matrices with the same \n",
    "# dimensions component-wise, by using the usual symbol for\n",
    "# multiplication *:\n",
    "\n",
    "A*B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 2 × 3 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>2</td><td>4</td><td>5</td></tr>\n",
       "\t<tr><td>3</td><td>1</td><td>3</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 2 × 3 of type dbl\n",
       "\\begin{tabular}{lll}\n",
       "\t 2 & 4 & 5\\\\\n",
       "\t 3 & 1 & 3\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 2 × 3 of type dbl\n",
       "\n",
       "| 2 | 4 | 5 |\n",
       "| 3 | 1 | 3 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3]\n",
       "[1,] 2    4    5   \n",
       "[2,] 3    1    3   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 2 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>2</td><td>3</td></tr>\n",
       "\t<tr><td>4</td><td>1</td></tr>\n",
       "\t<tr><td>5</td><td>3</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 2 of type dbl\n",
       "\\begin{tabular}{ll}\n",
       "\t 2 & 3\\\\\n",
       "\t 4 & 1\\\\\n",
       "\t 5 & 3\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 2 of type dbl\n",
       "\n",
       "| 2 | 3 |\n",
       "| 4 | 1 |\n",
       "| 5 | 3 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2]\n",
       "[1,] 2    3   \n",
       "[2,] 4    1   \n",
       "[3,] 5    3   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 2 × 2 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>45</td><td>25</td></tr>\n",
       "\t<tr><td>25</td><td>19</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 2 × 2 of type dbl\n",
       "\\begin{tabular}{ll}\n",
       "\t 45 & 25\\\\\n",
       "\t 25 & 19\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 2 × 2 of type dbl\n",
       "\n",
       "| 45 | 25 |\n",
       "| 25 | 19 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2]\n",
       "[1,] 45   25  \n",
       "[2,] 25   19  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 3 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>13</td><td>11</td><td>19</td></tr>\n",
       "\t<tr><td>11</td><td>17</td><td>23</td></tr>\n",
       "\t<tr><td>19</td><td>23</td><td>34</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 3 of type dbl\n",
       "\\begin{tabular}{lll}\n",
       "\t 13 & 11 & 19\\\\\n",
       "\t 11 & 17 & 23\\\\\n",
       "\t 19 & 23 & 34\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 3 of type dbl\n",
       "\n",
       "| 13 | 11 | 19 |\n",
       "| 11 | 17 | 23 |\n",
       "| 19 | 23 | 34 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3]\n",
       "[1,] 13   11   19  \n",
       "[2,] 11   17   23  \n",
       "[3,] 19   23   34  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The following table presents other common operations with matrices\n",
    "# \\begin{center\n",
    "# \\begin{tabular{ll\n",
    "# {\\bf Name & {\\bf Operation\\\\\n",
    "# \\hline\n",
    "# dim() & matrix dimensions\\\\\n",
    "# as.matrix() & coerces the argument as a matrix\\\\\n",
    "# t() & transposition\\\\\n",
    "# diag() & extracts the diagonal elements\\\\\n",
    "# det() & determinant\\\\\n",
    "# solve() & inverse\\\\\n",
    "# eigen() & calculates eigenvalues and eigenvectores\\\\\n",
    "# dimnames() & Retrieve or set the dimnames \n",
    "# \\end{tabular\n",
    "# \n",
    "# \\bigskip\n",
    "# {\\small Table 1.6 Matrix Functions.\n",
    "# \\end{center\n",
    "\n",
    "# Let's see some examples:\n",
    "\n",
    "(XX <- matrix(c(2,3,4,1,5,3),ncol=3))\n",
    "t(XX)\n",
    "XX %*% t(XX)\n",
    "t(XX) %*% XX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 2 × 3 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>2</td><td>3</td></tr>\n",
       "\t<tr><td>1</td><td>2</td><td>3</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 2 × 3 of type int\n",
       "\\begin{tabular}{lll}\n",
       "\t 1 & 2 & 3\\\\\n",
       "\t 1 & 2 & 3\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 2 × 3 of type int\n",
       "\n",
       "| 1 | 2 | 3 |\n",
       "| 1 | 2 | 3 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3]\n",
       "[1,] 1    2    3   \n",
       "[2,] 1    2    3   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 2 × 3 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>1</td><td>1</td></tr>\n",
       "\t<tr><td>2</td><td>2</td><td>2</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 2 × 3 of type int\n",
       "\\begin{tabular}{lll}\n",
       "\t 1 & 1 & 1\\\\\n",
       "\t 2 & 2 & 2\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 2 × 3 of type int\n",
       "\n",
       "| 1 | 1 | 1 |\n",
       "| 2 | 2 | 2 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3]\n",
       "[1,] 1    1    1   \n",
       "[2,] 2    2    2   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The functions col and row have as argument a matrix and the\n",
    "# result of the first one is a matrix with entries the column\n",
    "# occupied by the corresponding element of the argument matrix\n",
    "# while the second instruction indicates the row.\n",
    "\n",
    "col(XX)\n",
    "row(XX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>2</li><li>1</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 2\n",
       "2. 1\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 2 1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>2</li><li>1</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 2\n",
       "2. 1\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 2 1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>13</li><li>17</li><li>34</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 13\n",
       "\\item 17\n",
       "\\item 34\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 13\n",
       "2. 17\n",
       "3. 34\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 13 17 34"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 4 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>0</td><td>0</td><td>0</td></tr>\n",
       "\t<tr><td>0</td><td>2</td><td>0</td><td>0</td></tr>\n",
       "\t<tr><td>0</td><td>0</td><td>3</td><td>0</td></tr>\n",
       "\t<tr><td>0</td><td>0</td><td>0</td><td>4</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 4 of type int\n",
       "\\begin{tabular}{llll}\n",
       "\t 1 & 0 & 0 & 0\\\\\n",
       "\t 0 & 2 & 0 & 0\\\\\n",
       "\t 0 & 0 & 3 & 0\\\\\n",
       "\t 0 & 0 & 0 & 4\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 4 of type int\n",
       "\n",
       "| 1 | 0 | 0 | 0 |\n",
       "| 0 | 2 | 0 | 0 |\n",
       "| 0 | 0 | 3 | 0 |\n",
       "| 0 | 0 | 0 | 4 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3] [,4]\n",
       "[1,] 1    0    0    0   \n",
       "[2,] 0    2    0    0   \n",
       "[3,] 0    0    3    0   \n",
       "[4,] 0    0    0    4   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 3 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>0</td><td>0</td></tr>\n",
       "\t<tr><td>0</td><td>1</td><td>0</td></tr>\n",
       "\t<tr><td>0</td><td>0</td><td>1</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 3 of type dbl\n",
       "\\begin{tabular}{lll}\n",
       "\t 1 & 0 & 0\\\\\n",
       "\t 0 & 1 & 0\\\\\n",
       "\t 0 & 0 & 1\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 3 of type dbl\n",
       "\n",
       "| 1 | 0 | 0 |\n",
       "| 0 | 1 | 0 |\n",
       "| 0 | 0 | 1 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3]\n",
       "[1,] 1    0    0   \n",
       "[2,] 0    1    0   \n",
       "[3,] 0    0    1   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The diag function extracts the diagonal elements of a matrix\n",
    "# and can also be used to build up diagonal matrices:\n",
    "\n",
    "diag(XX)\n",
    "diag(t(XX))\n",
    "diag(t(XX) %*% XX)\n",
    "diag(1:4)\n",
    "diag(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 3 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>0</td><td>0</td></tr>\n",
       "\t<tr><td>0</td><td>2</td><td>0</td></tr>\n",
       "\t<tr><td>0</td><td>0</td><td>3</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 3 of type dbl\n",
       "\\begin{tabular}{lll}\n",
       "\t 1 & 0 & 0\\\\\n",
       "\t 0 & 2 & 0\\\\\n",
       "\t 0 & 0 & 3\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 3 of type dbl\n",
       "\n",
       "| 1 | 0 | 0 |\n",
       "| 0 | 2 | 0 |\n",
       "| 0 | 0 | 3 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3]\n",
       "[1,] 1    0    0   \n",
       "[2,] 0    2    0   \n",
       "[3,] 0    0    3   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "diag(c(1,2,3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 4 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>12</td><td>21</td><td>12</td><td>19</td></tr>\n",
       "\t<tr><td> 3</td><td> 5</td><td>18</td><td> 5</td></tr>\n",
       "\t<tr><td> 8</td><td> 7</td><td> 4</td><td>21</td></tr>\n",
       "\t<tr><td>16</td><td> 9</td><td> 3</td><td> 8</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 4 of type dbl\n",
       "\\begin{tabular}{llll}\n",
       "\t 12 & 21 & 12 & 19\\\\\n",
       "\t  3 &  5 & 18 &  5\\\\\n",
       "\t  8 &  7 &  4 & 21\\\\\n",
       "\t 16 &  9 &  3 &  8\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 4 of type dbl\n",
       "\n",
       "| 12 | 21 | 12 | 19 |\n",
       "|  3 |  5 | 18 |  5 |\n",
       "|  8 |  7 |  4 | 21 |\n",
       "| 16 |  9 |  3 |  8 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3] [,4]\n",
       "[1,] 12   21   12   19  \n",
       "[2,]  3    5   18    5  \n",
       "[3,]  8    7    4   21  \n",
       "[4,] 16    9    3    8  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "-50827.9999999999"
      ],
      "text/latex": [
       "-50827.9999999999"
      ],
      "text/markdown": [
       "-50827.9999999999"
      ],
      "text/plain": [
       "[1] -50828"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 4 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>-0.04257496</td><td> 0.012984969</td><td> 0.0004721807</td><td> 9.176045e-02</td></tr>\n",
       "\t<tr><td> 0.09056032</td><td>-0.041945384</td><td>-0.0606161958</td><td>-2.974738e-02</td></tr>\n",
       "\t<tr><td>-0.01497206</td><td> 0.066026600</td><td>-0.0021444873</td><td>-7.869678e-05</td></tr>\n",
       "\t<tr><td>-0.01111592</td><td>-0.003541355</td><td> 0.0680530416</td><td>-2.502558e-02</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 4 of type dbl\n",
       "\\begin{tabular}{llll}\n",
       "\t -0.04257496 &  0.012984969 &  0.0004721807 &  9.176045e-02\\\\\n",
       "\t  0.09056032 & -0.041945384 & -0.0606161958 & -2.974738e-02\\\\\n",
       "\t -0.01497206 &  0.066026600 & -0.0021444873 & -7.869678e-05\\\\\n",
       "\t -0.01111592 & -0.003541355 &  0.0680530416 & -2.502558e-02\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 4 of type dbl\n",
       "\n",
       "| -0.04257496 |  0.012984969 |  0.0004721807 |  9.176045e-02 |\n",
       "|  0.09056032 | -0.041945384 | -0.0606161958 | -2.974738e-02 |\n",
       "| -0.01497206 |  0.066026600 | -0.0021444873 | -7.869678e-05 |\n",
       "| -0.01111592 | -0.003541355 |  0.0680530416 | -2.502558e-02 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1]        [,2]         [,3]          [,4]         \n",
       "[1,] -0.04257496  0.012984969  0.0004721807  9.176045e-02\n",
       "[2,]  0.09056032 -0.041945384 -0.0606161958 -2.974738e-02\n",
       "[3,] -0.01497206  0.066026600 -0.0021444873 -7.869678e-05\n",
       "[4,] -0.01111592 -0.003541355  0.0680530416 -2.502558e-02"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We now explore the use of the functions det and solve:\n",
    "\n",
    "(YY <- matrix(c(12,3,8,16,21,5,7,9,12,18,4,3,19,5,21,8), ncol=4))\n",
    "det(YY)\n",
    "solve(YY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 4 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td> 1.000000e+00</td><td>9.237403e-17</td><td>-8.326673e-17</td><td>-3.816392e-17</td></tr>\n",
       "\t<tr><td>-2.775558e-17</td><td>1.000000e+00</td><td>-2.775558e-17</td><td> 1.040834e-17</td></tr>\n",
       "\t<tr><td>-1.387779e-17</td><td>1.301043e-18</td><td> 1.000000e+00</td><td>-1.006140e-16</td></tr>\n",
       "\t<tr><td> 0.000000e+00</td><td>1.040834e-17</td><td> 0.000000e+00</td><td> 1.000000e+00</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 4 of type dbl\n",
       "\\begin{tabular}{llll}\n",
       "\t  1.000000e+00 & 9.237403e-17 & -8.326673e-17 & -3.816392e-17\\\\\n",
       "\t -2.775558e-17 & 1.000000e+00 & -2.775558e-17 &  1.040834e-17\\\\\n",
       "\t -1.387779e-17 & 1.301043e-18 &  1.000000e+00 & -1.006140e-16\\\\\n",
       "\t  0.000000e+00 & 1.040834e-17 &  0.000000e+00 &  1.000000e+00\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 4 of type dbl\n",
       "\n",
       "|  1.000000e+00 | 9.237403e-17 | -8.326673e-17 | -3.816392e-17 |\n",
       "| -2.775558e-17 | 1.000000e+00 | -2.775558e-17 |  1.040834e-17 |\n",
       "| -1.387779e-17 | 1.301043e-18 |  1.000000e+00 | -1.006140e-16 |\n",
       "|  0.000000e+00 | 1.040834e-17 |  0.000000e+00 |  1.000000e+00 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1]          [,2]         [,3]          [,4]         \n",
       "[1,]  1.000000e+00 9.237403e-17 -8.326673e-17 -3.816392e-17\n",
       "[2,] -2.775558e-17 1.000000e+00 -2.775558e-17  1.040834e-17\n",
       "[3,] -1.387779e-17 1.301043e-18  1.000000e+00 -1.006140e-16\n",
       "[4,]  0.000000e+00 1.040834e-17  0.000000e+00  1.000000e+00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# To verify that this is the inverse, we multiply the matrices\n",
    "\n",
    "YY%*%solve(YY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 4 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>0</td><td>0</td><td>0</td></tr>\n",
       "\t<tr><td>0</td><td>1</td><td>0</td><td>0</td></tr>\n",
       "\t<tr><td>0</td><td>0</td><td>1</td><td>0</td></tr>\n",
       "\t<tr><td>0</td><td>0</td><td>0</td><td>1</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 4 of type dbl\n",
       "\\begin{tabular}{llll}\n",
       "\t 1 & 0 & 0 & 0\\\\\n",
       "\t 0 & 1 & 0 & 0\\\\\n",
       "\t 0 & 0 & 1 & 0\\\\\n",
       "\t 0 & 0 & 0 & 1\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 4 of type dbl\n",
       "\n",
       "| 1 | 0 | 0 | 0 |\n",
       "| 0 | 1 | 0 | 0 |\n",
       "| 0 | 0 | 1 | 0 |\n",
       "| 0 | 0 | 0 | 1 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3] [,4]\n",
       "[1,] 1    0    0    0   \n",
       "[2,] 0    1    0    0   \n",
       "[3,] 0    0    1    0   \n",
       "[4,] 0    0    0    1   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 4 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>0</td><td>0</td><td>0</td></tr>\n",
       "\t<tr><td>0</td><td>1</td><td>0</td><td>0</td></tr>\n",
       "\t<tr><td>0</td><td>0</td><td>1</td><td>0</td></tr>\n",
       "\t<tr><td>0</td><td>0</td><td>0</td><td>1</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 4 of type dbl\n",
       "\\begin{tabular}{llll}\n",
       "\t 1 & 0 & 0 & 0\\\\\n",
       "\t 0 & 1 & 0 & 0\\\\\n",
       "\t 0 & 0 & 1 & 0\\\\\n",
       "\t 0 & 0 & 0 & 1\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 4 of type dbl\n",
       "\n",
       "| 1 | 0 | 0 | 0 |\n",
       "| 0 | 1 | 0 | 0 |\n",
       "| 0 | 0 | 1 | 0 |\n",
       "| 0 | 0 | 0 | 1 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3] [,4]\n",
       "[1,] 1    0    0    0   \n",
       "[2,] 0    1    0    0   \n",
       "[3,] 0    0    1    0   \n",
       "[4,] 0    0    0    1   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#We round off the values so that the result is clearer:\n",
    "\n",
    "round(YY%*%solve(YY),15)\n",
    "round(solve(YY)%*%YY,15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>0.0626426379161092</li><li>-0.0417486424805225</li><li>0.0488313527976706</li><li>0.0283701896592429</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 0.0626426379161092\n",
       "\\item -0.0417486424805225\n",
       "\\item 0.0488313527976706\n",
       "\\item 0.0283701896592429\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 0.0626426379161092\n",
       "2. -0.0417486424805225\n",
       "3. 0.0488313527976706\n",
       "4. 0.0283701896592429\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  0.06264264 -0.04174864  0.04883135  0.02837019"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 1 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td></tr>\n",
       "\t<tr><td>1</td></tr>\n",
       "\t<tr><td>1</td></tr>\n",
       "\t<tr><td>1</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 1 of type dbl\n",
       "\\begin{tabular}{l}\n",
       "\t 1\\\\\n",
       "\t 1\\\\\n",
       "\t 1\\\\\n",
       "\t 1\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 1 of type dbl\n",
       "\n",
       "| 1 |\n",
       "| 1 |\n",
       "| 1 |\n",
       "| 1 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1]\n",
       "[1,] 1   \n",
       "[2,] 1   \n",
       "[3,] 1   \n",
       "[4,] 1   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# The same instruction solve used with an array A and a column \n",
    "# vector b allows you to solve the linear equation b=Ax to get x:\n",
    "\n",
    "b <- c(1,1,1,1)\n",
    "(x <- solve(YY,b))\n",
    "YY %*% x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NULL"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>3</li><li>2</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 3\n",
       "2. 2\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 3 2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<ol>\n",
       "\t<li><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'Patient1'</li><li>'Patient2'</li><li>'Patient3'</li></ol>\n",
       "</li>\n",
       "\t<li><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'Var1'</li><li>'Var2'</li></ol>\n",
       "</li>\n",
       "</ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate}\n",
       "\\item \\begin{enumerate*}\n",
       "\\item 'Patient1'\n",
       "\\item 'Patient2'\n",
       "\\item 'Patient3'\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item \\begin{enumerate*}\n",
       "\\item 'Var1'\n",
       "\\item 'Var2'\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\end{enumerate}\n"
      ],
      "text/markdown": [
       "1. 1. 'Patient1'\n",
       "2. 'Patient2'\n",
       "3. 'Patient3'\n",
       "\n",
       "\n",
       "\n",
       "2. 1. 'Var1'\n",
       "2. 'Var2'\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[[1]]\n",
       "[1] \"Patient1\" \"Patient2\" \"Patient3\"\n",
       "\n",
       "[[2]]\n",
       "[1] \"Var1\" \"Var2\"\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 2 of type dbl</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>Var1</th><th scope=col>Var2</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>Patient1</th><td>0</td><td> 6</td></tr>\n",
       "\t<tr><th scope=row>Patient2</th><td>2</td><td> 8</td></tr>\n",
       "\t<tr><th scope=row>Patient3</th><td>4</td><td>10</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 2 of type dbl\n",
       "\\begin{tabular}{r|ll}\n",
       "  & Var1 & Var2\\\\\n",
       "\\hline\n",
       "\tPatient1 & 0 &  6\\\\\n",
       "\tPatient2 & 2 &  8\\\\\n",
       "\tPatient3 & 4 & 10\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 2 of type dbl\n",
       "\n",
       "| <!--/--> | Var1 | Var2 |\n",
       "|---|---|---|\n",
       "| Patient1 | 0 |  6 |\n",
       "| Patient2 | 2 |  8 |\n",
       "| Patient3 | 4 | 10 |\n",
       "\n"
      ],
      "text/plain": [
       "         Var1 Var2\n",
       "Patient1 0     6  \n",
       "Patient2 2     8  \n",
       "Patient3 4    10  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Let's use the B matrix for some examples on the dimnames function\n",
    "\n",
    "dimnames(B)\n",
    "dim(B)\n",
    "subjects <- c('Patient1','Patient2','Patient3')\n",
    "variables <- c('Var1', 'Var2')\n",
    "dimnames(B) <- list(subjects,variables)\n",
    "dimnames(B)\n",
    "B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "2"
      ],
      "text/latex": [
       "2"
      ],
      "text/markdown": [
       "2"
      ],
      "text/plain": [
       "[1] 2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>2</li><li>4</li><li>6</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 6\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 2\n",
       "2. 4\n",
       "3. 6\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 2 4 6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 2 × 2 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>3</td><td>5</td></tr>\n",
       "\t<tr><td>8</td><td>7</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 2 × 2 of type dbl\n",
       "\\begin{tabular}{ll}\n",
       "\t 3 & 5\\\\\n",
       "\t 8 & 7\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 2 × 2 of type dbl\n",
       "\n",
       "| 3 | 5 |\n",
       "| 8 | 7 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2]\n",
       "[1,] 3    5   \n",
       "[2,] 8    7   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# To extract data from a matrix one can use the coordinates of \n",
    "# the entry or entries one requires:\n",
    "\n",
    "A[1,2]\n",
    "A[,2]\n",
    "YY[2:3,1:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "6"
      ],
      "text/latex": [
       "6"
      ],
      "text/markdown": [
       "6"
      ],
      "text/plain": [
       "[1] 6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".dl-inline {width: auto; margin:0; padding: 0}\n",
       ".dl-inline>dt, .dl-inline>dd {float: none; width: auto; display: inline-block}\n",
       ".dl-inline>dt::after {content: \":\\0020\"; padding-right: .5ex}\n",
       ".dl-inline>dt:not(:first-of-type) {padding-left: .5ex}\n",
       "</style><dl class=dl-inline><dt>Var1</dt><dd>0</dd><dt>Var2</dt><dd>6</dd></dl>\n"
      ],
      "text/latex": [
       "\\begin{description*}\n",
       "\\item[Var1] 0\n",
       "\\item[Var2] 6\n",
       "\\end{description*}\n"
      ],
      "text/markdown": [
       "Var1\n",
       ":   0Var2\n",
       ":   6\n",
       "\n"
      ],
      "text/plain": [
       "Var1 Var2 \n",
       "   0    6 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".dl-inline {width: auto; margin:0; padding: 0}\n",
       ".dl-inline>dt, .dl-inline>dd {float: none; width: auto; display: inline-block}\n",
       ".dl-inline>dt::after {content: \":\\0020\"; padding-right: .5ex}\n",
       ".dl-inline>dt:not(:first-of-type) {padding-left: .5ex}\n",
       "</style><dl class=dl-inline><dt>Patient1</dt><dd>6</dd><dt>Patient2</dt><dd>8</dd><dt>Patient3</dt><dd>10</dd></dl>\n"
      ],
      "text/latex": [
       "\\begin{description*}\n",
       "\\item[Patient1] 6\n",
       "\\item[Patient2] 8\n",
       "\\item[Patient3] 10\n",
       "\\end{description*}\n"
      ],
      "text/markdown": [
       "Patient1\n",
       ":   6Patient2\n",
       ":   8Patient3\n",
       ":   10\n",
       "\n"
      ],
      "text/plain": [
       "Patient1 Patient2 Patient3 \n",
       "       6        8       10 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# and it is also possible to use dimension names, if available:\n",
    "\n",
    "B['Patient1','Var2']\n",
    "B['Patient1',]\n",
    "B[,'Var2']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 2 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>2</td></tr>\n",
       "\t<tr><td>3</td><td>4</td></tr>\n",
       "\t<tr><td>5</td><td>6</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 2 of type int\n",
       "\\begin{tabular}{ll}\n",
       "\t 1 & 2\\\\\n",
       "\t 3 & 4\\\\\n",
       "\t 5 & 6\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 2 of type int\n",
       "\n",
       "| 1 | 2 |\n",
       "| 3 | 4 |\n",
       "| 5 | 6 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2]\n",
       "[1,] 1    2   \n",
       "[2,] 3    4   \n",
       "[3,] 5    6   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 3 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>2</td><td>3</td></tr>\n",
       "\t<tr><td>3</td><td>4</td><td>5</td></tr>\n",
       "\t<tr><td>5</td><td>6</td><td>7</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 3 of type dbl\n",
       "\\begin{tabular}{lll}\n",
       "\t 1 & 2 & 3\\\\\n",
       "\t 3 & 4 & 5\\\\\n",
       "\t 5 & 6 & 7\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 3 of type dbl\n",
       "\n",
       "| 1 | 2 | 3 |\n",
       "| 3 | 4 | 5 |\n",
       "| 5 | 6 | 7 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3]\n",
       "[1,] 1    2    3   \n",
       "[2,] 3    4    5   \n",
       "[3,] 5    6    7   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 2 of type dbl</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>Var1</th><th scope=col>Var2</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>Patient1</th><td>0</td><td> 6</td></tr>\n",
       "\t<tr><th scope=row>Patient2</th><td>2</td><td> 8</td></tr>\n",
       "\t<tr><th scope=row>Patient3</th><td>4</td><td>10</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 2 of type dbl\n",
       "\\begin{tabular}{r|ll}\n",
       "  & Var1 & Var2\\\\\n",
       "\\hline\n",
       "\tPatient1 & 0 &  6\\\\\n",
       "\tPatient2 & 2 &  8\\\\\n",
       "\tPatient3 & 4 & 10\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 2 of type dbl\n",
       "\n",
       "| <!--/--> | Var1 | Var2 |\n",
       "|---|---|---|\n",
       "| Patient1 | 0 |  6 |\n",
       "| Patient2 | 2 |  8 |\n",
       "| Patient3 | 4 | 10 |\n",
       "\n"
      ],
      "text/plain": [
       "         Var1 Var2\n",
       "Patient1 0     6  \n",
       "Patient2 2     8  \n",
       "Patient3 4    10  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 3 of type dbl</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>Var1</th><th scope=col>Var2</th><th scope=col></th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>Patient1</th><td>0</td><td> 6</td><td>3</td></tr>\n",
       "\t<tr><th scope=row>Patient2</th><td>2</td><td> 8</td><td>5</td></tr>\n",
       "\t<tr><th scope=row>Patient3</th><td>4</td><td>10</td><td>7</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 3 of type dbl\n",
       "\\begin{tabular}{r|lll}\n",
       "  & Var1 & Var2 & \\\\\n",
       "\\hline\n",
       "\tPatient1 & 0 &  6 & 3\\\\\n",
       "\tPatient2 & 2 &  8 & 5\\\\\n",
       "\tPatient3 & 4 & 10 & 7\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 3 of type dbl\n",
       "\n",
       "| <!--/--> | Var1 | Var2 | <!----> |\n",
       "|---|---|---|---|\n",
       "| Patient1 | 0 |  6 | 3 |\n",
       "| Patient2 | 2 |  8 | 5 |\n",
       "| Patient3 | 4 | 10 | 7 |\n",
       "\n"
      ],
      "text/plain": [
       "         Var1 Var2  \n",
       "Patient1 0     6   3\n",
       "Patient2 2     8   5\n",
       "Patient3 4    10   7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 3 of type dbl</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>Var1</th><th scope=col>Var2</th><th scope=col>Var3</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>Patient1</th><td>0</td><td> 6</td><td>3</td></tr>\n",
       "\t<tr><th scope=row>Patient2</th><td>2</td><td> 8</td><td>5</td></tr>\n",
       "\t<tr><th scope=row>Patient3</th><td>4</td><td>10</td><td>7</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 3 of type dbl\n",
       "\\begin{tabular}{r|lll}\n",
       "  & Var1 & Var2 & Var3\\\\\n",
       "\\hline\n",
       "\tPatient1 & 0 &  6 & 3\\\\\n",
       "\tPatient2 & 2 &  8 & 5\\\\\n",
       "\tPatient3 & 4 & 10 & 7\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 3 of type dbl\n",
       "\n",
       "| <!--/--> | Var1 | Var2 | Var3 |\n",
       "|---|---|---|---|\n",
       "| Patient1 | 0 |  6 | 3 |\n",
       "| Patient2 | 2 |  8 | 5 |\n",
       "| Patient3 | 4 | 10 | 7 |\n",
       "\n"
      ],
      "text/plain": [
       "         Var1 Var2 Var3\n",
       "Patient1 0     6   3   \n",
       "Patient2 2     8   5   \n",
       "Patient3 4    10   7   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 2 of type dbl</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>Var1</th><th scope=col>Var2</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>Patient1</th><td>0</td><td> 6</td></tr>\n",
       "\t<tr><th scope=row>Patient2</th><td>2</td><td> 8</td></tr>\n",
       "\t<tr><th scope=row>Patient3</th><td>4</td><td>10</td></tr>\n",
       "\t<tr><th scope=row>Patient4</th><td>6</td><td>12</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 2 of type dbl\n",
       "\\begin{tabular}{r|ll}\n",
       "  & Var1 & Var2\\\\\n",
       "\\hline\n",
       "\tPatient1 & 0 &  6\\\\\n",
       "\tPatient2 & 2 &  8\\\\\n",
       "\tPatient3 & 4 & 10\\\\\n",
       "\tPatient4 & 6 & 12\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 2 of type dbl\n",
       "\n",
       "| <!--/--> | Var1 | Var2 |\n",
       "|---|---|---|\n",
       "| Patient1 | 0 |  6 |\n",
       "| Patient2 | 2 |  8 |\n",
       "| Patient3 | 4 | 10 |\n",
       "| Patient4 | 6 | 12 |\n",
       "\n"
      ],
      "text/plain": [
       "         Var1 Var2\n",
       "Patient1 0     6  \n",
       "Patient2 2     8  \n",
       "Patient3 4    10  \n",
       "Patient4 6    12  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Finally, to add new rows or columns to a matrix we can use the\n",
    "# functions rbind and cbind, respectively:\n",
    "\n",
    "A\n",
    "(A <-cbind(A,c(3,5,7)))\n",
    "B\n",
    "cbind(B,c(3,5,7))\n",
    "cbind(B,Var3=c(3,5,7))\n",
    "rbind(B,Patient4 = c(6,12))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 6\n",
       "\\item 7\n",
       "\\item 8\n",
       "\\item 9\n",
       "\\item 10\n",
       "\\item 11\n",
       "\\item 12\n",
       "\\item 13\n",
       "\\item 14\n",
       "\\item 15\n",
       "\\item 16\n",
       "\\item 17\n",
       "\\item 18\n",
       "\\item 19\n",
       "\\item 20\n",
       "\\item 21\n",
       "\\item 22\n",
       "\\item 23\n",
       "\\item 24\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "6. 6\n",
       "7. 7\n",
       "8. 8\n",
       "9. 9\n",
       "10. 10\n",
       "11. 11\n",
       "12. 12\n",
       "13. 13\n",
       "14. 14\n",
       "15. 15\n",
       "16. 16\n",
       "17. 17\n",
       "18. 18\n",
       "19. 19\n",
       "20. 20\n",
       "21. 21\n",
       "22. 22\n",
       "23. 23\n",
       "24. 24\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       ", , 1\n",
       "\n",
       "     [,1] [,2] [,3] [,4]\n",
       "[1,]    1    4    7   10\n",
       "[2,]    2    5    8   11\n",
       "[3,]    3    6    9   12\n",
       "\n",
       ", , 2\n",
       "\n",
       "     [,1] [,2] [,3] [,4]\n",
       "[1,]   13   16   19   22\n",
       "[2,]   14   17   20   23\n",
       "[3,]   15   18   21   24\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Arrays \n",
    "# An array is a extension of a matrix to more dimensions. \n",
    "# Arrays follow the  same rules as matrices. \n",
    "# To define an array use array(data, dim):\n",
    "\n",
    "(x <- array (1:24, c(3,4,2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 6\n",
       "\\item 7\n",
       "\\item 8\n",
       "\\item 9\n",
       "\\item 10\n",
       "\\item 11\n",
       "\\item 12\n",
       "\\item 13\n",
       "\\item 14\n",
       "\\item 15\n",
       "\\item 16\n",
       "\\item 17\n",
       "\\item 18\n",
       "\\item 19\n",
       "\\item 20\n",
       "\\item 21\n",
       "\\item 22\n",
       "\\item 23\n",
       "\\item 24\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "6. 6\n",
       "7. 7\n",
       "8. 8\n",
       "9. 9\n",
       "10. 10\n",
       "11. 11\n",
       "12. 12\n",
       "13. 13\n",
       "14. 14\n",
       "15. 15\n",
       "16. 16\n",
       "17. 17\n",
       "18. 18\n",
       "19. 19\n",
       "20. 20\n",
       "21. 21\n",
       "22. 22\n",
       "23. 23\n",
       "24. 24\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 6\n",
       "\\item 7\n",
       "\\item 8\n",
       "\\item 9\n",
       "\\item 10\n",
       "\\item 11\n",
       "\\item 12\n",
       "\\item 13\n",
       "\\item 14\n",
       "\\item 15\n",
       "\\item 16\n",
       "\\item 17\n",
       "\\item 18\n",
       "\\item 19\n",
       "\\item 20\n",
       "\\item 21\n",
       "\\item 22\n",
       "\\item 23\n",
       "\\item 24\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "6. 6\n",
       "7. 7\n",
       "8. 8\n",
       "9. 9\n",
       "10. 10\n",
       "11. 11\n",
       "12. 12\n",
       "13. 13\n",
       "14. 14\n",
       "15. 15\n",
       "16. 16\n",
       "17. 17\n",
       "18. 18\n",
       "19. 19\n",
       "20. 20\n",
       "21. 21\n",
       "22. 22\n",
       "23. 23\n",
       "24. 24\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       ", , 1\n",
       "\n",
       "     [,1] [,2] [,3]\n",
       "[1,]    1    5    9\n",
       "[2,]    2    6   10\n",
       "[3,]    3    7   11\n",
       "[4,]    4    8   12\n",
       "\n",
       ", , 2\n",
       "\n",
       "     [,1] [,2] [,3]\n",
       "[1,]   13   17   21\n",
       "[2,]   14   18   22\n",
       "[3,]   15   19   23\n",
       "[4,]   16   20   24\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# When printing the array R starts with the largest dimension \n",
    "# and goes down to the smallest dimension, printing \n",
    "# two-dimensional matrices at each stage.\n",
    "\n",
    "# Another way of creating an array is to start with a vector and \n",
    "# then assign the dimensions\n",
    "\n",
    "(x1 <- 1:24)\n",
    "dim(x1) <- c(4,3,2)\n",
    "x1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 2 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>4</td><td>16</td></tr>\n",
       "\t<tr><td>5</td><td>17</td></tr>\n",
       "\t<tr><td>6</td><td>18</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 2 of type int\n",
       "\\begin{tabular}{ll}\n",
       "\t 4 & 16\\\\\n",
       "\t 5 & 17\\\\\n",
       "\t 6 & 18\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 2 of type int\n",
       "\n",
       "| 4 | 16 |\n",
       "| 5 | 17 |\n",
       "| 6 | 18 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2]\n",
       "[1,] 4    16  \n",
       "[2,] 5    17  \n",
       "[3,] 6    18  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>7</li><li>8</li><li>9</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 7\n",
       "\\item 8\n",
       "\\item 9\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 7\n",
       "2. 8\n",
       "3. 9\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 7 8 9"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 4 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>4</td><td>7</td><td>10</td></tr>\n",
       "\t<tr><td>2</td><td>5</td><td>8</td><td>11</td></tr>\n",
       "\t<tr><td>3</td><td>6</td><td>9</td><td>12</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 4 of type int\n",
       "\\begin{tabular}{llll}\n",
       "\t 1 & 4 & 7 & 10\\\\\n",
       "\t 2 & 5 & 8 & 11\\\\\n",
       "\t 3 & 6 & 9 & 12\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 4 of type int\n",
       "\n",
       "| 1 | 4 | 7 | 10 |\n",
       "| 2 | 5 | 8 | 11 |\n",
       "| 3 | 6 | 9 | 12 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3] [,4]\n",
       "[1,] 1    4    7    10  \n",
       "[2,] 2    5    8    11  \n",
       "[3,] 3    6    9    12  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Indexing follows the same rules as before:\n",
    "\n",
    "x[,2,]\n",
    "x[,3,1]\n",
    "x[,,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " num [1:50, 1:4, 1:3] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n",
      " - attr(*, \"dimnames\")=List of 3\n",
      "  ..$ : NULL\n",
      "  ..$ : chr [1:4] \"Sepal L.\" \"Sepal W.\" \"Petal L.\" \"Petal W.\"\n",
      "  ..$ : chr [1:3] \"Setosa\" \"Versicolor\" \"Virginica\"\n",
      " num [1:4, 1:3, 1:50] 5.1 3.5 1.4 0.2 7 3.2 4.7 1.4 6.3 3.3 ...\n",
      " - attr(*, \"dimnames\")=List of 3\n",
      "  ..$ : chr [1:4] \"Sepal L.\" \"Sepal W.\" \"Petal L.\" \"Petal W.\"\n",
      "  ..$ : chr [1:3] \"Setosa\" \"Versicolor\" \"Virginica\"\n",
      "  ..$ : NULL\n"
     ]
    }
   ],
   "source": [
    "# The aperm function is an extension of matrix transposition \n",
    "# that changes the dimensions of an array. \n",
    "# The syntax is\n",
    "###\n",
    "# aperm(array, perm, resize=TRUE)\n",
    "###\n",
    "# where array is the arrangement to permute, perm is a  \n",
    "# permutation vector and resize is an indicator of whether \n",
    "# the data vector should be resized, if necessary.\n",
    "\n",
    "# As an example we will permute the iris3 array that has dimensions\n",
    "# $50\\times 4 \\times 3$ to an array with dimensions  $4\\times 3 \\times 50$:\n",
    "\n",
    "str(iris3)\n",
    "iris3b <- aperm(iris3, c(2,3,1))\n",
    "str(iris3b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>50</li><li>4</li><li>3</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 50\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 50\n",
       "2. 4\n",
       "3. 3\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 50  4  3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>4</li><li>3</li><li>50</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 50\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 4\n",
       "2. 3\n",
       "3. 50\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  4  3 50"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dim(iris3)\n",
    "dim(iris3b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " num [1:50, 1:4, 1:3] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n",
      " - attr(*, \"dimnames\")=List of 3\n",
      "  ..$ : NULL\n",
      "  ..$ : chr [1:4] \"Sepal L.\" \"Sepal W.\" \"Petal L.\" \"Petal W.\"\n",
      "  ..$ : chr [1:3] \"Setosa\" \"Versicolor\" \"Virginica\"\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".dl-inline {width: auto; margin:0; padding: 0}\n",
       ".dl-inline>dt, .dl-inline>dd {float: none; width: auto; display: inline-block}\n",
       ".dl-inline>dt::after {content: \":\\0020\"; padding-right: .5ex}\n",
       ".dl-inline>dt:not(:first-of-type) {padding-left: .5ex}\n",
       "</style><dl class=dl-inline><dt>Sepal L.</dt><dd>5.84333333333333</dd><dt>Sepal W.</dt><dd>3.05733333333333</dd><dt>Petal L.</dt><dd>3.758</dd><dt>Petal W.</dt><dd>1.19933333333333</dd></dl>\n"
      ],
      "text/latex": [
       "\\begin{description*}\n",
       "\\item[Sepal L.] 5.84333333333333\n",
       "\\item[Sepal W.] 3.05733333333333\n",
       "\\item[Petal L.] 3.758\n",
       "\\item[Petal W.] 1.19933333333333\n",
       "\\end{description*}\n"
      ],
      "text/markdown": [
       "Sepal L.\n",
       ":   5.84333333333333Sepal W.\n",
       ":   3.05733333333333Petal L.\n",
       ":   3.758Petal W.\n",
       ":   1.19933333333333\n",
       "\n"
      ],
      "text/plain": [
       "Sepal L. Sepal W. Petal L. Petal W. \n",
       "5.843333 3.057333 3.758000 1.199333 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 3 of type dbl</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>Setosa</th><th scope=col>Versicolor</th><th scope=col>Virginica</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>Sepal L.</th><td>5.006</td><td>5.936</td><td>6.588</td></tr>\n",
       "\t<tr><th scope=row>Sepal W.</th><td>3.428</td><td>2.770</td><td>2.974</td></tr>\n",
       "\t<tr><th scope=row>Petal L.</th><td>1.462</td><td>4.260</td><td>5.552</td></tr>\n",
       "\t<tr><th scope=row>Petal W.</th><td>0.246</td><td>1.326</td><td>2.026</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 3 of type dbl\n",
       "\\begin{tabular}{r|lll}\n",
       "  & Setosa & Versicolor & Virginica\\\\\n",
       "\\hline\n",
       "\tSepal L. & 5.006 & 5.936 & 6.588\\\\\n",
       "\tSepal W. & 3.428 & 2.770 & 2.974\\\\\n",
       "\tPetal L. & 1.462 & 4.260 & 5.552\\\\\n",
       "\tPetal W. & 0.246 & 1.326 & 2.026\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 3 of type dbl\n",
       "\n",
       "| <!--/--> | Setosa | Versicolor | Virginica |\n",
       "|---|---|---|---|\n",
       "| Sepal L. | 5.006 | 5.936 | 6.588 |\n",
       "| Sepal W. | 3.428 | 2.770 | 2.974 |\n",
       "| Petal L. | 1.462 | 4.260 | 5.552 |\n",
       "| Petal W. | 0.246 | 1.326 | 2.026 |\n",
       "\n"
      ],
      "text/plain": [
       "         Setosa Versicolor Virginica\n",
       "Sepal L. 5.006  5.936      6.588    \n",
       "Sepal W. 3.428  2.770      2.974    \n",
       "Petal L. 1.462  4.260      5.552    \n",
       "Petal W. 0.246  1.326      2.026    "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 4 of type dbl</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>Sepal L.</th><th scope=col>Sepal W.</th><th scope=col>Petal L.</th><th scope=col>Petal W.</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>Setosa</th><td>5.006</td><td>3.428</td><td>1.462</td><td>0.246</td></tr>\n",
       "\t<tr><th scope=row>Versicolor</th><td>5.936</td><td>2.770</td><td>4.260</td><td>1.326</td></tr>\n",
       "\t<tr><th scope=row>Virginica</th><td>6.588</td><td>2.974</td><td>5.552</td><td>2.026</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 4 of type dbl\n",
       "\\begin{tabular}{r|llll}\n",
       "  & Sepal L. & Sepal W. & Petal L. & Petal W.\\\\\n",
       "\\hline\n",
       "\tSetosa & 5.006 & 3.428 & 1.462 & 0.246\\\\\n",
       "\tVersicolor & 5.936 & 2.770 & 4.260 & 1.326\\\\\n",
       "\tVirginica & 6.588 & 2.974 & 5.552 & 2.026\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 4 of type dbl\n",
       "\n",
       "| <!--/--> | Sepal L. | Sepal W. | Petal L. | Petal W. |\n",
       "|---|---|---|---|---|\n",
       "| Setosa | 5.006 | 3.428 | 1.462 | 0.246 |\n",
       "| Versicolor | 5.936 | 2.770 | 4.260 | 1.326 |\n",
       "| Virginica | 6.588 | 2.974 | 5.552 | 2.026 |\n",
       "\n"
      ],
      "text/plain": [
       "           Sepal L. Sepal W. Petal L. Petal W.\n",
       "Setosa     5.006    3.428    1.462    0.246   \n",
       "Versicolor 5.936    2.770    4.260    1.326   \n",
       "Virginica  6.588    2.974    5.552    2.026   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "###apply\n",
    "#This command successively applies a function to each row \n",
    "# (first dimension), column (second dimension) or level of \n",
    "## a higher-dimensional array. The syntax is \n",
    "###\n",
    "# apply(data, dim,function, ...)\n",
    "###\n",
    "# where data is the name of the matrix or array and \n",
    "# function is any function in R.To see an example of the use \n",
    "# of this function we are going to work with the file iris3\n",
    "# that has the information of the data set iris that we have \n",
    "# used previously but in theformat of an arrangement of dimensions\n",
    "# 50×4×3.  The third dimension corresponds to the species, and \n",
    "# for each of the three species there is a matrix of dimension\n",
    "# 50×4 with the values of the four variables that we already know \n",
    "# for the 50 plants of the corresponding species.\n",
    "str(iris3)\n",
    "# To calculate the mean value for each variable in the data set \n",
    "# we write:\n",
    "apply(iris3, 2, mean)\n",
    "# However, if we want the mean value for each species we have \n",
    "# to se a vector as dimension,as follows\n",
    "apply(iris3,c(2,3), mean)\n",
    "apply(iris3,c(3,2), mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 3 of type dbl</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>Setosa</th><th scope=col>Versicolor</th><th scope=col>Virginica</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>Sepal L.</th><td>5.0025</td><td>5.9375</td><td>6.5725</td></tr>\n",
       "\t<tr><th scope=row>Sepal W.</th><td>3.4150</td><td>2.7800</td><td>2.9625</td></tr>\n",
       "\t<tr><th scope=row>Petal L.</th><td>1.4600</td><td>4.2925</td><td>5.5100</td></tr>\n",
       "\t<tr><th scope=row>Petal W.</th><td>0.2375</td><td>1.3250</td><td>2.0325</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 3 of type dbl\n",
       "\\begin{tabular}{r|lll}\n",
       "  & Setosa & Versicolor & Virginica\\\\\n",
       "\\hline\n",
       "\tSepal L. & 5.0025 & 5.9375 & 6.5725\\\\\n",
       "\tSepal W. & 3.4150 & 2.7800 & 2.9625\\\\\n",
       "\tPetal L. & 1.4600 & 4.2925 & 5.5100\\\\\n",
       "\tPetal W. & 0.2375 & 1.3250 & 2.0325\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 3 of type dbl\n",
       "\n",
       "| <!--/--> | Setosa | Versicolor | Virginica |\n",
       "|---|---|---|---|\n",
       "| Sepal L. | 5.0025 | 5.9375 | 6.5725 |\n",
       "| Sepal W. | 3.4150 | 2.7800 | 2.9625 |\n",
       "| Petal L. | 1.4600 | 4.2925 | 5.5100 |\n",
       "| Petal W. | 0.2375 | 1.3250 | 2.0325 |\n",
       "\n"
      ],
      "text/plain": [
       "         Setosa Versicolor Virginica\n",
       "Sepal L. 5.0025 5.9375     6.5725   \n",
       "Sepal W. 3.4150 2.7800     2.9625   \n",
       "Petal L. 1.4600 4.2925     5.5100   \n",
       "Petal W. 0.2375 1.3250     2.0325   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# If the function to be used requires additional parameters, \n",
    "# these can be included afterthe function name.\n",
    "# As an example, we are going to calculate the trimmed averages \n",
    "# for the same data above.Trimmed averages are a robust version \n",
    "# of averages in which a percentage of the sample corresponding \n",
    "# to the data furthest from the centre is ‘trimmed’.\n",
    "apply(iris3,c(2,3), mean, trim=0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 3 of type dbl</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>Setosa</th><th scope=col>Versicolor</th><th scope=col>Virginica</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>Sepal L.</th><td>5.006</td><td>5.936</td><td>6.588</td></tr>\n",
       "\t<tr><th scope=row>Sepal W.</th><td>3.428</td><td>2.770</td><td>2.974</td></tr>\n",
       "\t<tr><th scope=row>Petal L.</th><td>1.462</td><td>4.260</td><td>5.552</td></tr>\n",
       "\t<tr><th scope=row>Petal W.</th><td>0.246</td><td>1.326</td><td>2.026</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 3 of type dbl\n",
       "\\begin{tabular}{r|lll}\n",
       "  & Setosa & Versicolor & Virginica\\\\\n",
       "\\hline\n",
       "\tSepal L. & 5.006 & 5.936 & 6.588\\\\\n",
       "\tSepal W. & 3.428 & 2.770 & 2.974\\\\\n",
       "\tPetal L. & 1.462 & 4.260 & 5.552\\\\\n",
       "\tPetal W. & 0.246 & 1.326 & 2.026\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 3 of type dbl\n",
       "\n",
       "| <!--/--> | Setosa | Versicolor | Virginica |\n",
       "|---|---|---|---|\n",
       "| Sepal L. | 5.006 | 5.936 | 6.588 |\n",
       "| Sepal W. | 3.428 | 2.770 | 2.974 |\n",
       "| Petal L. | 1.462 | 4.260 | 5.552 |\n",
       "| Petal W. | 0.246 | 1.326 | 2.026 |\n",
       "\n"
      ],
      "text/plain": [
       "         Setosa Versicolor Virginica\n",
       "Sepal L. 5.006  5.936      6.588    \n",
       "Sepal W. 3.428  2.770      2.974    \n",
       "Petal L. 1.462  4.260      5.552    \n",
       "Petal W. 0.246  1.326      2.026    "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>0.0939999999999994</li><li>-0.106</li><li>-0.306</li><li>-0.406000000000001</li><li>-0.00600000000000023</li><li>0.394</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 0.0939999999999994\n",
       "\\item -0.106\n",
       "\\item -0.306\n",
       "\\item -0.406000000000001\n",
       "\\item -0.00600000000000023\n",
       "\\item 0.394\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 0.0939999999999994\n",
       "2. -0.106\n",
       "3. -0.306\n",
       "4. -0.406000000000001\n",
       "5. -0.00600000000000023\n",
       "6. 0.394\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  0.094 -0.106 -0.306 -0.406 -0.006  0.394"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## sweep\n",
    "# This function returns an array obtained from an input array by \n",
    "# sweeping out a summarystatistic. It is often used in conjunction\n",
    "# with the apply function.For instance, suppose we want to \n",
    "# subtract the mean we calculated in the previous example from \n",
    "# all the components of the array iris3, that is, in each case we \n",
    "# want to subtract themean corresponding to the variable and the \n",
    "# species of each data.  One way to do this is as follows:\n",
    "\n",
    "(iris.means <-apply(iris3,c(2,3), mean))\n",
    "iris.ctd <-sweep(iris3,c(2,3), iris.means,'-')\n",
    "head(iris.ctd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 3 of type dbl</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>Setosa</th><th scope=col>Versicolor</th><th scope=col>Virginica</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>Sepal L.</th><td> 0.094</td><td>1.064</td><td>-0.288</td></tr>\n",
       "\t<tr><th scope=row>Sepal W.</th><td> 0.072</td><td>0.430</td><td> 0.326</td></tr>\n",
       "\t<tr><th scope=row>Petal L.</th><td>-0.062</td><td>0.440</td><td> 0.448</td></tr>\n",
       "\t<tr><th scope=row>Petal W.</th><td>-0.046</td><td>0.074</td><td> 0.474</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 3 of type dbl\n",
       "\\begin{tabular}{r|lll}\n",
       "  & Setosa & Versicolor & Virginica\\\\\n",
       "\\hline\n",
       "\tSepal L. &  0.094 & 1.064 & -0.288\\\\\n",
       "\tSepal W. &  0.072 & 0.430 &  0.326\\\\\n",
       "\tPetal L. & -0.062 & 0.440 &  0.448\\\\\n",
       "\tPetal W. & -0.046 & 0.074 &  0.474\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 3 of type dbl\n",
       "\n",
       "| <!--/--> | Setosa | Versicolor | Virginica |\n",
       "|---|---|---|---|\n",
       "| Sepal L. |  0.094 | 1.064 | -0.288 |\n",
       "| Sepal W. |  0.072 | 0.430 |  0.326 |\n",
       "| Petal L. | -0.062 | 0.440 |  0.448 |\n",
       "| Petal W. | -0.046 | 0.074 |  0.474 |\n",
       "\n"
      ],
      "text/plain": [
       "         Setosa Versicolor Virginica\n",
       "Sepal L.  0.094 1.064      -0.288   \n",
       "Sepal W.  0.072 0.430       0.326   \n",
       "Petal L. -0.062 0.440       0.448   \n",
       "Petal W. -0.046 0.074       0.474   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "iris.ctd[1,,]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 3 of type dbl</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>Setosa</th><th scope=col>Versicolor</th><th scope=col>Virginica</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>Sepal L.</th><td>5.1</td><td>7.0</td><td>6.3</td></tr>\n",
       "\t<tr><th scope=row>Sepal W.</th><td>3.5</td><td>3.2</td><td>3.3</td></tr>\n",
       "\t<tr><th scope=row>Petal L.</th><td>1.4</td><td>4.7</td><td>6.0</td></tr>\n",
       "\t<tr><th scope=row>Petal W.</th><td>0.2</td><td>1.4</td><td>2.5</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 3 of type dbl\n",
       "\\begin{tabular}{r|lll}\n",
       "  & Setosa & Versicolor & Virginica\\\\\n",
       "\\hline\n",
       "\tSepal L. & 5.1 & 7.0 & 6.3\\\\\n",
       "\tSepal W. & 3.5 & 3.2 & 3.3\\\\\n",
       "\tPetal L. & 1.4 & 4.7 & 6.0\\\\\n",
       "\tPetal W. & 0.2 & 1.4 & 2.5\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 3 of type dbl\n",
       "\n",
       "| <!--/--> | Setosa | Versicolor | Virginica |\n",
       "|---|---|---|---|\n",
       "| Sepal L. | 5.1 | 7.0 | 6.3 |\n",
       "| Sepal W. | 3.5 | 3.2 | 3.3 |\n",
       "| Petal L. | 1.4 | 4.7 | 6.0 |\n",
       "| Petal W. | 0.2 | 1.4 | 2.5 |\n",
       "\n"
      ],
      "text/plain": [
       "         Setosa Versicolor Virginica\n",
       "Sepal L. 5.1    7.0        6.3      \n",
       "Sepal W. 3.5    3.2        3.3      \n",
       "Petal L. 1.4    4.7        6.0      \n",
       "Petal W. 0.2    1.4        2.5      "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "iris3[1,,]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 1 2 3 4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>2</li><li>4</li><li>6</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 2\n",
       "\\item 4\n",
       "\\item 6\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 2\n",
       "2. 4\n",
       "3. 6\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 2 4 6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 3 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>2</td><td> 4</td><td> 6</td></tr>\n",
       "\t<tr><td>4</td><td> 8</td><td>12</td></tr>\n",
       "\t<tr><td>6</td><td>12</td><td>18</td></tr>\n",
       "\t<tr><td>8</td><td>16</td><td>24</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 3 of type dbl\n",
       "\\begin{tabular}{lll}\n",
       "\t 2 &  4 &  6\\\\\n",
       "\t 4 &  8 & 12\\\\\n",
       "\t 6 & 12 & 18\\\\\n",
       "\t 8 & 16 & 24\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 3 of type dbl\n",
       "\n",
       "| 2 |  4 |  6 |\n",
       "| 4 |  8 | 12 |\n",
       "| 6 | 12 | 18 |\n",
       "| 8 | 16 | 24 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3]\n",
       "[1,] 2     4    6  \n",
       "[2,] 4     8   12  \n",
       "[3,] 6    12   18  \n",
       "[4,] 8    16   24  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 4 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>2</td><td> 4</td><td> 6</td><td> 8</td></tr>\n",
       "\t<tr><td>4</td><td> 8</td><td>12</td><td>16</td></tr>\n",
       "\t<tr><td>6</td><td>12</td><td>18</td><td>24</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 4 of type dbl\n",
       "\\begin{tabular}{llll}\n",
       "\t 2 &  4 &  6 &  8\\\\\n",
       "\t 4 &  8 & 12 & 16\\\\\n",
       "\t 6 & 12 & 18 & 24\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 4 of type dbl\n",
       "\n",
       "| 2 |  4 |  6 |  8 |\n",
       "| 4 |  8 | 12 | 16 |\n",
       "| 6 | 12 | 18 | 24 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3] [,4]\n",
       "[1,] 2     4    6    8  \n",
       "[2,] 4     8   12   16  \n",
       "[3,] 6    12   18   24  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## outer\n",
    "# Another important function for matrices, data tables and \n",
    "# arrangements in general is the function outer or outer product.\n",
    "\n",
    "# If texttt{A} and texttt{B} are two arrays, their outer product \n",
    "# is a new array whose dimension is the concatenation of the \n",
    "# dimension vectors of the arrays A and B, in the order of the \n",
    "# product, and whose entries are obtained forming all possible \n",
    "# products of the elements of A with all the elements of B.\n",
    "# For example, the outer product of a vector of length 2 with \n",
    "# another of length 3 producesan array (matrix) of dimensions\n",
    "# 2×3; the product of an array of dimensions m×n times \n",
    "# another array of dimensions pxq produces an array of dimensions \n",
    "# m x n x p x q. In this new array, the element in position \n",
    "# (i,j,k,l) is the product  A[i,j] x B[k,l]\n",
    "# Let's look at some examples.\n",
    "\n",
    "(aa <- 1:4)\n",
    "(bb <- c(2,4,6))\n",
    "(ab <- aa %o% bb)\n",
    "(ba <- bb %o% aa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 3 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>5</td><td> 9</td></tr>\n",
       "\t<tr><td>2</td><td>6</td><td>10</td></tr>\n",
       "\t<tr><td>3</td><td>7</td><td>11</td></tr>\n",
       "\t<tr><td>4</td><td>8</td><td>12</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 3 of type int\n",
       "\\begin{tabular}{lll}\n",
       "\t 1 & 5 &  9\\\\\n",
       "\t 2 & 6 & 10\\\\\n",
       "\t 3 & 7 & 11\\\\\n",
       "\t 4 & 8 & 12\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 3 of type int\n",
       "\n",
       "| 1 | 5 |  9 |\n",
       "| 2 | 6 | 10 |\n",
       "| 3 | 7 | 11 |\n",
       "| 4 | 8 | 12 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3]\n",
       "[1,] 1    5     9  \n",
       "[2,] 2    6    10  \n",
       "[3,] 3    7    11  \n",
       "[4,] 4    8    12  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>9</li><li>10</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 9\n",
       "\\item 10\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 9\n",
       "2. 10\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  9 10"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>9</li><li>18</li><li>27</li><li>36</li><li>45</li><li>54</li><li>63</li><li>72</li><li>81</li><li>90</li><li>99</li><li>108</li><li>10</li><li>20</li><li>30</li><li>40</li><li>50</li><li>60</li><li>70</li><li>80</li><li>90</li><li>100</li><li>110</li><li>120</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 9\n",
       "\\item 18\n",
       "\\item 27\n",
       "\\item 36\n",
       "\\item 45\n",
       "\\item 54\n",
       "\\item 63\n",
       "\\item 72\n",
       "\\item 81\n",
       "\\item 90\n",
       "\\item 99\n",
       "\\item 108\n",
       "\\item 10\n",
       "\\item 20\n",
       "\\item 30\n",
       "\\item 40\n",
       "\\item 50\n",
       "\\item 60\n",
       "\\item 70\n",
       "\\item 80\n",
       "\\item 90\n",
       "\\item 100\n",
       "\\item 110\n",
       "\\item 120\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 9\n",
       "2. 18\n",
       "3. 27\n",
       "4. 36\n",
       "5. 45\n",
       "6. 54\n",
       "7. 63\n",
       "8. 72\n",
       "9. 81\n",
       "10. 90\n",
       "11. 99\n",
       "12. 108\n",
       "13. 10\n",
       "14. 20\n",
       "15. 30\n",
       "16. 40\n",
       "17. 50\n",
       "18. 60\n",
       "19. 70\n",
       "20. 80\n",
       "21. 90\n",
       "22. 100\n",
       "23. 110\n",
       "24. 120\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       ", , 1\n",
       "\n",
       "     [,1] [,2] [,3]\n",
       "[1,]    9   45   81\n",
       "[2,]   18   54   90\n",
       "[3,]   27   63   99\n",
       "[4,]   36   72  108\n",
       "\n",
       ", , 2\n",
       "\n",
       "     [,1] [,2] [,3]\n",
       "[1,]   10   50   90\n",
       "[2,]   20   60  100\n",
       "[3,]   30   70  110\n",
       "[4,]   40   80  120\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# In terms of linear algebra, the outer product %o% of vectors x \n",
    "# and y is the product xy^t, while the matrix product %*% represents \n",
    "# x^ty, and requires the vectors to be of equal length.\n",
    "\n",
    "(A  <- matrix(1:12, ncol=3))\n",
    "(B <- 9:10)\n",
    "(AB <- A %o% B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>4</li><li>3</li><li>2</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 4\n",
       "2. 3\n",
       "3. 2\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 4 3 2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dim(AB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 3 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>10</td><td>50</td><td> 90</td></tr>\n",
       "\t<tr><td>20</td><td>60</td><td>100</td></tr>\n",
       "\t<tr><td>30</td><td>70</td><td>110</td></tr>\n",
       "\t<tr><td>40</td><td>80</td><td>120</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 3 of type dbl\n",
       "\\begin{tabular}{lll}\n",
       "\t 10 & 50 &  90\\\\\n",
       "\t 20 & 60 & 100\\\\\n",
       "\t 30 & 70 & 110\\\\\n",
       "\t 40 & 80 & 120\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 3 of type dbl\n",
       "\n",
       "| 10 | 50 |  90 |\n",
       "| 20 | 60 | 100 |\n",
       "| 30 | 70 | 110 |\n",
       "| 40 | 80 | 120 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3]\n",
       "[1,] 10   50    90 \n",
       "[2,] 20   60   100 \n",
       "[3,] 30   70   110 \n",
       "[4,] 40   80   120 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 3 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td> 9</td><td>45</td><td> 81</td></tr>\n",
       "\t<tr><td>18</td><td>54</td><td> 90</td></tr>\n",
       "\t<tr><td>27</td><td>63</td><td> 99</td></tr>\n",
       "\t<tr><td>36</td><td>72</td><td>108</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 3 of type dbl\n",
       "\\begin{tabular}{lll}\n",
       "\t  9 & 45 &  81\\\\\n",
       "\t 18 & 54 &  90\\\\\n",
       "\t 27 & 63 &  99\\\\\n",
       "\t 36 & 72 & 108\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 3 of type dbl\n",
       "\n",
       "|  9 | 45 |  81 |\n",
       "| 18 | 54 |  90 |\n",
       "| 27 | 63 |  99 |\n",
       "| 36 | 72 | 108 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3]\n",
       "[1,]  9   45    81 \n",
       "[2,] 18   54    90 \n",
       "[3,] 27   63    99 \n",
       "[4,] 36   72   108 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "AB[,,2]\n",
    "AB[,,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " num [1:100, 1:100] 1.96e-05 2.35e-05 2.80e-05 3.33e-05 3.95e-05 ...\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n3K5dOy3Pp729vZ6e3rFjx7RcB9AGYQcAH5JKpYqIiFi9enViYmL//v09PT1tbW01d3eWTyqV\naufOncuWLXv27JmRSYVvWre9efGc76ad7f4OOCGEu13n0tJSM/Nq925cq1Cpsu2IMZ3tB80b\nM2j0dO9R7rM0x9y/eW215+T0F2lyhaJFhy7OvovrN25WWKhy6dDcqkv3uRu2Z75+GbtvT+y+\n0DdpqUIIuzHj3Px+LvuKGf26ymSykVNnxkTs/uPqJeMKFVp365UQdew7r3nDJk8vO+z78WOS\nfr8iE7KiwoLGVm0dZy+waNHKqUMz6569Z63dLITIePXy9IG9J3Zvz05/U9GsytCJ7oNdp2gu\nE3r066rQ018efvRKXHTsvj1/XE3QNzSUy+Q9unc7efKklqcxPj6+T58+N27csLS01HIpQBuE\nHQB8FJr92YMHD1paWk6dOrWc788KIS5durRgwYIzZ86o1erm7TrZf+fSobe9Qk9/18ofjgUH\n/bTnkIVVm8d/3Inau/P80YMFqnx9A4Mf9xxqZPnXw0FuX7rg5/Kto/cCuUJ+KizkxZ9PqtWu\no2dg8DY7a92x+LJXteZlZ7p2blm1Zu03L1L19Q3a9+nnMnfxuSORu9cuW7rrgObVtM8f3j8V\nHnJi947SUvVXTZo5zPTV3NP6JClx9jC78fO+7zns27NHDsSE7356/66enr66VL0x+tcadf96\nvmBxYaFT+6ZN2rY3MjH57XSMkImWHbtatG4TsX7N0l37m7fvrDks9Unyz+7jUx8/ysjIqFy5\nsjanTq1Wt2vXztraesuWLdqsA3wAuvwDPwCQupSUlCVLlpibm1euXNnDw+Px48e6nug9srKy\nFi5cWKVKFSFE1Ro1BzpPkslk3073/tfbIzr3G2RgZPTFV18LIcxr1nbxXRJ+64mxqalV5277\n76YcSErd/8fzhUGhmj+VUygUne0HbYm/WnYHRpXqNYOv3N0UkzBsknulquZCJpPJZK269vjX\nrxg9Y7ZcoXDw8tU8zaRCxUr9HV2r1qzV0NJqX+KzssOm/rBKCKFQ6Mnl8qZt2y/be/hAUmqT\nNu30DQy2nv9dc3uEg5ev5v5fPX3972bNK3uB2KrIaLlC4efnp/1J27Fjh6mpaWpqqvZLAVri\nih0AfHQFBQXh4eFr1qy5c+fOZ7E/K4SIiory9fW9detWaWlpR7sBA8ZNaNauoxDizqWLS1y+\n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\nAEAiCDsAAACJIOwAAAAkgrADAACQCMIOAABAIgg7AAAAiSDsAAAAJIKwAwAAkAjCDgAAQCII\nOwAAAIkg7AAAACSCsAMAAJAIwg4AAEAiCDsAAACJIOwAAAAkgrADAACQCMIOAABAIgg7AAAA\niSDsAAAAJIKwAwAAkAjCDgAAQCIIOwAAAIkg7AAAACSCsAMAAJAIwg4AAEAiCDsAAACJIOwA\nAAAkgrADAACQCMIOAABAIgg7AAAAiSDsAAAAJIKwAwAAkAjCDgAAQCIIOwAAAIkg7AAAACSC\nsAMAAJAIwg4AAEAiCDsAAACJIOwAAAAkgrADAACQCMIOAABAIgg7AAAAiSDsAAAAJIKwAwAA\nkAjCDgAAQCIIOwAAAIkg7AAAACSCsAMAAJAIwg4AAEAiCDsAAACJIOwAAAAkgrADAACQCMIO\nAABAIgg7AAAAiSDsAAAAJIKwAwAAkAjCDgAAQCIIOwAAAIkg7AAAACSCsAMAAJAIwg4AAEAi\nCDsAAACJIOwAAAAkgrADAACQCMIOAABAIgg7AAAAiSDsAAAAJIKwAwAAkAjCDgAAQCIIOwAA\nAIkg7AAAACSCsAMAAJAIwg4AAEAiCDsAAACJIOwAAAAkgrADAACQCMIOAABAIgg7AAAAiSDs\nAAAAJIKwAwAAkAjCDgAAQCIIOwAAAIkg7AAAACSCsAMAAJAIwg4AAEAiCDsAAACJIOwAAAAk\ngrADAACQCMIOAABAIgg7AAAAiSDsAAAAJIKwAwAAkAjCDgAAQCIIOwAAAIkg7AAAACSCsAMA\nAJAIwg4AAEAiCDsAAACJIOwAAAAkgrADAACQCMIOAABAIgg7AAAAiSDsAAAAJIKwAwAAkAjC\nDgAAQCIIOwAAAIkg7AAAACTi/wAYDcemyrpMRAAAAABJRU5ErkJggg==",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 420
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Another, more flexible, way of writing this function is\n",
    "###\n",
    "# outer( array1}, array2, FUN='*')\n",
    "###\n",
    "\n",
    "# where array1, array2 are the arrays and FUN is the operation that \n",
    "# is going to be used to get the new array, which by default is \n",
    "# multiplication, but can be any other operation or any function \n",
    "# of two variables. Let's see examples\n",
    "\n",
    "# Suppose we want to evaluate the function \n",
    "# f(x,y) = \\frac{1}{2\\pi} \\exp\\big\\{-\\frac{x^2+y^2}{2}\\big\\}\n",
    "# which is the standard bivariate normal distribution, in a \n",
    "# square of sides [-3,3]. We use a mesh of 100 points in [-3,3] \n",
    "# and the define the function f(x,y) before doing the outer product:\n",
    "\n",
    "x <- y <- seq(-3,3,length=100)\n",
    "f <- function(x,y){\n",
    "  exp(-(x^2+y^2)/2)/(2*pi)\n",
    "  }\n",
    "z <- outer(x,y,f)\n",
    "str(z)\n",
    "persp(x,y,z,phi=20, theta=30,expand = 0.8,col='lightblue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 9 × 9 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td> 2</td><td> 3</td><td> 4</td><td> 5</td><td> 6</td><td> 7</td><td> 8</td><td> 9</td></tr>\n",
       "\t<tr><td>2</td><td> 4</td><td> 6</td><td> 8</td><td>10</td><td>12</td><td>14</td><td>16</td><td>18</td></tr>\n",
       "\t<tr><td>3</td><td> 6</td><td> 9</td><td>12</td><td>15</td><td>18</td><td>21</td><td>24</td><td>27</td></tr>\n",
       "\t<tr><td>4</td><td> 8</td><td>12</td><td>16</td><td>20</td><td>24</td><td>28</td><td>32</td><td>36</td></tr>\n",
       "\t<tr><td>5</td><td>10</td><td>15</td><td>20</td><td>25</td><td>30</td><td>35</td><td>40</td><td>45</td></tr>\n",
       "\t<tr><td>6</td><td>12</td><td>18</td><td>24</td><td>30</td><td>36</td><td>42</td><td>48</td><td>54</td></tr>\n",
       "\t<tr><td>7</td><td>14</td><td>21</td><td>28</td><td>35</td><td>42</td><td>49</td><td>56</td><td>63</td></tr>\n",
       "\t<tr><td>8</td><td>16</td><td>24</td><td>32</td><td>40</td><td>48</td><td>56</td><td>64</td><td>72</td></tr>\n",
       "\t<tr><td>9</td><td>18</td><td>27</td><td>36</td><td>45</td><td>54</td><td>63</td><td>72</td><td>81</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 9 × 9 of type dbl\n",
       "\\begin{tabular}{lllllllll}\n",
       "\t 1 &  2 &  3 &  4 &  5 &  6 &  7 &  8 &  9\\\\\n",
       "\t 2 &  4 &  6 &  8 & 10 & 12 & 14 & 16 & 18\\\\\n",
       "\t 3 &  6 &  9 & 12 & 15 & 18 & 21 & 24 & 27\\\\\n",
       "\t 4 &  8 & 12 & 16 & 20 & 24 & 28 & 32 & 36\\\\\n",
       "\t 5 & 10 & 15 & 20 & 25 & 30 & 35 & 40 & 45\\\\\n",
       "\t 6 & 12 & 18 & 24 & 30 & 36 & 42 & 48 & 54\\\\\n",
       "\t 7 & 14 & 21 & 28 & 35 & 42 & 49 & 56 & 63\\\\\n",
       "\t 8 & 16 & 24 & 32 & 40 & 48 & 56 & 64 & 72\\\\\n",
       "\t 9 & 18 & 27 & 36 & 45 & 54 & 63 & 72 & 81\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 9 × 9 of type dbl\n",
       "\n",
       "| 1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 |\n",
       "| 2 |  4 |  6 |  8 | 10 | 12 | 14 | 16 | 18 |\n",
       "| 3 |  6 |  9 | 12 | 15 | 18 | 21 | 24 | 27 |\n",
       "| 4 |  8 | 12 | 16 | 20 | 24 | 28 | 32 | 36 |\n",
       "| 5 | 10 | 15 | 20 | 25 | 30 | 35 | 40 | 45 |\n",
       "| 6 | 12 | 18 | 24 | 30 | 36 | 42 | 48 | 54 |\n",
       "| 7 | 14 | 21 | 28 | 35 | 42 | 49 | 56 | 63 |\n",
       "| 8 | 16 | 24 | 32 | 40 | 48 | 56 | 64 | 72 |\n",
       "| 9 | 18 | 27 | 36 | 45 | 54 | 63 | 72 | 81 |\n",
       "\n"
      ],
      "text/plain": [
       "      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n",
       " [1,] 1     2    3    4    5    6    7    8    9  \n",
       " [2,] 2     4    6    8   10   12   14   16   18  \n",
       " [3,] 3     6    9   12   15   18   21   24   27  \n",
       " [4,] 4     8   12   16   20   24   28   32   36  \n",
       " [5,] 5    10   15   20   25   30   35   40   45  \n",
       " [6,] 6    12   18   24   30   36   42   48   54  \n",
       " [7,] 7    14   21   28   35   42   49   56   63  \n",
       " [8,] 8    16   24   32   40   48   56   64   72  \n",
       " [9,] 9    18   27   36   45   54   63   72   81  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# As a final example let's see how to produce a multiplication table:\n",
    "\n",
    "outer(1:9,1:9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 14 × 4</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>x</th><th scope=col>y</th><th scope=col>z1</th><th scope=col>w</th></tr>\n",
       "\t<tr><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;fct&gt;</th><th scope=col>&lt;lgl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>2001</td><td> 0.66607668</td><td>k</td><td> TRUE</td></tr>\n",
       "\t<tr><td>2002</td><td> 0.56218483</td><td>u</td><td>FALSE</td></tr>\n",
       "\t<tr><td>2003</td><td> 0.30648108</td><td>r</td><td>FALSE</td></tr>\n",
       "\t<tr><td>2004</td><td>-0.53525991</td><td>q</td><td>FALSE</td></tr>\n",
       "\t<tr><td>2005</td><td>-1.34332631</td><td>c</td><td>FALSE</td></tr>\n",
       "\t<tr><td>2006</td><td>-0.31633234</td><td>v</td><td>FALSE</td></tr>\n",
       "\t<tr><td>2007</td><td>-1.06630540</td><td>o</td><td>FALSE</td></tr>\n",
       "\t<tr><td>2008</td><td> 0.61616173</td><td>z</td><td>FALSE</td></tr>\n",
       "\t<tr><td>2009</td><td> 0.19294289</td><td>y</td><td>FALSE</td></tr>\n",
       "\t<tr><td>2010</td><td> 1.47753472</td><td>l</td><td>FALSE</td></tr>\n",
       "\t<tr><td>2011</td><td>-0.05299058</td><td>b</td><td>FALSE</td></tr>\n",
       "\t<tr><td>2012</td><td> 1.98614573</td><td>x</td><td>FALSE</td></tr>\n",
       "\t<tr><td>2013</td><td>-1.00591679</td><td>m</td><td>FALSE</td></tr>\n",
       "\t<tr><td>2014</td><td>-0.28027285</td><td>f</td><td>FALSE</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 14 × 4\n",
       "\\begin{tabular}{llll}\n",
       " x & y & z1 & w\\\\\n",
       " <int> & <dbl> & <fct> & <lgl>\\\\\n",
       "\\hline\n",
       "\t 2001 &  0.66607668 & k &  TRUE\\\\\n",
       "\t 2002 &  0.56218483 & u & FALSE\\\\\n",
       "\t 2003 &  0.30648108 & r & FALSE\\\\\n",
       "\t 2004 & -0.53525991 & q & FALSE\\\\\n",
       "\t 2005 & -1.34332631 & c & FALSE\\\\\n",
       "\t 2006 & -0.31633234 & v & FALSE\\\\\n",
       "\t 2007 & -1.06630540 & o & FALSE\\\\\n",
       "\t 2008 &  0.61616173 & z & FALSE\\\\\n",
       "\t 2009 &  0.19294289 & y & FALSE\\\\\n",
       "\t 2010 &  1.47753472 & l & FALSE\\\\\n",
       "\t 2011 & -0.05299058 & b & FALSE\\\\\n",
       "\t 2012 &  1.98614573 & x & FALSE\\\\\n",
       "\t 2013 & -1.00591679 & m & FALSE\\\\\n",
       "\t 2014 & -0.28027285 & f & FALSE\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 14 × 4\n",
       "\n",
       "| x &lt;int&gt; | y &lt;dbl&gt; | z1 &lt;fct&gt; | w &lt;lgl&gt; |\n",
       "|---|---|---|---|\n",
       "| 2001 |  0.66607668 | k |  TRUE |\n",
       "| 2002 |  0.56218483 | u | FALSE |\n",
       "| 2003 |  0.30648108 | r | FALSE |\n",
       "| 2004 | -0.53525991 | q | FALSE |\n",
       "| 2005 | -1.34332631 | c | FALSE |\n",
       "| 2006 | -0.31633234 | v | FALSE |\n",
       "| 2007 | -1.06630540 | o | FALSE |\n",
       "| 2008 |  0.61616173 | z | FALSE |\n",
       "| 2009 |  0.19294289 | y | FALSE |\n",
       "| 2010 |  1.47753472 | l | FALSE |\n",
       "| 2011 | -0.05299058 | b | FALSE |\n",
       "| 2012 |  1.98614573 | x | FALSE |\n",
       "| 2013 | -1.00591679 | m | FALSE |\n",
       "| 2014 | -0.28027285 | f | FALSE |\n",
       "\n"
      ],
      "text/plain": [
       "   x    y           z1 w    \n",
       "1  2001  0.66607668 k   TRUE\n",
       "2  2002  0.56218483 u  FALSE\n",
       "3  2003  0.30648108 r  FALSE\n",
       "4  2004 -0.53525991 q  FALSE\n",
       "5  2005 -1.34332631 c  FALSE\n",
       "6  2006 -0.31633234 v  FALSE\n",
       "7  2007 -1.06630540 o  FALSE\n",
       "8  2008  0.61616173 z  FALSE\n",
       "9  2009  0.19294289 y  FALSE\n",
       "10 2010  1.47753472 l  FALSE\n",
       "11 2011 -0.05299058 b  FALSE\n",
       "12 2012  1.98614573 x  FALSE\n",
       "13 2013 -1.00591679 m  FALSE\n",
       "14 2014 -0.28027285 f  FALSE"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Data Frames\n",
    "# Data frames are matrix-like structure whose columns may be of \n",
    "# different mode but must all have the same length. The command \n",
    "# for creating a data frame is\n",
    "###\n",
    "# data.frame (datos1, datos2, ...)\n",
    "###\n",
    "\n",
    "# For instance:\n",
    "\n",
    "x <- -1:-4\n",
    "(dframe1 <- data.frame(x=2001:2014,y=rnorm(14),\n",
    "                       z1=letters[sample.int(26,14)],w = (1:14)%/%2==0))\n",
    "\n",
    "# However, if we try to add a new column with only three elements, \n",
    "# an error message is produced:\n",
    "\n",
    "#dframe1 <- data.frame(x=2001:2014,y=rnorm(14),\n",
    " #                     z1=letters[sample.int(26,14)],w = (1:14)%/%2==0,\n",
    " #                     v=c(1,-1,2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'data.frame':\t14 obs. of  4 variables:\n",
      " $ x : int  2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 ...\n",
      " $ y : num  0.666 0.562 0.306 -0.535 -1.343 ...\n",
      " $ z1: Factor w/ 14 levels \"b\",\"c\",\"f\",\"k\",..: 4 10 9 8 2 11 7 14 13 5 ...\n",
      " $ w : logi  TRUE FALSE FALSE FALSE FALSE FALSE ...\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 6 × 4</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>x</th><th scope=col>y</th><th scope=col>z1</th><th scope=col>w</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;fct&gt;</th><th scope=col>&lt;lgl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>2001</td><td> 0.6660767</td><td>k</td><td> TRUE</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>2002</td><td> 0.5621848</td><td>u</td><td>FALSE</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>2003</td><td> 0.3064811</td><td>r</td><td>FALSE</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>2004</td><td>-0.5352599</td><td>q</td><td>FALSE</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>2005</td><td>-1.3433263</td><td>c</td><td>FALSE</td></tr>\n",
       "\t<tr><th scope=row>6</th><td>2006</td><td>-0.3163323</td><td>v</td><td>FALSE</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 4\n",
       "\\begin{tabular}{r|llll}\n",
       "  & x & y & z1 & w\\\\\n",
       "  & <int> & <dbl> & <fct> & <lgl>\\\\\n",
       "\\hline\n",
       "\t1 & 2001 &  0.6660767 & k &  TRUE\\\\\n",
       "\t2 & 2002 &  0.5621848 & u & FALSE\\\\\n",
       "\t3 & 2003 &  0.3064811 & r & FALSE\\\\\n",
       "\t4 & 2004 & -0.5352599 & q & FALSE\\\\\n",
       "\t5 & 2005 & -1.3433263 & c & FALSE\\\\\n",
       "\t6 & 2006 & -0.3163323 & v & FALSE\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 4\n",
       "\n",
       "| <!--/--> | x &lt;int&gt; | y &lt;dbl&gt; | z1 &lt;fct&gt; | w &lt;lgl&gt; |\n",
       "|---|---|---|---|---|\n",
       "| 1 | 2001 |  0.6660767 | k |  TRUE |\n",
       "| 2 | 2002 |  0.5621848 | u | FALSE |\n",
       "| 3 | 2003 |  0.3064811 | r | FALSE |\n",
       "| 4 | 2004 | -0.5352599 | q | FALSE |\n",
       "| 5 | 2005 | -1.3433263 | c | FALSE |\n",
       "| 6 | 2006 | -0.3163323 | v | FALSE |\n",
       "\n"
      ],
      "text/plain": [
       "  x    y          z1 w    \n",
       "1 2001  0.6660767 k   TRUE\n",
       "2 2002  0.5621848 u  FALSE\n",
       "3 2003  0.3064811 r  FALSE\n",
       "4 2004 -0.5352599 q  FALSE\n",
       "5 2005 -1.3433263 c  FALSE\n",
       "6 2006 -0.3163323 v  FALSE"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 6 × 4</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>x</th><th scope=col>y</th><th scope=col>z1</th><th scope=col>w</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;fct&gt;</th><th scope=col>&lt;lgl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>9</th><td>2009</td><td> 0.19294289</td><td>y</td><td>FALSE</td></tr>\n",
       "\t<tr><th scope=row>10</th><td>2010</td><td> 1.47753472</td><td>l</td><td>FALSE</td></tr>\n",
       "\t<tr><th scope=row>11</th><td>2011</td><td>-0.05299058</td><td>b</td><td>FALSE</td></tr>\n",
       "\t<tr><th scope=row>12</th><td>2012</td><td> 1.98614573</td><td>x</td><td>FALSE</td></tr>\n",
       "\t<tr><th scope=row>13</th><td>2013</td><td>-1.00591679</td><td>m</td><td>FALSE</td></tr>\n",
       "\t<tr><th scope=row>14</th><td>2014</td><td>-0.28027285</td><td>f</td><td>FALSE</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 4\n",
       "\\begin{tabular}{r|llll}\n",
       "  & x & y & z1 & w\\\\\n",
       "  & <int> & <dbl> & <fct> & <lgl>\\\\\n",
       "\\hline\n",
       "\t9 & 2009 &  0.19294289 & y & FALSE\\\\\n",
       "\t10 & 2010 &  1.47753472 & l & FALSE\\\\\n",
       "\t11 & 2011 & -0.05299058 & b & FALSE\\\\\n",
       "\t12 & 2012 &  1.98614573 & x & FALSE\\\\\n",
       "\t13 & 2013 & -1.00591679 & m & FALSE\\\\\n",
       "\t14 & 2014 & -0.28027285 & f & FALSE\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 4\n",
       "\n",
       "| <!--/--> | x &lt;int&gt; | y &lt;dbl&gt; | z1 &lt;fct&gt; | w &lt;lgl&gt; |\n",
       "|---|---|---|---|---|\n",
       "| 9 | 2009 |  0.19294289 | y | FALSE |\n",
       "| 10 | 2010 |  1.47753472 | l | FALSE |\n",
       "| 11 | 2011 | -0.05299058 | b | FALSE |\n",
       "| 12 | 2012 |  1.98614573 | x | FALSE |\n",
       "| 13 | 2013 | -1.00591679 | m | FALSE |\n",
       "| 14 | 2014 | -0.28027285 | f | FALSE |\n",
       "\n"
      ],
      "text/plain": [
       "   x    y           z1 w    \n",
       "9  2009  0.19294289 y  FALSE\n",
       "10 2010  1.47753472 l  FALSE\n",
       "11 2011 -0.05299058 b  FALSE\n",
       "12 2012  1.98614573 x  FALSE\n",
       "13 2013 -1.00591679 m  FALSE\n",
       "14 2014 -0.28027285 f  FALSE"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "str(dframe1)\n",
    "head(dframe1)\n",
    "tail(dframe1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>2001</li><li>2002</li><li>2003</li><li>2004</li><li>2005</li><li>2006</li><li>2007</li><li>2008</li><li>2009</li><li>2010</li><li>2011</li><li>2012</li><li>2013</li><li>2014</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 2001\n",
       "\\item 2002\n",
       "\\item 2003\n",
       "\\item 2004\n",
       "\\item 2005\n",
       "\\item 2006\n",
       "\\item 2007\n",
       "\\item 2008\n",
       "\\item 2009\n",
       "\\item 2010\n",
       "\\item 2011\n",
       "\\item 2012\n",
       "\\item 2013\n",
       "\\item 2014\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 2001\n",
       "2. 2002\n",
       "3. 2003\n",
       "4. 2004\n",
       "5. 2005\n",
       "6. 2006\n",
       "7. 2007\n",
       "8. 2008\n",
       "9. 2009\n",
       "10. 2010\n",
       "11. 2011\n",
       "12. 2012\n",
       "13. 2013\n",
       "14. 2014\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 14 × 1</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>x</th></tr>\n",
       "\t<tr><th scope=col>&lt;int&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>2001</td></tr>\n",
       "\t<tr><td>2002</td></tr>\n",
       "\t<tr><td>2003</td></tr>\n",
       "\t<tr><td>2004</td></tr>\n",
       "\t<tr><td>2005</td></tr>\n",
       "\t<tr><td>2006</td></tr>\n",
       "\t<tr><td>2007</td></tr>\n",
       "\t<tr><td>2008</td></tr>\n",
       "\t<tr><td>2009</td></tr>\n",
       "\t<tr><td>2010</td></tr>\n",
       "\t<tr><td>2011</td></tr>\n",
       "\t<tr><td>2012</td></tr>\n",
       "\t<tr><td>2013</td></tr>\n",
       "\t<tr><td>2014</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 14 × 1\n",
       "\\begin{tabular}{l}\n",
       " x\\\\\n",
       " <int>\\\\\n",
       "\\hline\n",
       "\t 2001\\\\\n",
       "\t 2002\\\\\n",
       "\t 2003\\\\\n",
       "\t 2004\\\\\n",
       "\t 2005\\\\\n",
       "\t 2006\\\\\n",
       "\t 2007\\\\\n",
       "\t 2008\\\\\n",
       "\t 2009\\\\\n",
       "\t 2010\\\\\n",
       "\t 2011\\\\\n",
       "\t 2012\\\\\n",
       "\t 2013\\\\\n",
       "\t 2014\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 14 × 1\n",
       "\n",
       "| x &lt;int&gt; |\n",
       "|---|\n",
       "| 2001 |\n",
       "| 2002 |\n",
       "| 2003 |\n",
       "| 2004 |\n",
       "| 2005 |\n",
       "| 2006 |\n",
       "| 2007 |\n",
       "| 2008 |\n",
       "| 2009 |\n",
       "| 2010 |\n",
       "| 2011 |\n",
       "| 2012 |\n",
       "| 2013 |\n",
       "| 2014 |\n",
       "\n"
      ],
      "text/plain": [
       "   x   \n",
       "1  2001\n",
       "2  2002\n",
       "3  2003\n",
       "4  2004\n",
       "5  2005\n",
       "6  2006\n",
       "7  2007\n",
       "8  2008\n",
       "9  2009\n",
       "10 2010\n",
       "11 2011\n",
       "12 2012\n",
       "13 2013\n",
       "14 2014"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The variables in a data frame can be accessed using the \n",
    "# instructions:\n",
    "\n",
    "dframe1$x\n",
    "dframe1['x']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " int [1:14] 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 ...\n",
      "'data.frame':\t14 obs. of  1 variable:\n",
      " $ x: int  2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 ...\n"
     ]
    }
   ],
   "source": [
    "# Observe, however, that they have different structures\n",
    "\n",
    "str(dframe1$x)\n",
    "str(dframe1['x'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The following objects are masked _by_ .GlobalEnv:\n",
      "\n",
      "    x, y\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>-1</li><li>-2</li><li>-3</li><li>-4</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item -1\n",
       "\\item -2\n",
       "\\item -3\n",
       "\\item -4\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. -1\n",
       "2. -2\n",
       "3. -3\n",
       "4. -4\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] -1 -2 -3 -4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>k</li><li>u</li><li>r</li><li>q</li><li>c</li><li>v</li><li>o</li><li>z</li><li>y</li><li>l</li><li>b</li><li>x</li><li>m</li><li>f</li></ol>\n",
       "\n",
       "<details>\n",
       "\t<summary style=display:list-item;cursor:pointer>\n",
       "\t\t<strong>Levels</strong>:\n",
       "\t</summary>\n",
       "\t<style>\n",
       "\t.list-inline {list-style: none; margin:0; padding: 0}\n",
       "\t.list-inline>li {display: inline-block}\n",
       "\t.list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "\t</style>\n",
       "\t<ol class=list-inline><li>'b'</li><li>'c'</li><li>'f'</li><li>'k'</li><li>'l'</li><li>'m'</li><li>'o'</li><li>'q'</li><li>'r'</li><li>'u'</li><li>'v'</li><li>'x'</li><li>'y'</li><li>'z'</li></ol>\n",
       "</details>"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item k\n",
       "\\item u\n",
       "\\item r\n",
       "\\item q\n",
       "\\item c\n",
       "\\item v\n",
       "\\item o\n",
       "\\item z\n",
       "\\item y\n",
       "\\item l\n",
       "\\item b\n",
       "\\item x\n",
       "\\item m\n",
       "\\item f\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\emph{Levels}: \\begin{enumerate*}\n",
       "\\item 'b'\n",
       "\\item 'c'\n",
       "\\item 'f'\n",
       "\\item 'k'\n",
       "\\item 'l'\n",
       "\\item 'm'\n",
       "\\item 'o'\n",
       "\\item 'q'\n",
       "\\item 'r'\n",
       "\\item 'u'\n",
       "\\item 'v'\n",
       "\\item 'x'\n",
       "\\item 'y'\n",
       "\\item 'z'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. k\n",
       "2. u\n",
       "3. r\n",
       "4. q\n",
       "5. c\n",
       "6. v\n",
       "7. o\n",
       "8. z\n",
       "9. y\n",
       "10. l\n",
       "11. b\n",
       "12. x\n",
       "13. m\n",
       "14. f\n",
       "\n",
       "\n",
       "\n",
       "**Levels**: 1. 'b'\n",
       "2. 'c'\n",
       "3. 'f'\n",
       "4. 'k'\n",
       "5. 'l'\n",
       "6. 'm'\n",
       "7. 'o'\n",
       "8. 'q'\n",
       "9. 'r'\n",
       "10. 'u'\n",
       "11. 'v'\n",
       "12. 'x'\n",
       "13. 'y'\n",
       "14. 'z'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] k u r q c v o z y l b x m f\n",
       "Levels: b c f k l m o q r u v x y z"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# In the first case we have a (row) vector with 14 components \n",
    "# while in the second the result is a data frame with one variable.\n",
    "\n",
    "# This syntax to access a variable in a data frame is cumbersome. \n",
    "# When the information on a data frame is used frequently, a \n",
    "# convenient resource is the function attach(object) which places \n",
    "# the object in a preferent place of the search path.\n",
    "\n",
    "attach(dframe1)\n",
    "x\n",
    "z1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'a'</li><li>'A'</li><li>'aa'</li><li>'ab'</li><li>'AB'</li><li>'b'</li><li>'B'</li><li>'ba'</li><li>'bb'</li><li>'cars'</li><li>'D'</li><li>'dframe1'</li><li>'f'</li><li>'fopinion'</li><li>'gender'</li><li>'iris.ctd'</li><li>'iris.means'</li><li>'iris3b'</li><li>'opinion'</li><li>'points.den'</li><li>'points.fd'</li><li>'points.x'</li><li>'pp'</li><li>'subjects'</li><li>'test1'</li><li>'test2'</li><li>'variables'</li><li>'ww'</li><li>'x'</li><li>'x1'</li><li>'xx'</li><li>'XX'</li><li>'xy'</li><li>'y'</li><li>'yy'</li><li>'YY'</li><li>'z'</li><li>'zz'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'a'\n",
       "\\item 'A'\n",
       "\\item 'aa'\n",
       "\\item 'ab'\n",
       "\\item 'AB'\n",
       "\\item 'b'\n",
       "\\item 'B'\n",
       "\\item 'ba'\n",
       "\\item 'bb'\n",
       "\\item 'cars'\n",
       "\\item 'D'\n",
       "\\item 'dframe1'\n",
       "\\item 'f'\n",
       "\\item 'fopinion'\n",
       "\\item 'gender'\n",
       "\\item 'iris.ctd'\n",
       "\\item 'iris.means'\n",
       "\\item 'iris3b'\n",
       "\\item 'opinion'\n",
       "\\item 'points.den'\n",
       "\\item 'points.fd'\n",
       "\\item 'points.x'\n",
       "\\item 'pp'\n",
       "\\item 'subjects'\n",
       "\\item 'test1'\n",
       "\\item 'test2'\n",
       "\\item 'variables'\n",
       "\\item 'ww'\n",
       "\\item 'x'\n",
       "\\item 'x1'\n",
       "\\item 'xx'\n",
       "\\item 'XX'\n",
       "\\item 'xy'\n",
       "\\item 'y'\n",
       "\\item 'yy'\n",
       "\\item 'YY'\n",
       "\\item 'z'\n",
       "\\item 'zz'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'a'\n",
       "2. 'A'\n",
       "3. 'aa'\n",
       "4. 'ab'\n",
       "5. 'AB'\n",
       "6. 'b'\n",
       "7. 'B'\n",
       "8. 'ba'\n",
       "9. 'bb'\n",
       "10. 'cars'\n",
       "11. 'D'\n",
       "12. 'dframe1'\n",
       "13. 'f'\n",
       "14. 'fopinion'\n",
       "15. 'gender'\n",
       "16. 'iris.ctd'\n",
       "17. 'iris.means'\n",
       "18. 'iris3b'\n",
       "19. 'opinion'\n",
       "20. 'points.den'\n",
       "21. 'points.fd'\n",
       "22. 'points.x'\n",
       "23. 'pp'\n",
       "24. 'subjects'\n",
       "25. 'test1'\n",
       "26. 'test2'\n",
       "27. 'variables'\n",
       "28. 'ww'\n",
       "29. 'x'\n",
       "30. 'x1'\n",
       "31. 'xx'\n",
       "32. 'XX'\n",
       "33. 'xy'\n",
       "34. 'y'\n",
       "35. 'yy'\n",
       "36. 'YY'\n",
       "37. 'z'\n",
       "38. 'zz'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \"a\"          \"A\"          \"aa\"         \"ab\"         \"AB\"        \n",
       " [6] \"b\"          \"B\"          \"ba\"         \"bb\"         \"cars\"      \n",
       "[11] \"D\"          \"dframe1\"    \"f\"          \"fopinion\"   \"gender\"    \n",
       "[16] \"iris.ctd\"   \"iris.means\" \"iris3b\"     \"opinion\"    \"points.den\"\n",
       "[21] \"points.fd\"  \"points.x\"   \"pp\"         \"subjects\"   \"test1\"     \n",
       "[26] \"test2\"      \"variables\"  \"ww\"         \"x\"          \"x1\"        \n",
       "[31] \"xx\"         \"XX\"         \"xy\"         \"y\"          \"yy\"        \n",
       "[36] \"YY\"         \"z\"          \"zz\"        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>2001</li><li>2002</li><li>2003</li><li>2004</li><li>2005</li><li>2006</li><li>2007</li><li>2008</li><li>2009</li><li>2010</li><li>2011</li><li>2012</li><li>2013</li><li>2014</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 2001\n",
       "\\item 2002\n",
       "\\item 2003\n",
       "\\item 2004\n",
       "\\item 2005\n",
       "\\item 2006\n",
       "\\item 2007\n",
       "\\item 2008\n",
       "\\item 2009\n",
       "\\item 2010\n",
       "\\item 2011\n",
       "\\item 2012\n",
       "\\item 2013\n",
       "\\item 2014\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 2001\n",
       "2. 2002\n",
       "3. 2003\n",
       "4. 2004\n",
       "5. 2005\n",
       "6. 2006\n",
       "7. 2007\n",
       "8. 2008\n",
       "9. 2009\n",
       "10. 2010\n",
       "11. 2011\n",
       "12. 2012\n",
       "13. 2013\n",
       "14. 2014\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Observe that we get a value for x is different from that in the \n",
    "# data frame dframe1. The reason for this is that there exists a \n",
    "# variable with the same name in the working directory and local \n",
    "# variables precede those obtained from the command attach(). \n",
    "# This was alerted by the warning we got when using the \n",
    "# attach(dframe1) command. To further explore this issue consider \n",
    "# the following commands\n",
    "\n",
    "ls()\n",
    "rm(x)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'.GlobalEnv'</li><li>'dframe1'</li><li>'mtcars'</li><li>'iris'</li><li>'jupyter:irkernel'</li><li>'package:stats'</li><li>'package:graphics'</li><li>'package:grDevices'</li><li>'package:utils'</li><li>'package:datasets'</li><li>'package:methods'</li><li>'Autoloads'</li><li>'package:base'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item '.GlobalEnv'\n",
       "\\item 'dframe1'\n",
       "\\item 'mtcars'\n",
       "\\item 'iris'\n",
       "\\item 'jupyter:irkernel'\n",
       "\\item 'package:stats'\n",
       "\\item 'package:graphics'\n",
       "\\item 'package:grDevices'\n",
       "\\item 'package:utils'\n",
       "\\item 'package:datasets'\n",
       "\\item 'package:methods'\n",
       "\\item 'Autoloads'\n",
       "\\item 'package:base'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. '.GlobalEnv'\n",
       "2. 'dframe1'\n",
       "3. 'mtcars'\n",
       "4. 'iris'\n",
       "5. 'jupyter:irkernel'\n",
       "6. 'package:stats'\n",
       "7. 'package:graphics'\n",
       "8. 'package:grDevices'\n",
       "9. 'package:utils'\n",
       "10. 'package:datasets'\n",
       "11. 'package:methods'\n",
       "12. 'Autoloads'\n",
       "13. 'package:base'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \".GlobalEnv\"        \"dframe1\"           \"mtcars\"           \n",
       " [4] \"iris\"              \"jupyter:irkernel\"  \"package:stats\"    \n",
       " [7] \"package:graphics\"  \"package:grDevices\" \"package:utils\"    \n",
       "[10] \"package:datasets\"  \"package:methods\"   \"Autoloads\"        \n",
       "[13] \"package:base\"     "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# After removing object \\texttt{x} from the working environment, \n",
    "# we get the correct answer from the attached data frame. Let us \n",
    "# now look at the effect of the attach function on the search path: \n",
    "\n",
    "search()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'.GlobalEnv'</li><li>'mtcars'</li><li>'iris'</li><li>'jupyter:irkernel'</li><li>'package:stats'</li><li>'package:graphics'</li><li>'package:grDevices'</li><li>'package:utils'</li><li>'package:datasets'</li><li>'package:methods'</li><li>'Autoloads'</li><li>'package:base'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item '.GlobalEnv'\n",
       "\\item 'mtcars'\n",
       "\\item 'iris'\n",
       "\\item 'jupyter:irkernel'\n",
       "\\item 'package:stats'\n",
       "\\item 'package:graphics'\n",
       "\\item 'package:grDevices'\n",
       "\\item 'package:utils'\n",
       "\\item 'package:datasets'\n",
       "\\item 'package:methods'\n",
       "\\item 'Autoloads'\n",
       "\\item 'package:base'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. '.GlobalEnv'\n",
       "2. 'mtcars'\n",
       "3. 'iris'\n",
       "4. 'jupyter:irkernel'\n",
       "5. 'package:stats'\n",
       "6. 'package:graphics'\n",
       "7. 'package:grDevices'\n",
       "8. 'package:utils'\n",
       "9. 'package:datasets'\n",
       "10. 'package:methods'\n",
       "11. 'Autoloads'\n",
       "12. 'package:base'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \".GlobalEnv\"        \"mtcars\"            \"iris\"             \n",
       " [4] \"jupyter:irkernel\"  \"package:stats\"     \"package:graphics\" \n",
       " [7] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n",
       "[10] \"package:methods\"   \"Autoloads\"         \"package:base\"     "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We see that dframe1 has been place in second position, just \n",
    "# after .GlobalEnv, which is the working directory. To eliminate \n",
    "# it from the search path we can use the detach() function:\n",
    "  \n",
    "detach(dframe1)\n",
    "search()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<dl>\n",
       "\t<dt>$names</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'x'</li><li>'y'</li><li>'z1'</li><li>'w'</li></ol>\n",
       "</dd>\n",
       "\t<dt>$class</dt>\n",
       "\t\t<dd>'data.frame'</dd>\n",
       "\t<dt>$row.names</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li></ol>\n",
       "</dd>\n",
       "</dl>\n"
      ],
      "text/latex": [
       "\\begin{description}\n",
       "\\item[\\$names] \\begin{enumerate*}\n",
       "\\item 'x'\n",
       "\\item 'y'\n",
       "\\item 'z1'\n",
       "\\item 'w'\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$class] 'data.frame'\n",
       "\\item[\\$row.names] \\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 6\n",
       "\\item 7\n",
       "\\item 8\n",
       "\\item 9\n",
       "\\item 10\n",
       "\\item 11\n",
       "\\item 12\n",
       "\\item 13\n",
       "\\item 14\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\end{description}\n"
      ],
      "text/markdown": [
       "$names\n",
       ":   1. 'x'\n",
       "2. 'y'\n",
       "3. 'z1'\n",
       "4. 'w'\n",
       "\n",
       "\n",
       "\n",
       "$class\n",
       ":   'data.frame'\n",
       "$row.names\n",
       ":   1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "6. 6\n",
       "7. 7\n",
       "8. 8\n",
       "9. 9\n",
       "10. 10\n",
       "11. 11\n",
       "12. 12\n",
       "13. 13\n",
       "14. 14\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "$names\n",
       "[1] \"x\"  \"y\"  \"z1\" \"w\" \n",
       "\n",
       "$class\n",
       "[1] \"data.frame\"\n",
       "\n",
       "$row.names\n",
       " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### attributes\n",
    "# The function attributes lists the characteristics of any object \n",
    "# in R, in particular data frames.\n",
    "\n",
    "attributes(dframe1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 6 × 2</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>body</th><th scope=col>brain</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>Mountain beaver</th><td>    1.35</td><td>  8.1</td></tr>\n",
       "\t<tr><th scope=row>Cow</th><td>  465.00</td><td>423.0</td></tr>\n",
       "\t<tr><th scope=row>Grey wolf</th><td>   36.33</td><td>119.5</td></tr>\n",
       "\t<tr><th scope=row>Goat</th><td>   27.66</td><td>115.0</td></tr>\n",
       "\t<tr><th scope=row>Guinea pig</th><td>    1.04</td><td>  5.5</td></tr>\n",
       "\t<tr><th scope=row>Dipliodocus</th><td>11700.00</td><td> 50.0</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 2\n",
       "\\begin{tabular}{r|ll}\n",
       "  & body & brain\\\\\n",
       "  & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\tMountain beaver &     1.35 &   8.1\\\\\n",
       "\tCow &   465.00 & 423.0\\\\\n",
       "\tGrey wolf &    36.33 & 119.5\\\\\n",
       "\tGoat &    27.66 & 115.0\\\\\n",
       "\tGuinea pig &     1.04 &   5.5\\\\\n",
       "\tDipliodocus & 11700.00 &  50.0\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 2\n",
       "\n",
       "| <!--/--> | body &lt;dbl&gt; | brain &lt;dbl&gt; |\n",
       "|---|---|---|\n",
       "| Mountain beaver |     1.35 |   8.1 |\n",
       "| Cow |   465.00 | 423.0 |\n",
       "| Grey wolf |    36.33 | 119.5 |\n",
       "| Goat |    27.66 | 115.0 |\n",
       "| Guinea pig |     1.04 |   5.5 |\n",
       "| Dipliodocus | 11700.00 |  50.0 |\n",
       "\n"
      ],
      "text/plain": [
       "                body     brain\n",
       "Mountain beaver     1.35   8.1\n",
       "Cow               465.00 423.0\n",
       "Grey wolf          36.33 119.5\n",
       "Goat               27.66 115.0\n",
       "Guinea pig          1.04   5.5\n",
       "Dipliodocus     11700.00  50.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 6 × 2</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>body</th><th scope=col>brain</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>Arctic fox</th><td>  3.385</td><td> 44.5</td></tr>\n",
       "\t<tr><th scope=row>Owl monkey</th><td>  0.480</td><td> 15.5</td></tr>\n",
       "\t<tr><th scope=row>Mountain beaver</th><td>  1.350</td><td>  8.1</td></tr>\n",
       "\t<tr><th scope=row>Cow</th><td>465.000</td><td>423.0</td></tr>\n",
       "\t<tr><th scope=row>Grey wolf</th><td> 36.330</td><td>119.5</td></tr>\n",
       "\t<tr><th scope=row>Goat</th><td> 27.660</td><td>115.0</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 2\n",
       "\\begin{tabular}{r|ll}\n",
       "  & body & brain\\\\\n",
       "  & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\tArctic fox &   3.385 &  44.5\\\\\n",
       "\tOwl monkey &   0.480 &  15.5\\\\\n",
       "\tMountain beaver &   1.350 &   8.1\\\\\n",
       "\tCow & 465.000 & 423.0\\\\\n",
       "\tGrey wolf &  36.330 & 119.5\\\\\n",
       "\tGoat &  27.660 & 115.0\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 2\n",
       "\n",
       "| <!--/--> | body &lt;dbl&gt; | brain &lt;dbl&gt; |\n",
       "|---|---|---|\n",
       "| Arctic fox |   3.385 |  44.5 |\n",
       "| Owl monkey |   0.480 |  15.5 |\n",
       "| Mountain beaver |   1.350 |   8.1 |\n",
       "| Cow | 465.000 | 423.0 |\n",
       "| Grey wolf |  36.330 | 119.5 |\n",
       "| Goat |  27.660 | 115.0 |\n",
       "\n"
      ],
      "text/plain": [
       "                body    brain\n",
       "Arctic fox        3.385  44.5\n",
       "Owl monkey        0.480  15.5\n",
       "Mountain beaver   1.350   8.1\n",
       "Cow             465.000 423.0\n",
       "Grey wolf        36.330 119.5\n",
       "Goat             27.660 115.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 23 × 5</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>Row.names</th><th scope=col>body.x</th><th scope=col>brain.x</th><th scope=col>body.y</th><th scope=col>brain.y</th></tr>\n",
       "\t<tr><th scope=col>&lt;I&lt;chr&gt;&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>African elephant</td><td>6654.000</td><td>5712.0</td><td>6654.000</td><td>5712.0</td></tr>\n",
       "\t<tr><td>Asian elephant  </td><td>2547.000</td><td>4603.0</td><td>2547.000</td><td>4603.0</td></tr>\n",
       "\t<tr><td>Cat             </td><td>   3.300</td><td>  25.6</td><td>   3.300</td><td>  25.6</td></tr>\n",
       "\t<tr><td>Chimpanzee      </td><td>  52.160</td><td> 440.0</td><td>  52.160</td><td> 440.0</td></tr>\n",
       "\t<tr><td>Cow             </td><td> 465.000</td><td> 423.0</td><td> 465.000</td><td> 423.0</td></tr>\n",
       "\t<tr><td>Donkey          </td><td> 187.100</td><td> 419.0</td><td> 187.100</td><td> 419.0</td></tr>\n",
       "\t<tr><td>Giraffe         </td><td> 529.000</td><td> 680.0</td><td> 529.000</td><td> 680.0</td></tr>\n",
       "\t<tr><td>Goat            </td><td>  27.660</td><td> 115.0</td><td>  27.660</td><td> 115.0</td></tr>\n",
       "\t<tr><td>Golden hamster  </td><td>   0.120</td><td>   1.0</td><td>   0.120</td><td>   1.0</td></tr>\n",
       "\t<tr><td>Gorilla         </td><td> 207.000</td><td> 406.0</td><td> 207.000</td><td> 406.0</td></tr>\n",
       "\t<tr><td>Grey wolf       </td><td>  36.330</td><td> 119.5</td><td>  36.330</td><td> 119.5</td></tr>\n",
       "\t<tr><td>Guinea pig      </td><td>   1.040</td><td>   5.5</td><td>   1.040</td><td>   5.5</td></tr>\n",
       "\t<tr><td>Horse           </td><td> 521.000</td><td> 655.0</td><td> 521.000</td><td> 655.0</td></tr>\n",
       "\t<tr><td>Human           </td><td>  62.000</td><td>1320.0</td><td>  62.000</td><td>1320.0</td></tr>\n",
       "\t<tr><td>Jaguar          </td><td> 100.000</td><td> 157.0</td><td> 100.000</td><td> 157.0</td></tr>\n",
       "\t<tr><td>Kangaroo        </td><td>  35.000</td><td>  56.0</td><td>  35.000</td><td>  56.0</td></tr>\n",
       "\t<tr><td>Mountain beaver </td><td>   1.350</td><td>   8.1</td><td>   1.350</td><td>   8.1</td></tr>\n",
       "\t<tr><td>Mouse           </td><td>   0.023</td><td>   0.4</td><td>   0.023</td><td>   0.4</td></tr>\n",
       "\t<tr><td>Pig             </td><td> 192.000</td><td> 180.0</td><td> 192.000</td><td> 180.0</td></tr>\n",
       "\t<tr><td>Rabbit          </td><td>   2.500</td><td>  12.1</td><td>   2.500</td><td>  12.1</td></tr>\n",
       "\t<tr><td>Rat             </td><td>   0.280</td><td>   1.9</td><td>   0.280</td><td>   1.9</td></tr>\n",
       "\t<tr><td>Rhesus monkey   </td><td>   6.800</td><td> 179.0</td><td>   6.800</td><td> 179.0</td></tr>\n",
       "\t<tr><td>Sheep           </td><td>  55.500</td><td> 175.0</td><td>  55.500</td><td> 175.0</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 23 × 5\n",
       "\\begin{tabular}{lllll}\n",
       " Row.names & body.x & brain.x & body.y & brain.y\\\\\n",
       " <I<chr>> & <dbl> & <dbl> & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t African elephant & 6654.000 & 5712.0 & 6654.000 & 5712.0\\\\\n",
       "\t Asian elephant   & 2547.000 & 4603.0 & 2547.000 & 4603.0\\\\\n",
       "\t Cat              &    3.300 &   25.6 &    3.300 &   25.6\\\\\n",
       "\t Chimpanzee       &   52.160 &  440.0 &   52.160 &  440.0\\\\\n",
       "\t Cow              &  465.000 &  423.0 &  465.000 &  423.0\\\\\n",
       "\t Donkey           &  187.100 &  419.0 &  187.100 &  419.0\\\\\n",
       "\t Giraffe          &  529.000 &  680.0 &  529.000 &  680.0\\\\\n",
       "\t Goat             &   27.660 &  115.0 &   27.660 &  115.0\\\\\n",
       "\t Golden hamster   &    0.120 &    1.0 &    0.120 &    1.0\\\\\n",
       "\t Gorilla          &  207.000 &  406.0 &  207.000 &  406.0\\\\\n",
       "\t Grey wolf        &   36.330 &  119.5 &   36.330 &  119.5\\\\\n",
       "\t Guinea pig       &    1.040 &    5.5 &    1.040 &    5.5\\\\\n",
       "\t Horse            &  521.000 &  655.0 &  521.000 &  655.0\\\\\n",
       "\t Human            &   62.000 & 1320.0 &   62.000 & 1320.0\\\\\n",
       "\t Jaguar           &  100.000 &  157.0 &  100.000 &  157.0\\\\\n",
       "\t Kangaroo         &   35.000 &   56.0 &   35.000 &   56.0\\\\\n",
       "\t Mountain beaver  &    1.350 &    8.1 &    1.350 &    8.1\\\\\n",
       "\t Mouse            &    0.023 &    0.4 &    0.023 &    0.4\\\\\n",
       "\t Pig              &  192.000 &  180.0 &  192.000 &  180.0\\\\\n",
       "\t Rabbit           &    2.500 &   12.1 &    2.500 &   12.1\\\\\n",
       "\t Rat              &    0.280 &    1.9 &    0.280 &    1.9\\\\\n",
       "\t Rhesus monkey    &    6.800 &  179.0 &    6.800 &  179.0\\\\\n",
       "\t Sheep            &   55.500 &  175.0 &   55.500 &  175.0\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 23 × 5\n",
       "\n",
       "| Row.names &lt;I&lt;chr&gt;&gt; | body.x &lt;dbl&gt; | brain.x &lt;dbl&gt; | body.y &lt;dbl&gt; | brain.y &lt;dbl&gt; |\n",
       "|---|---|---|---|---|\n",
       "| African elephant | 6654.000 | 5712.0 | 6654.000 | 5712.0 |\n",
       "| Asian elephant   | 2547.000 | 4603.0 | 2547.000 | 4603.0 |\n",
       "| Cat              |    3.300 |   25.6 |    3.300 |   25.6 |\n",
       "| Chimpanzee       |   52.160 |  440.0 |   52.160 |  440.0 |\n",
       "| Cow              |  465.000 |  423.0 |  465.000 |  423.0 |\n",
       "| Donkey           |  187.100 |  419.0 |  187.100 |  419.0 |\n",
       "| Giraffe          |  529.000 |  680.0 |  529.000 |  680.0 |\n",
       "| Goat             |   27.660 |  115.0 |   27.660 |  115.0 |\n",
       "| Golden hamster   |    0.120 |    1.0 |    0.120 |    1.0 |\n",
       "| Gorilla          |  207.000 |  406.0 |  207.000 |  406.0 |\n",
       "| Grey wolf        |   36.330 |  119.5 |   36.330 |  119.5 |\n",
       "| Guinea pig       |    1.040 |    5.5 |    1.040 |    5.5 |\n",
       "| Horse            |  521.000 |  655.0 |  521.000 |  655.0 |\n",
       "| Human            |   62.000 | 1320.0 |   62.000 | 1320.0 |\n",
       "| Jaguar           |  100.000 |  157.0 |  100.000 |  157.0 |\n",
       "| Kangaroo         |   35.000 |   56.0 |   35.000 |   56.0 |\n",
       "| Mountain beaver  |    1.350 |    8.1 |    1.350 |    8.1 |\n",
       "| Mouse            |    0.023 |    0.4 |    0.023 |    0.4 |\n",
       "| Pig              |  192.000 |  180.0 |  192.000 |  180.0 |\n",
       "| Rabbit           |    2.500 |   12.1 |    2.500 |   12.1 |\n",
       "| Rat              |    0.280 |    1.9 |    0.280 |    1.9 |\n",
       "| Rhesus monkey    |    6.800 |  179.0 |    6.800 |  179.0 |\n",
       "| Sheep            |   55.500 |  175.0 |   55.500 |  175.0 |\n",
       "\n"
      ],
      "text/plain": [
       "   Row.names        body.x   brain.x body.y   brain.y\n",
       "1  African elephant 6654.000 5712.0  6654.000 5712.0 \n",
       "2  Asian elephant   2547.000 4603.0  2547.000 4603.0 \n",
       "3  Cat                 3.300   25.6     3.300   25.6 \n",
       "4  Chimpanzee         52.160  440.0    52.160  440.0 \n",
       "5  Cow               465.000  423.0   465.000  423.0 \n",
       "6  Donkey            187.100  419.0   187.100  419.0 \n",
       "7  Giraffe           529.000  680.0   529.000  680.0 \n",
       "8  Goat               27.660  115.0    27.660  115.0 \n",
       "9  Golden hamster      0.120    1.0     0.120    1.0 \n",
       "10 Gorilla           207.000  406.0   207.000  406.0 \n",
       "11 Grey wolf          36.330  119.5    36.330  119.5 \n",
       "12 Guinea pig          1.040    5.5     1.040    5.5 \n",
       "13 Horse             521.000  655.0   521.000  655.0 \n",
       "14 Human              62.000 1320.0    62.000 1320.0 \n",
       "15 Jaguar            100.000  157.0   100.000  157.0 \n",
       "16 Kangaroo           35.000   56.0    35.000   56.0 \n",
       "17 Mountain beaver     1.350    8.1     1.350    8.1 \n",
       "18 Mouse               0.023    0.4     0.023    0.4 \n",
       "19 Pig               192.000  180.0   192.000  180.0 \n",
       "20 Rabbit              2.500   12.1     2.500   12.1 \n",
       "21 Rat                 0.280    1.9     0.280    1.9 \n",
       "22 Rhesus monkey       6.800  179.0     6.800  179.0 \n",
       "23 Sheep              55.500  175.0    55.500  175.0 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### merge\n",
    "# The merge function allows you to merge two data frames based on \n",
    "# the common values of certain columns or rows. To see an example \n",
    "# let's use the Animals and mammals datasets from the MASS package.\n",
    "# The former has the average brain and body weight for 28 species \n",
    "# of terrestrial animals while the latter has the same information \n",
    "# for 62 species of terrestrial mammals.\n",
    "\n",
    "library(MASS)\n",
    "head(Animals)\n",
    "head(mammals)\n",
    "merge(Animals,mammals,by = 'row.names')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'data.frame':\t200 obs. of  8 variables:\n",
      " $ sp   : Factor w/ 2 levels \"B\",\"O\": 1 1 1 1 1 1 1 1 1 1 ...\n",
      " $ sex  : Factor w/ 2 levels \"F\",\"M\": 2 2 2 2 2 2 2 2 2 2 ...\n",
      " $ index: int  1 2 3 4 5 6 7 8 9 10 ...\n",
      " $ FL   : num  8.1 8.8 9.2 9.6 9.8 10.8 11.1 11.6 11.8 11.8 ...\n",
      " $ RW   : num  6.7 7.7 7.8 7.9 8 9 9.9 9.1 9.6 10.5 ...\n",
      " $ CL   : num  16.1 18.1 19 20.1 20.3 23 23.8 24.5 24.2 25.2 ...\n",
      " $ CW   : num  19 20.8 22.4 23.1 23 26.5 27.1 28.4 27.8 29.3 ...\n",
      " $ BD   : num  7 7.4 7.7 8.2 8.2 9.8 9.8 10.4 9.7 10.3 ...\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 4 × 7</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>sp</th><th scope=col>sex</th><th scope=col>FL</th><th scope=col>RW</th><th scope=col>CL</th><th scope=col>CW</th><th scope=col>BD</th></tr>\n",
       "\t<tr><th scope=col>&lt;fct&gt;</th><th scope=col>&lt;fct&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>B</td><td>F</td><td>13.15</td><td>12.20</td><td>27.90</td><td>32.35</td><td>11.60</td></tr>\n",
       "\t<tr><td>O</td><td>F</td><td>18.00</td><td>14.65</td><td>34.70</td><td>39.55</td><td>15.65</td></tr>\n",
       "\t<tr><td>B</td><td>M</td><td>15.10</td><td>11.70</td><td>32.45</td><td>37.10</td><td>13.60</td></tr>\n",
       "\t<tr><td>O</td><td>M</td><td>16.70</td><td>12.10</td><td>33.35</td><td>36.30</td><td>15.00</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 4 × 7\n",
       "\\begin{tabular}{lllllll}\n",
       " sp & sex & FL & RW & CL & CW & BD\\\\\n",
       " <fct> & <fct> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t B & F & 13.15 & 12.20 & 27.90 & 32.35 & 11.60\\\\\n",
       "\t O & F & 18.00 & 14.65 & 34.70 & 39.55 & 15.65\\\\\n",
       "\t B & M & 15.10 & 11.70 & 32.45 & 37.10 & 13.60\\\\\n",
       "\t O & M & 16.70 & 12.10 & 33.35 & 36.30 & 15.00\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 4 × 7\n",
       "\n",
       "| sp &lt;fct&gt; | sex &lt;fct&gt; | FL &lt;dbl&gt; | RW &lt;dbl&gt; | CL &lt;dbl&gt; | CW &lt;dbl&gt; | BD &lt;dbl&gt; |\n",
       "|---|---|---|---|---|---|---|\n",
       "| B | F | 13.15 | 12.20 | 27.90 | 32.35 | 11.60 |\n",
       "| O | F | 18.00 | 14.65 | 34.70 | 39.55 | 15.65 |\n",
       "| B | M | 15.10 | 11.70 | 32.45 | 37.10 | 13.60 |\n",
       "| O | M | 16.70 | 12.10 | 33.35 | 36.30 | 15.00 |\n",
       "\n"
      ],
      "text/plain": [
       "  sp sex FL    RW    CL    CW    BD   \n",
       "1 B  F   13.15 12.20 27.90 32.35 11.60\n",
       "2 O  F   18.00 14.65 34.70 39.55 15.65\n",
       "3 B  M   15.10 11.70 32.45 37.10 13.60\n",
       "4 O  M   16.70 12.10 33.35 36.30 15.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### aggregate\n",
    "\n",
    "# The aggregate function splits the data into subsets, computes \n",
    "# summary statistics for each, and returns the result in a \n",
    "# convenient form. The syntax is \n",
    "###\n",
    "#agregate(x,by,FUN,...)\n",
    "###\n",
    "# where x is the data frame,  by is a list of the elements \n",
    "# that determine the groups and FUN is the functión to be used.\n",
    "\n",
    "str(crabs)\n",
    "aggregate(crabs[, 4:8], list(sp=crabs$sp,sex=crabs$sex), median)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 200 × 8</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>sp</th><th scope=col>sex</th><th scope=col>index</th><th scope=col>FL</th><th scope=col>RW</th><th scope=col>CL</th><th scope=col>CW</th><th scope=col>BD</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;fct&gt;</th><th scope=col>&lt;fct&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>B</td><td>M</td><td> 1</td><td> 8.1</td><td> 6.7</td><td>16.1</td><td>19.0</td><td> 7.0</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>B</td><td>M</td><td> 2</td><td> 8.8</td><td> 7.7</td><td>18.1</td><td>20.8</td><td> 7.4</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>B</td><td>M</td><td> 3</td><td> 9.2</td><td> 7.8</td><td>19.0</td><td>22.4</td><td> 7.7</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>B</td><td>M</td><td> 4</td><td> 9.6</td><td> 7.9</td><td>20.1</td><td>23.1</td><td> 8.2</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>B</td><td>M</td><td> 5</td><td> 9.8</td><td> 8.0</td><td>20.3</td><td>23.0</td><td> 8.2</td></tr>\n",
       "\t<tr><th scope=row>6</th><td>B</td><td>M</td><td> 6</td><td>10.8</td><td> 9.0</td><td>23.0</td><td>26.5</td><td> 9.8</td></tr>\n",
       "\t<tr><th scope=row>7</th><td>B</td><td>M</td><td> 7</td><td>11.1</td><td> 9.9</td><td>23.8</td><td>27.1</td><td> 9.8</td></tr>\n",
       "\t<tr><th scope=row>8</th><td>B</td><td>M</td><td> 8</td><td>11.6</td><td> 9.1</td><td>24.5</td><td>28.4</td><td>10.4</td></tr>\n",
       "\t<tr><th scope=row>9</th><td>B</td><td>M</td><td> 9</td><td>11.8</td><td> 9.6</td><td>24.2</td><td>27.8</td><td> 9.7</td></tr>\n",
       "\t<tr><th scope=row>10</th><td>B</td><td>M</td><td>10</td><td>11.8</td><td>10.5</td><td>25.2</td><td>29.3</td><td>10.3</td></tr>\n",
       "\t<tr><th scope=row>11</th><td>B</td><td>M</td><td>11</td><td>12.2</td><td>10.8</td><td>27.3</td><td>31.6</td><td>10.9</td></tr>\n",
       "\t<tr><th scope=row>12</th><td>B</td><td>M</td><td>12</td><td>12.3</td><td>11.0</td><td>26.8</td><td>31.5</td><td>11.4</td></tr>\n",
       "\t<tr><th scope=row>13</th><td>B</td><td>M</td><td>13</td><td>12.6</td><td>10.0</td><td>27.7</td><td>31.7</td><td>11.4</td></tr>\n",
       "\t<tr><th scope=row>14</th><td>B</td><td>M</td><td>14</td><td>12.8</td><td>10.2</td><td>27.2</td><td>31.8</td><td>10.9</td></tr>\n",
       "\t<tr><th scope=row>15</th><td>B</td><td>M</td><td>15</td><td>12.8</td><td>10.9</td><td>27.4</td><td>31.5</td><td>11.0</td></tr>\n",
       "\t<tr><th scope=row>16</th><td>B</td><td>M</td><td>16</td><td>12.9</td><td>11.0</td><td>26.8</td><td>30.9</td><td>11.4</td></tr>\n",
       "\t<tr><th scope=row>17</th><td>B</td><td>M</td><td>17</td><td>13.1</td><td>10.6</td><td>28.2</td><td>32.3</td><td>11.0</td></tr>\n",
       "\t<tr><th scope=row>18</th><td>B</td><td>M</td><td>18</td><td>13.1</td><td>10.9</td><td>28.3</td><td>32.4</td><td>11.2</td></tr>\n",
       "\t<tr><th scope=row>19</th><td>B</td><td>M</td><td>19</td><td>13.3</td><td>11.1</td><td>27.8</td><td>32.3</td><td>11.3</td></tr>\n",
       "\t<tr><th scope=row>20</th><td>B</td><td>M</td><td>20</td><td>13.9</td><td>11.1</td><td>29.2</td><td>33.3</td><td>12.1</td></tr>\n",
       "\t<tr><th scope=row>21</th><td>B</td><td>M</td><td>21</td><td>14.3</td><td>11.6</td><td>31.3</td><td>35.5</td><td>12.7</td></tr>\n",
       "\t<tr><th scope=row>22</th><td>B</td><td>M</td><td>22</td><td>14.6</td><td>11.3</td><td>31.9</td><td>36.4</td><td>13.7</td></tr>\n",
       "\t<tr><th scope=row>23</th><td>B</td><td>M</td><td>23</td><td>15.0</td><td>10.9</td><td>31.4</td><td>36.4</td><td>13.2</td></tr>\n",
       "\t<tr><th scope=row>24</th><td>B</td><td>M</td><td>24</td><td>15.0</td><td>11.5</td><td>32.4</td><td>37.0</td><td>13.4</td></tr>\n",
       "\t<tr><th scope=row>25</th><td>B</td><td>M</td><td>25</td><td>15.0</td><td>11.9</td><td>32.5</td><td>37.2</td><td>13.6</td></tr>\n",
       "\t<tr><th scope=row>26</th><td>B</td><td>M</td><td>26</td><td>15.2</td><td>12.1</td><td>32.3</td><td>36.7</td><td>13.6</td></tr>\n",
       "\t<tr><th scope=row>27</th><td>B</td><td>M</td><td>27</td><td>15.4</td><td>11.8</td><td>33.0</td><td>37.5</td><td>13.6</td></tr>\n",
       "\t<tr><th scope=row>28</th><td>B</td><td>M</td><td>28</td><td>15.7</td><td>12.6</td><td>35.8</td><td>40.3</td><td>14.5</td></tr>\n",
       "\t<tr><th scope=row>29</th><td>B</td><td>M</td><td>29</td><td>15.9</td><td>12.7</td><td>34.0</td><td>38.9</td><td>14.2</td></tr>\n",
       "\t<tr><th scope=row>30</th><td>B</td><td>M</td><td>30</td><td>16.1</td><td>11.6</td><td>33.8</td><td>39.0</td><td>14.4</td></tr>\n",
       "\t<tr><th scope=row>⋮</th><td>⋮</td><td>⋮</td><td>⋮</td><td>⋮</td><td>⋮</td><td>⋮</td><td>⋮</td><td>⋮</td></tr>\n",
       "\t<tr><th scope=row>171</th><td>O</td><td>F</td><td>21</td><td>17.5</td><td>14.3</td><td>34.5</td><td>39.6</td><td>15.6</td></tr>\n",
       "\t<tr><th scope=row>172</th><td>O</td><td>F</td><td>22</td><td>17.5</td><td>14.4</td><td>34.5</td><td>39.0</td><td>16.0</td></tr>\n",
       "\t<tr><th scope=row>173</th><td>O</td><td>F</td><td>23</td><td>17.5</td><td>14.7</td><td>33.3</td><td>37.6</td><td>14.6</td></tr>\n",
       "\t<tr><th scope=row>174</th><td>O</td><td>F</td><td>24</td><td>17.6</td><td>14.0</td><td>34.0</td><td>38.6</td><td>15.5</td></tr>\n",
       "\t<tr><th scope=row>175</th><td>O</td><td>F</td><td>25</td><td>18.0</td><td>14.9</td><td>34.7</td><td>39.5</td><td>15.7</td></tr>\n",
       "\t<tr><th scope=row>176</th><td>O</td><td>F</td><td>26</td><td>18.0</td><td>16.3</td><td>37.9</td><td>43.0</td><td>17.2</td></tr>\n",
       "\t<tr><th scope=row>177</th><td>O</td><td>F</td><td>27</td><td>18.3</td><td>15.7</td><td>35.1</td><td>40.5</td><td>16.1</td></tr>\n",
       "\t<tr><th scope=row>178</th><td>O</td><td>F</td><td>28</td><td>18.4</td><td>15.5</td><td>35.6</td><td>40.0</td><td>15.9</td></tr>\n",
       "\t<tr><th scope=row>179</th><td>O</td><td>F</td><td>29</td><td>18.4</td><td>15.7</td><td>36.5</td><td>41.6</td><td>16.4</td></tr>\n",
       "\t<tr><th scope=row>180</th><td>O</td><td>F</td><td>30</td><td>18.5</td><td>14.6</td><td>37.0</td><td>42.0</td><td>16.6</td></tr>\n",
       "\t<tr><th scope=row>181</th><td>O</td><td>F</td><td>31</td><td>18.6</td><td>14.5</td><td>34.7</td><td>39.4</td><td>15.0</td></tr>\n",
       "\t<tr><th scope=row>182</th><td>O</td><td>F</td><td>32</td><td>18.8</td><td>15.2</td><td>35.8</td><td>40.5</td><td>16.6</td></tr>\n",
       "\t<tr><th scope=row>183</th><td>O</td><td>F</td><td>33</td><td>18.9</td><td>16.7</td><td>36.3</td><td>41.7</td><td>15.3</td></tr>\n",
       "\t<tr><th scope=row>184</th><td>O</td><td>F</td><td>34</td><td>19.1</td><td>16.0</td><td>37.8</td><td>42.3</td><td>16.8</td></tr>\n",
       "\t<tr><th scope=row>185</th><td>O</td><td>F</td><td>35</td><td>19.1</td><td>16.3</td><td>37.9</td><td>42.6</td><td>17.2</td></tr>\n",
       "\t<tr><th scope=row>186</th><td>O</td><td>F</td><td>36</td><td>19.7</td><td>16.7</td><td>39.9</td><td>43.6</td><td>18.2</td></tr>\n",
       "\t<tr><th scope=row>187</th><td>O</td><td>F</td><td>37</td><td>19.9</td><td>16.6</td><td>39.4</td><td>43.9</td><td>17.9</td></tr>\n",
       "\t<tr><th scope=row>188</th><td>O</td><td>F</td><td>38</td><td>19.9</td><td>17.9</td><td>40.1</td><td>46.4</td><td>17.9</td></tr>\n",
       "\t<tr><th scope=row>189</th><td>O</td><td>F</td><td>39</td><td>20.0</td><td>16.7</td><td>40.4</td><td>45.1</td><td>17.7</td></tr>\n",
       "\t<tr><th scope=row>190</th><td>O</td><td>F</td><td>40</td><td>20.1</td><td>17.2</td><td>39.8</td><td>44.1</td><td>18.6</td></tr>\n",
       "\t<tr><th scope=row>191</th><td>O</td><td>F</td><td>41</td><td>20.3</td><td>16.0</td><td>39.4</td><td>44.1</td><td>18.0</td></tr>\n",
       "\t<tr><th scope=row>192</th><td>O</td><td>F</td><td>42</td><td>20.5</td><td>17.5</td><td>40.0</td><td>45.5</td><td>19.2</td></tr>\n",
       "\t<tr><th scope=row>193</th><td>O</td><td>F</td><td>43</td><td>20.6</td><td>17.5</td><td>41.5</td><td>46.2</td><td>19.2</td></tr>\n",
       "\t<tr><th scope=row>194</th><td>O</td><td>F</td><td>44</td><td>20.9</td><td>16.5</td><td>39.9</td><td>44.7</td><td>17.5</td></tr>\n",
       "\t<tr><th scope=row>195</th><td>O</td><td>F</td><td>45</td><td>21.3</td><td>18.4</td><td>43.8</td><td>48.4</td><td>20.0</td></tr>\n",
       "\t<tr><th scope=row>196</th><td>O</td><td>F</td><td>46</td><td>21.4</td><td>18.0</td><td>41.2</td><td>46.2</td><td>18.7</td></tr>\n",
       "\t<tr><th scope=row>197</th><td>O</td><td>F</td><td>47</td><td>21.7</td><td>17.1</td><td>41.7</td><td>47.2</td><td>19.6</td></tr>\n",
       "\t<tr><th scope=row>198</th><td>O</td><td>F</td><td>48</td><td>21.9</td><td>17.2</td><td>42.6</td><td>47.4</td><td>19.5</td></tr>\n",
       "\t<tr><th scope=row>199</th><td>O</td><td>F</td><td>49</td><td>22.5</td><td>17.2</td><td>43.0</td><td>48.7</td><td>19.8</td></tr>\n",
       "\t<tr><th scope=row>200</th><td>O</td><td>F</td><td>50</td><td>23.1</td><td>20.2</td><td>46.2</td><td>52.5</td><td>21.1</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 200 × 8\n",
       "\\begin{tabular}{r|llllllll}\n",
       "  & sp & sex & index & FL & RW & CL & CW & BD\\\\\n",
       "  & <fct> & <fct> & <int> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t1 & B & M &  1 &  8.1 &  6.7 & 16.1 & 19.0 &  7.0\\\\\n",
       "\t2 & B & M &  2 &  8.8 &  7.7 & 18.1 & 20.8 &  7.4\\\\\n",
       "\t3 & B & M &  3 &  9.2 &  7.8 & 19.0 & 22.4 &  7.7\\\\\n",
       "\t4 & B & M &  4 &  9.6 &  7.9 & 20.1 & 23.1 &  8.2\\\\\n",
       "\t5 & B & M &  5 &  9.8 &  8.0 & 20.3 & 23.0 &  8.2\\\\\n",
       "\t6 & B & M &  6 & 10.8 &  9.0 & 23.0 & 26.5 &  9.8\\\\\n",
       "\t7 & B & M &  7 & 11.1 &  9.9 & 23.8 & 27.1 &  9.8\\\\\n",
       "\t8 & B & M &  8 & 11.6 &  9.1 & 24.5 & 28.4 & 10.4\\\\\n",
       "\t9 & B & M &  9 & 11.8 &  9.6 & 24.2 & 27.8 &  9.7\\\\\n",
       "\t10 & B & M & 10 & 11.8 & 10.5 & 25.2 & 29.3 & 10.3\\\\\n",
       "\t11 & B & M & 11 & 12.2 & 10.8 & 27.3 & 31.6 & 10.9\\\\\n",
       "\t12 & B & M & 12 & 12.3 & 11.0 & 26.8 & 31.5 & 11.4\\\\\n",
       "\t13 & B & M & 13 & 12.6 & 10.0 & 27.7 & 31.7 & 11.4\\\\\n",
       "\t14 & B & M & 14 & 12.8 & 10.2 & 27.2 & 31.8 & 10.9\\\\\n",
       "\t15 & B & M & 15 & 12.8 & 10.9 & 27.4 & 31.5 & 11.0\\\\\n",
       "\t16 & B & M & 16 & 12.9 & 11.0 & 26.8 & 30.9 & 11.4\\\\\n",
       "\t17 & B & M & 17 & 13.1 & 10.6 & 28.2 & 32.3 & 11.0\\\\\n",
       "\t18 & B & M & 18 & 13.1 & 10.9 & 28.3 & 32.4 & 11.2\\\\\n",
       "\t19 & B & M & 19 & 13.3 & 11.1 & 27.8 & 32.3 & 11.3\\\\\n",
       "\t20 & B & M & 20 & 13.9 & 11.1 & 29.2 & 33.3 & 12.1\\\\\n",
       "\t21 & B & M & 21 & 14.3 & 11.6 & 31.3 & 35.5 & 12.7\\\\\n",
       "\t22 & B & M & 22 & 14.6 & 11.3 & 31.9 & 36.4 & 13.7\\\\\n",
       "\t23 & B & M & 23 & 15.0 & 10.9 & 31.4 & 36.4 & 13.2\\\\\n",
       "\t24 & B & M & 24 & 15.0 & 11.5 & 32.4 & 37.0 & 13.4\\\\\n",
       "\t25 & B & M & 25 & 15.0 & 11.9 & 32.5 & 37.2 & 13.6\\\\\n",
       "\t26 & B & M & 26 & 15.2 & 12.1 & 32.3 & 36.7 & 13.6\\\\\n",
       "\t27 & B & M & 27 & 15.4 & 11.8 & 33.0 & 37.5 & 13.6\\\\\n",
       "\t28 & B & M & 28 & 15.7 & 12.6 & 35.8 & 40.3 & 14.5\\\\\n",
       "\t29 & B & M & 29 & 15.9 & 12.7 & 34.0 & 38.9 & 14.2\\\\\n",
       "\t30 & B & M & 30 & 16.1 & 11.6 & 33.8 & 39.0 & 14.4\\\\\n",
       "\t⋮ & ⋮ & ⋮ & ⋮ & ⋮ & ⋮ & ⋮ & ⋮ & ⋮\\\\\n",
       "\t171 & O & F & 21 & 17.5 & 14.3 & 34.5 & 39.6 & 15.6\\\\\n",
       "\t172 & O & F & 22 & 17.5 & 14.4 & 34.5 & 39.0 & 16.0\\\\\n",
       "\t173 & O & F & 23 & 17.5 & 14.7 & 33.3 & 37.6 & 14.6\\\\\n",
       "\t174 & O & F & 24 & 17.6 & 14.0 & 34.0 & 38.6 & 15.5\\\\\n",
       "\t175 & O & F & 25 & 18.0 & 14.9 & 34.7 & 39.5 & 15.7\\\\\n",
       "\t176 & O & F & 26 & 18.0 & 16.3 & 37.9 & 43.0 & 17.2\\\\\n",
       "\t177 & O & F & 27 & 18.3 & 15.7 & 35.1 & 40.5 & 16.1\\\\\n",
       "\t178 & O & F & 28 & 18.4 & 15.5 & 35.6 & 40.0 & 15.9\\\\\n",
       "\t179 & O & F & 29 & 18.4 & 15.7 & 36.5 & 41.6 & 16.4\\\\\n",
       "\t180 & O & F & 30 & 18.5 & 14.6 & 37.0 & 42.0 & 16.6\\\\\n",
       "\t181 & O & F & 31 & 18.6 & 14.5 & 34.7 & 39.4 & 15.0\\\\\n",
       "\t182 & O & F & 32 & 18.8 & 15.2 & 35.8 & 40.5 & 16.6\\\\\n",
       "\t183 & O & F & 33 & 18.9 & 16.7 & 36.3 & 41.7 & 15.3\\\\\n",
       "\t184 & O & F & 34 & 19.1 & 16.0 & 37.8 & 42.3 & 16.8\\\\\n",
       "\t185 & O & F & 35 & 19.1 & 16.3 & 37.9 & 42.6 & 17.2\\\\\n",
       "\t186 & O & F & 36 & 19.7 & 16.7 & 39.9 & 43.6 & 18.2\\\\\n",
       "\t187 & O & F & 37 & 19.9 & 16.6 & 39.4 & 43.9 & 17.9\\\\\n",
       "\t188 & O & F & 38 & 19.9 & 17.9 & 40.1 & 46.4 & 17.9\\\\\n",
       "\t189 & O & F & 39 & 20.0 & 16.7 & 40.4 & 45.1 & 17.7\\\\\n",
       "\t190 & O & F & 40 & 20.1 & 17.2 & 39.8 & 44.1 & 18.6\\\\\n",
       "\t191 & O & F & 41 & 20.3 & 16.0 & 39.4 & 44.1 & 18.0\\\\\n",
       "\t192 & O & F & 42 & 20.5 & 17.5 & 40.0 & 45.5 & 19.2\\\\\n",
       "\t193 & O & F & 43 & 20.6 & 17.5 & 41.5 & 46.2 & 19.2\\\\\n",
       "\t194 & O & F & 44 & 20.9 & 16.5 & 39.9 & 44.7 & 17.5\\\\\n",
       "\t195 & O & F & 45 & 21.3 & 18.4 & 43.8 & 48.4 & 20.0\\\\\n",
       "\t196 & O & F & 46 & 21.4 & 18.0 & 41.2 & 46.2 & 18.7\\\\\n",
       "\t197 & O & F & 47 & 21.7 & 17.1 & 41.7 & 47.2 & 19.6\\\\\n",
       "\t198 & O & F & 48 & 21.9 & 17.2 & 42.6 & 47.4 & 19.5\\\\\n",
       "\t199 & O & F & 49 & 22.5 & 17.2 & 43.0 & 48.7 & 19.8\\\\\n",
       "\t200 & O & F & 50 & 23.1 & 20.2 & 46.2 & 52.5 & 21.1\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 200 × 8\n",
       "\n",
       "| <!--/--> | sp &lt;fct&gt; | sex &lt;fct&gt; | index &lt;int&gt; | FL &lt;dbl&gt; | RW &lt;dbl&gt; | CL &lt;dbl&gt; | CW &lt;dbl&gt; | BD &lt;dbl&gt; |\n",
       "|---|---|---|---|---|---|---|---|---|\n",
       "| 1 | B | M |  1 |  8.1 |  6.7 | 16.1 | 19.0 |  7.0 |\n",
       "| 2 | B | M |  2 |  8.8 |  7.7 | 18.1 | 20.8 |  7.4 |\n",
       "| 3 | B | M |  3 |  9.2 |  7.8 | 19.0 | 22.4 |  7.7 |\n",
       "| 4 | B | M |  4 |  9.6 |  7.9 | 20.1 | 23.1 |  8.2 |\n",
       "| 5 | B | M |  5 |  9.8 |  8.0 | 20.3 | 23.0 |  8.2 |\n",
       "| 6 | B | M |  6 | 10.8 |  9.0 | 23.0 | 26.5 |  9.8 |\n",
       "| 7 | B | M |  7 | 11.1 |  9.9 | 23.8 | 27.1 |  9.8 |\n",
       "| 8 | B | M |  8 | 11.6 |  9.1 | 24.5 | 28.4 | 10.4 |\n",
       "| 9 | B | M |  9 | 11.8 |  9.6 | 24.2 | 27.8 |  9.7 |\n",
       "| 10 | B | M | 10 | 11.8 | 10.5 | 25.2 | 29.3 | 10.3 |\n",
       "| 11 | B | M | 11 | 12.2 | 10.8 | 27.3 | 31.6 | 10.9 |\n",
       "| 12 | B | M | 12 | 12.3 | 11.0 | 26.8 | 31.5 | 11.4 |\n",
       "| 13 | B | M | 13 | 12.6 | 10.0 | 27.7 | 31.7 | 11.4 |\n",
       "| 14 | B | M | 14 | 12.8 | 10.2 | 27.2 | 31.8 | 10.9 |\n",
       "| 15 | B | M | 15 | 12.8 | 10.9 | 27.4 | 31.5 | 11.0 |\n",
       "| 16 | B | M | 16 | 12.9 | 11.0 | 26.8 | 30.9 | 11.4 |\n",
       "| 17 | B | M | 17 | 13.1 | 10.6 | 28.2 | 32.3 | 11.0 |\n",
       "| 18 | B | M | 18 | 13.1 | 10.9 | 28.3 | 32.4 | 11.2 |\n",
       "| 19 | B | M | 19 | 13.3 | 11.1 | 27.8 | 32.3 | 11.3 |\n",
       "| 20 | B | M | 20 | 13.9 | 11.1 | 29.2 | 33.3 | 12.1 |\n",
       "| 21 | B | M | 21 | 14.3 | 11.6 | 31.3 | 35.5 | 12.7 |\n",
       "| 22 | B | M | 22 | 14.6 | 11.3 | 31.9 | 36.4 | 13.7 |\n",
       "| 23 | B | M | 23 | 15.0 | 10.9 | 31.4 | 36.4 | 13.2 |\n",
       "| 24 | B | M | 24 | 15.0 | 11.5 | 32.4 | 37.0 | 13.4 |\n",
       "| 25 | B | M | 25 | 15.0 | 11.9 | 32.5 | 37.2 | 13.6 |\n",
       "| 26 | B | M | 26 | 15.2 | 12.1 | 32.3 | 36.7 | 13.6 |\n",
       "| 27 | B | M | 27 | 15.4 | 11.8 | 33.0 | 37.5 | 13.6 |\n",
       "| 28 | B | M | 28 | 15.7 | 12.6 | 35.8 | 40.3 | 14.5 |\n",
       "| 29 | B | M | 29 | 15.9 | 12.7 | 34.0 | 38.9 | 14.2 |\n",
       "| 30 | B | M | 30 | 16.1 | 11.6 | 33.8 | 39.0 | 14.4 |\n",
       "| ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ |\n",
       "| 171 | O | F | 21 | 17.5 | 14.3 | 34.5 | 39.6 | 15.6 |\n",
       "| 172 | O | F | 22 | 17.5 | 14.4 | 34.5 | 39.0 | 16.0 |\n",
       "| 173 | O | F | 23 | 17.5 | 14.7 | 33.3 | 37.6 | 14.6 |\n",
       "| 174 | O | F | 24 | 17.6 | 14.0 | 34.0 | 38.6 | 15.5 |\n",
       "| 175 | O | F | 25 | 18.0 | 14.9 | 34.7 | 39.5 | 15.7 |\n",
       "| 176 | O | F | 26 | 18.0 | 16.3 | 37.9 | 43.0 | 17.2 |\n",
       "| 177 | O | F | 27 | 18.3 | 15.7 | 35.1 | 40.5 | 16.1 |\n",
       "| 178 | O | F | 28 | 18.4 | 15.5 | 35.6 | 40.0 | 15.9 |\n",
       "| 179 | O | F | 29 | 18.4 | 15.7 | 36.5 | 41.6 | 16.4 |\n",
       "| 180 | O | F | 30 | 18.5 | 14.6 | 37.0 | 42.0 | 16.6 |\n",
       "| 181 | O | F | 31 | 18.6 | 14.5 | 34.7 | 39.4 | 15.0 |\n",
       "| 182 | O | F | 32 | 18.8 | 15.2 | 35.8 | 40.5 | 16.6 |\n",
       "| 183 | O | F | 33 | 18.9 | 16.7 | 36.3 | 41.7 | 15.3 |\n",
       "| 184 | O | F | 34 | 19.1 | 16.0 | 37.8 | 42.3 | 16.8 |\n",
       "| 185 | O | F | 35 | 19.1 | 16.3 | 37.9 | 42.6 | 17.2 |\n",
       "| 186 | O | F | 36 | 19.7 | 16.7 | 39.9 | 43.6 | 18.2 |\n",
       "| 187 | O | F | 37 | 19.9 | 16.6 | 39.4 | 43.9 | 17.9 |\n",
       "| 188 | O | F | 38 | 19.9 | 17.9 | 40.1 | 46.4 | 17.9 |\n",
       "| 189 | O | F | 39 | 20.0 | 16.7 | 40.4 | 45.1 | 17.7 |\n",
       "| 190 | O | F | 40 | 20.1 | 17.2 | 39.8 | 44.1 | 18.6 |\n",
       "| 191 | O | F | 41 | 20.3 | 16.0 | 39.4 | 44.1 | 18.0 |\n",
       "| 192 | O | F | 42 | 20.5 | 17.5 | 40.0 | 45.5 | 19.2 |\n",
       "| 193 | O | F | 43 | 20.6 | 17.5 | 41.5 | 46.2 | 19.2 |\n",
       "| 194 | O | F | 44 | 20.9 | 16.5 | 39.9 | 44.7 | 17.5 |\n",
       "| 195 | O | F | 45 | 21.3 | 18.4 | 43.8 | 48.4 | 20.0 |\n",
       "| 196 | O | F | 46 | 21.4 | 18.0 | 41.2 | 46.2 | 18.7 |\n",
       "| 197 | O | F | 47 | 21.7 | 17.1 | 41.7 | 47.2 | 19.6 |\n",
       "| 198 | O | F | 48 | 21.9 | 17.2 | 42.6 | 47.4 | 19.5 |\n",
       "| 199 | O | F | 49 | 22.5 | 17.2 | 43.0 | 48.7 | 19.8 |\n",
       "| 200 | O | F | 50 | 23.1 | 20.2 | 46.2 | 52.5 | 21.1 |\n",
       "\n"
      ],
      "text/plain": [
       "    sp sex index FL   RW   CL   CW   BD  \n",
       "1   B  M    1     8.1  6.7 16.1 19.0  7.0\n",
       "2   B  M    2     8.8  7.7 18.1 20.8  7.4\n",
       "3   B  M    3     9.2  7.8 19.0 22.4  7.7\n",
       "4   B  M    4     9.6  7.9 20.1 23.1  8.2\n",
       "5   B  M    5     9.8  8.0 20.3 23.0  8.2\n",
       "6   B  M    6    10.8  9.0 23.0 26.5  9.8\n",
       "7   B  M    7    11.1  9.9 23.8 27.1  9.8\n",
       "8   B  M    8    11.6  9.1 24.5 28.4 10.4\n",
       "9   B  M    9    11.8  9.6 24.2 27.8  9.7\n",
       "10  B  M   10    11.8 10.5 25.2 29.3 10.3\n",
       "11  B  M   11    12.2 10.8 27.3 31.6 10.9\n",
       "12  B  M   12    12.3 11.0 26.8 31.5 11.4\n",
       "13  B  M   13    12.6 10.0 27.7 31.7 11.4\n",
       "14  B  M   14    12.8 10.2 27.2 31.8 10.9\n",
       "15  B  M   15    12.8 10.9 27.4 31.5 11.0\n",
       "16  B  M   16    12.9 11.0 26.8 30.9 11.4\n",
       "17  B  M   17    13.1 10.6 28.2 32.3 11.0\n",
       "18  B  M   18    13.1 10.9 28.3 32.4 11.2\n",
       "19  B  M   19    13.3 11.1 27.8 32.3 11.3\n",
       "20  B  M   20    13.9 11.1 29.2 33.3 12.1\n",
       "21  B  M   21    14.3 11.6 31.3 35.5 12.7\n",
       "22  B  M   22    14.6 11.3 31.9 36.4 13.7\n",
       "23  B  M   23    15.0 10.9 31.4 36.4 13.2\n",
       "24  B  M   24    15.0 11.5 32.4 37.0 13.4\n",
       "25  B  M   25    15.0 11.9 32.5 37.2 13.6\n",
       "26  B  M   26    15.2 12.1 32.3 36.7 13.6\n",
       "27  B  M   27    15.4 11.8 33.0 37.5 13.6\n",
       "28  B  M   28    15.7 12.6 35.8 40.3 14.5\n",
       "29  B  M   29    15.9 12.7 34.0 38.9 14.2\n",
       "30  B  M   30    16.1 11.6 33.8 39.0 14.4\n",
       "⋮   ⋮  ⋮   ⋮     ⋮    ⋮    ⋮    ⋮    ⋮   \n",
       "171 O  F   21    17.5 14.3 34.5 39.6 15.6\n",
       "172 O  F   22    17.5 14.4 34.5 39.0 16.0\n",
       "173 O  F   23    17.5 14.7 33.3 37.6 14.6\n",
       "174 O  F   24    17.6 14.0 34.0 38.6 15.5\n",
       "175 O  F   25    18.0 14.9 34.7 39.5 15.7\n",
       "176 O  F   26    18.0 16.3 37.9 43.0 17.2\n",
       "177 O  F   27    18.3 15.7 35.1 40.5 16.1\n",
       "178 O  F   28    18.4 15.5 35.6 40.0 15.9\n",
       "179 O  F   29    18.4 15.7 36.5 41.6 16.4\n",
       "180 O  F   30    18.5 14.6 37.0 42.0 16.6\n",
       "181 O  F   31    18.6 14.5 34.7 39.4 15.0\n",
       "182 O  F   32    18.8 15.2 35.8 40.5 16.6\n",
       "183 O  F   33    18.9 16.7 36.3 41.7 15.3\n",
       "184 O  F   34    19.1 16.0 37.8 42.3 16.8\n",
       "185 O  F   35    19.1 16.3 37.9 42.6 17.2\n",
       "186 O  F   36    19.7 16.7 39.9 43.6 18.2\n",
       "187 O  F   37    19.9 16.6 39.4 43.9 17.9\n",
       "188 O  F   38    19.9 17.9 40.1 46.4 17.9\n",
       "189 O  F   39    20.0 16.7 40.4 45.1 17.7\n",
       "190 O  F   40    20.1 17.2 39.8 44.1 18.6\n",
       "191 O  F   41    20.3 16.0 39.4 44.1 18.0\n",
       "192 O  F   42    20.5 17.5 40.0 45.5 19.2\n",
       "193 O  F   43    20.6 17.5 41.5 46.2 19.2\n",
       "194 O  F   44    20.9 16.5 39.9 44.7 17.5\n",
       "195 O  F   45    21.3 18.4 43.8 48.4 20.0\n",
       "196 O  F   46    21.4 18.0 41.2 46.2 18.7\n",
       "197 O  F   47    21.7 17.1 41.7 47.2 19.6\n",
       "198 O  F   48    21.9 17.2 42.6 47.4 19.5\n",
       "199 O  F   49    22.5 17.2 43.0 48.7 19.8\n",
       "200 O  F   50    23.1 20.2 46.2 52.5 21.1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>4</li><li>5</li><li>6</li><li>2</li><li>1</li><li>3</li><li>7</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 6\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 3\n",
       "\\item 7\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 4\n",
       "2. 5\n",
       "3. 6\n",
       "4. 2\n",
       "5. 1\n",
       "6. 3\n",
       "7. 7\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 4 5 6 2 1 3 7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>5</li><li>4</li><li>6</li><li>1</li><li>2</li><li>3</li><li>7</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 6\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 7\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 5\n",
       "2. 4\n",
       "3. 6\n",
       "4. 1\n",
       "5. 2\n",
       "6. 3\n",
       "7. 7\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 5 4 6 1 2 3 7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "### order\n",
    "# The function order sorts complex structures, such as data \n",
    "# frames.  \n",
    "\n",
    "# The result of using order on a vector is a permutation that \n",
    "# rearranges the vector in ascending or descending order, \n",
    "# according to the \\texttt{decreasing} option selected (that is \n",
    "# true by default). Let's see an example\n",
    "\n",
    "(x <- c(4:6,2,1,3,7))\n",
    "order(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 6\n",
       "\\item 7\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "6. 6\n",
       "7. 7\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 1 2 3 4 5 6 7"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The result means that in order to sort the vector x\n",
    "# you have to place component 5 first, component 4 second, \n",
    "# component 6 third, and so on. To order x, type\n",
    "\n",
    "x[order(x)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 7 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>x</th><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr>\n",
       "\t<tr><th scope=row>y</th><td>3</td><td>4</td><td>2</td><td>7</td><td>6</td><td>5</td><td>1</td></tr>\n",
       "\t<tr><th scope=row>z</th><td>5</td><td>4</td><td>6</td><td>1</td><td>2</td><td>3</td><td>7</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 7 of type dbl\n",
       "\\begin{tabular}{r|lllllll}\n",
       "\tx & 1 & 2 & 3 & 4 & 5 & 6 & 7\\\\\n",
       "\ty & 3 & 4 & 2 & 7 & 6 & 5 & 1\\\\\n",
       "\tz & 5 & 4 & 6 & 1 & 2 & 3 & 7\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 7 of type dbl\n",
       "\n",
       "| x | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n",
       "| y | 3 | 4 | 2 | 7 | 6 | 5 | 1 |\n",
       "| z | 5 | 4 | 6 | 1 | 2 | 3 | 7 |\n",
       "\n"
      ],
      "text/plain": [
       "  [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n",
       "x 1    2    3    4    5    6    7   \n",
       "y 3    4    2    7    6    5    1   \n",
       "z 5    4    6    1    2    3    7   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The interesting thing is that this function allows you to use \n",
    "# the indexes obtained to sort several vectors using the criteria \n",
    "# corresponding to the vector x.\n",
    "\n",
    "y <- 7:1\n",
    "z <- 1:7\n",
    "rbind(x,y,z)[,order(x)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'e'</li><li>'f'</li><li>'g'</li><li>'h'</li><li>'i'</li><li>'j'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'e'\n",
       "\\item 'f'\n",
       "\\item 'g'\n",
       "\\item 'h'\n",
       "\\item 'i'\n",
       "\\item 'j'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'e'\n",
       "2. 'f'\n",
       "3. 'g'\n",
       "4. 'h'\n",
       "5. 'i'\n",
       "6. 'j'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"e\" \"f\" \"g\" \"h\" \"i\" \"j\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 6\n",
       "\\item 7\n",
       "\\item 8\n",
       "\\item 9\n",
       "\\item 10\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "6. 6\n",
       "7. 7\n",
       "8. 8\n",
       "9. 9\n",
       "10. 10\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1]  1  2  3  4  5  6  7  8  9 10"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 4 × 3 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td> 0.9560576</td><td>0.3507144</td><td> 0.35477724</td></tr>\n",
       "\t<tr><td> 0.7519180</td><td>0.5918482</td><td> 0.09713195</td></tr>\n",
       "\t<tr><td> 0.2581611</td><td>0.5592090</td><td>-0.38440795</td></tr>\n",
       "\t<tr><td>-0.4618070</td><td>1.0566505</td><td> 0.84901967</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 4 × 3 of type dbl\n",
       "\\begin{tabular}{lll}\n",
       "\t  0.9560576 & 0.3507144 &  0.35477724\\\\\n",
       "\t  0.7519180 & 0.5918482 &  0.09713195\\\\\n",
       "\t  0.2581611 & 0.5592090 & -0.38440795\\\\\n",
       "\t -0.4618070 & 1.0566505 &  0.84901967\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 4 × 3 of type dbl\n",
       "\n",
       "|  0.9560576 | 0.3507144 |  0.35477724 |\n",
       "|  0.7519180 | 0.5918482 |  0.09713195 |\n",
       "|  0.2581611 | 0.5592090 | -0.38440795 |\n",
       "| -0.4618070 | 1.0566505 |  0.84901967 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1]       [,2]      [,3]       \n",
       "[1,]  0.9560576 0.3507144  0.35477724\n",
       "[2,]  0.7519180 0.5918482  0.09713195\n",
       "[3,]  0.2581611 0.5592090 -0.38440795\n",
       "[4,] -0.4618070 1.0566505  0.84901967"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<dl>\n",
       "\t<dt>$item1</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'e'</li><li>'f'</li><li>'g'</li><li>'h'</li><li>'i'</li><li>'j'</li></ol>\n",
       "</dd>\n",
       "\t<dt>$item2</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li></ol>\n",
       "</dd>\n",
       "\t<dt>$item3</dt>\n",
       "\t\t<dd><table>\n",
       "<caption>A matrix: 4 × 3 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td> 0.9560576</td><td>0.3507144</td><td> 0.35477724</td></tr>\n",
       "\t<tr><td> 0.7519180</td><td>0.5918482</td><td> 0.09713195</td></tr>\n",
       "\t<tr><td> 0.2581611</td><td>0.5592090</td><td>-0.38440795</td></tr>\n",
       "\t<tr><td>-0.4618070</td><td>1.0566505</td><td> 0.84901967</td></tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</dd>\n",
       "</dl>\n"
      ],
      "text/latex": [
       "\\begin{description}\n",
       "\\item[\\$item1] \\begin{enumerate*}\n",
       "\\item 'e'\n",
       "\\item 'f'\n",
       "\\item 'g'\n",
       "\\item 'h'\n",
       "\\item 'i'\n",
       "\\item 'j'\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$item2] \\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 6\n",
       "\\item 7\n",
       "\\item 8\n",
       "\\item 9\n",
       "\\item 10\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$item3] A matrix: 4 × 3 of type dbl\n",
       "\\begin{tabular}{lll}\n",
       "\t  0.9560576 & 0.3507144 &  0.35477724\\\\\n",
       "\t  0.7519180 & 0.5918482 &  0.09713195\\\\\n",
       "\t  0.2581611 & 0.5592090 & -0.38440795\\\\\n",
       "\t -0.4618070 & 1.0566505 &  0.84901967\\\\\n",
       "\\end{tabular}\n",
       "\n",
       "\\end{description}\n"
      ],
      "text/markdown": [
       "$item1\n",
       ":   1. 'e'\n",
       "2. 'f'\n",
       "3. 'g'\n",
       "4. 'h'\n",
       "5. 'i'\n",
       "6. 'j'\n",
       "\n",
       "\n",
       "\n",
       "$item2\n",
       ":   1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "6. 6\n",
       "7. 7\n",
       "8. 8\n",
       "9. 9\n",
       "10. 10\n",
       "\n",
       "\n",
       "\n",
       "$item3\n",
       ":   \n",
       "A matrix: 4 × 3 of type dbl\n",
       "\n",
       "|  0.9560576 | 0.3507144 |  0.35477724 |\n",
       "|  0.7519180 | 0.5918482 |  0.09713195 |\n",
       "|  0.2581611 | 0.5592090 | -0.38440795 |\n",
       "| -0.4618070 | 1.0566505 |  0.84901967 |\n",
       "\n",
       "\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "$item1\n",
       "[1] \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n",
       "\n",
       "$item2\n",
       " [1]  1  2  3  4  5  6  7  8  9 10\n",
       "\n",
       "$item3\n",
       "           [,1]      [,2]        [,3]\n",
       "[1,]  0.9560576 0.3507144  0.35477724\n",
       "[2,]  0.7519180 0.5918482  0.09713195\n",
       "[3,]  0.2581611 0.5592090 -0.38440795\n",
       "[4,] -0.4618070 1.0566505  0.84901967\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Lists \n",
    "# Lists are objects that can contain information of different \n",
    "# mode and  different structure. Recall that a data frame is an \n",
    "# object that can contain data of different modes, but all the \n",
    "# vectors had to have the same length. In lists, the objects in \n",
    "# the list can be arbitrary. Thus, a list is an ordered collection\n",
    "# of objects. To build lists use the command list:\n",
    "\n",
    "(vec1 <- letters[5:10])\n",
    "(vec2 <- 1:10)\n",
    "(vec3 <- matrix(rnorm(12),ncol=3))\n",
    "(mixed.list <- list(item1 = vec1, item2 = vec2, item3 = vec3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>0.35071442862487</li><li>0.591848205912247</li><li>0.559208990696273</li><li>1.05665046231219</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 0.35071442862487\n",
       "\\item 0.591848205912247\n",
       "\\item 0.559208990696273\n",
       "\\item 1.05665046231219\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 0.35071442862487\n",
       "2. 0.591848205912247\n",
       "3. 0.559208990696273\n",
       "4. 1.05665046231219\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 0.3507144 0.5918482 0.5592090 1.0566505"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>0.35071442862487</li><li>0.591848205912247</li><li>0.559208990696273</li><li>1.05665046231219</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 0.35071442862487\n",
       "\\item 0.591848205912247\n",
       "\\item 0.559208990696273\n",
       "\\item 1.05665046231219\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 0.35071442862487\n",
       "2. 0.591848205912247\n",
       "3. 0.559208990696273\n",
       "4. 1.05665046231219\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 0.3507144 0.5918482 0.5592090 1.0566505"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "NULL"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Double square brackets are used for getting items out of a list\n",
    "# while single square brackets are used for extracting elements of \n",
    "# a vector or array in the list:\n",
    "\n",
    "mixed.list$item3[,2]\n",
    "mixed.list[[3]][,2]\n",
    "mixed.list$item4$stretch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'e'</li><li>'f'</li><li>'g'</li><li>'h'</li><li>'i'</li><li>'j'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'e'\n",
       "\\item 'f'\n",
       "\\item 'g'\n",
       "\\item 'h'\n",
       "\\item 'i'\n",
       "\\item 'j'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'e'\n",
       "2. 'f'\n",
       "3. 'g'\n",
       "4. 'h'\n",
       "5. 'i'\n",
       "6. 'j'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"e\" \"f\" \"g\" \"h\" \"i\" \"j\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "mixed.list$item1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "6"
      ],
      "text/latex": [
       "6"
      ],
      "text/markdown": [
       "6"
      ],
      "text/plain": [
       "[1] 6"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lists are objects with great flexibility for storing data and \n",
    "# other objects in \\texttt{R}. These objects may be completely \n",
    "# independent and may be of different types and shapes.\n",
    "\n",
    "# Elements in a list can be assigned and changed as with other \n",
    "# objects. To add a new element to a list, simply place it in a \n",
    "# position that is not in use.\n",
    "# The mixed.list list has three elements (this can be determined \n",
    "# as usual using the length() function). We can add a new element \n",
    "# by assigning it to a free index.\n",
    "\n",
    "length(mixed.list)\n",
    "mixed.list[[5]] <- c('The', 'new', 'element')\n",
    "mixed.list$item4 <- c('The', 'new', 'element')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<dl>\n",
       "\t<dt>$item1</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'e'</li><li>'f'</li><li>'g'</li><li>'h'</li><li>'i'</li><li>'j'</li></ol>\n",
       "</dd>\n",
       "\t<dt>$item2</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li></ol>\n",
       "</dd>\n",
       "\t<dt>$item3</dt>\n",
       "\t\t<dd><table>\n",
       "<caption>A matrix: 4 × 3 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td> 0.9560576</td><td>0.3507144</td><td> 0.35477724</td></tr>\n",
       "\t<tr><td> 0.7519180</td><td>0.5918482</td><td> 0.09713195</td></tr>\n",
       "\t<tr><td> 0.2581611</td><td>0.5592090</td><td>-0.38440795</td></tr>\n",
       "\t<tr><td>-0.4618070</td><td>1.0566505</td><td> 0.84901967</td></tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</dd>\n",
       "\t<dt>[[4]]</dt>\n",
       "\t\t<dd>NULL</dd>\n",
       "\t<dt>[[5]]</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'The'</li><li>'new'</li><li>'element'</li></ol>\n",
       "</dd>\n",
       "\t<dt>$item4</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'The'</li><li>'new'</li><li>'element'</li></ol>\n",
       "</dd>\n",
       "</dl>\n"
      ],
      "text/latex": [
       "\\begin{description}\n",
       "\\item[\\$item1] \\begin{enumerate*}\n",
       "\\item 'e'\n",
       "\\item 'f'\n",
       "\\item 'g'\n",
       "\\item 'h'\n",
       "\\item 'i'\n",
       "\\item 'j'\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$item2] \\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 6\n",
       "\\item 7\n",
       "\\item 8\n",
       "\\item 9\n",
       "\\item 10\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$item3] A matrix: 4 × 3 of type dbl\n",
       "\\begin{tabular}{lll}\n",
       "\t  0.9560576 & 0.3507144 &  0.35477724\\\\\n",
       "\t  0.7519180 & 0.5918482 &  0.09713195\\\\\n",
       "\t  0.2581611 & 0.5592090 & -0.38440795\\\\\n",
       "\t -0.4618070 & 1.0566505 &  0.84901967\\\\\n",
       "\\end{tabular}\n",
       "\n",
       "\\item[{[[4]]}] NULL\n",
       "\\item[{[[5]]}] \\begin{enumerate*}\n",
       "\\item 'The'\n",
       "\\item 'new'\n",
       "\\item 'element'\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$item4] \\begin{enumerate*}\n",
       "\\item 'The'\n",
       "\\item 'new'\n",
       "\\item 'element'\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\end{description}\n"
      ],
      "text/markdown": [
       "$item1\n",
       ":   1. 'e'\n",
       "2. 'f'\n",
       "3. 'g'\n",
       "4. 'h'\n",
       "5. 'i'\n",
       "6. 'j'\n",
       "\n",
       "\n",
       "\n",
       "$item2\n",
       ":   1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "6. 6\n",
       "7. 7\n",
       "8. 8\n",
       "9. 9\n",
       "10. 10\n",
       "\n",
       "\n",
       "\n",
       "$item3\n",
       ":   \n",
       "A matrix: 4 × 3 of type dbl\n",
       "\n",
       "|  0.9560576 | 0.3507144 |  0.35477724 |\n",
       "|  0.7519180 | 0.5918482 |  0.09713195 |\n",
       "|  0.2581611 | 0.5592090 | -0.38440795 |\n",
       "| -0.4618070 | 1.0566505 |  0.84901967 |\n",
       "\n",
       "\n",
       "[[4]]\n",
       ":   NULL\n",
       "[[5]]\n",
       ":   1. 'The'\n",
       "2. 'new'\n",
       "3. 'element'\n",
       "\n",
       "\n",
       "\n",
       "$item4\n",
       ":   1. 'The'\n",
       "2. 'new'\n",
       "3. 'element'\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "$item1\n",
       "[1] \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n",
       "\n",
       "$item2\n",
       " [1]  1  2  3  4  5  6  7  8  9 10\n",
       "\n",
       "$item3\n",
       "           [,1]      [,2]        [,3]\n",
       "[1,]  0.9560576 0.3507144  0.35477724\n",
       "[2,]  0.7519180 0.5918482  0.09713195\n",
       "[3,]  0.2581611 0.5592090 -0.38440795\n",
       "[4,] -0.4618070 1.0566505  0.84901967\n",
       "\n",
       "[[4]]\n",
       "NULL\n",
       "\n",
       "[[5]]\n",
       "[1] \"The\"     \"new\"     \"element\"\n",
       "\n",
       "$item4\n",
       "[1] \"The\"     \"new\"     \"element\"\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "mixed.list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<dl>\n",
       "\t<dt>$item1</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'e'</li><li>'f'</li><li>'g'</li><li>'h'</li><li>'i'</li><li>'j'</li></ol>\n",
       "</dd>\n",
       "\t<dt>$item2</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li></ol>\n",
       "</dd>\n",
       "\t<dt>$item3</dt>\n",
       "\t\t<dd><table>\n",
       "<caption>A matrix: 4 × 3 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td> 0.9560576</td><td>0.3507144</td><td> 0.35477724</td></tr>\n",
       "\t<tr><td> 0.7519180</td><td>0.5918482</td><td> 0.09713195</td></tr>\n",
       "\t<tr><td> 0.2581611</td><td>0.5592090</td><td>-0.38440795</td></tr>\n",
       "\t<tr><td>-0.4618070</td><td>1.0566505</td><td> 0.84901967</td></tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</dd>\n",
       "\t<dt>[[4]]</dt>\n",
       "\t\t<dd>NULL</dd>\n",
       "\t<dt>[[5]]</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'The'</li><li>'new'</li><li>'element'</li></ol>\n",
       "</dd>\n",
       "\t<dt>$item4</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'The'</li><li>'new'</li><li>'element'</li></ol>\n",
       "</dd>\n",
       "\t<dt>[[7]]</dt>\n",
       "\t\t<dd>'the newest of the new'</dd>\n",
       "</dl>\n"
      ],
      "text/latex": [
       "\\begin{description}\n",
       "\\item[\\$item1] \\begin{enumerate*}\n",
       "\\item 'e'\n",
       "\\item 'f'\n",
       "\\item 'g'\n",
       "\\item 'h'\n",
       "\\item 'i'\n",
       "\\item 'j'\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$item2] \\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 6\n",
       "\\item 7\n",
       "\\item 8\n",
       "\\item 9\n",
       "\\item 10\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$item3] A matrix: 4 × 3 of type dbl\n",
       "\\begin{tabular}{lll}\n",
       "\t  0.9560576 & 0.3507144 &  0.35477724\\\\\n",
       "\t  0.7519180 & 0.5918482 &  0.09713195\\\\\n",
       "\t  0.2581611 & 0.5592090 & -0.38440795\\\\\n",
       "\t -0.4618070 & 1.0566505 &  0.84901967\\\\\n",
       "\\end{tabular}\n",
       "\n",
       "\\item[{[[4]]}] NULL\n",
       "\\item[{[[5]]}] \\begin{enumerate*}\n",
       "\\item 'The'\n",
       "\\item 'new'\n",
       "\\item 'element'\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$item4] \\begin{enumerate*}\n",
       "\\item 'The'\n",
       "\\item 'new'\n",
       "\\item 'element'\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[{[[7]]}] 'the newest of the new'\n",
       "\\end{description}\n"
      ],
      "text/markdown": [
       "$item1\n",
       ":   1. 'e'\n",
       "2. 'f'\n",
       "3. 'g'\n",
       "4. 'h'\n",
       "5. 'i'\n",
       "6. 'j'\n",
       "\n",
       "\n",
       "\n",
       "$item2\n",
       ":   1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "6. 6\n",
       "7. 7\n",
       "8. 8\n",
       "9. 9\n",
       "10. 10\n",
       "\n",
       "\n",
       "\n",
       "$item3\n",
       ":   \n",
       "A matrix: 4 × 3 of type dbl\n",
       "\n",
       "|  0.9560576 | 0.3507144 |  0.35477724 |\n",
       "|  0.7519180 | 0.5918482 |  0.09713195 |\n",
       "|  0.2581611 | 0.5592090 | -0.38440795 |\n",
       "| -0.4618070 | 1.0566505 |  0.84901967 |\n",
       "\n",
       "\n",
       "[[4]]\n",
       ":   NULL\n",
       "[[5]]\n",
       ":   1. 'The'\n",
       "2. 'new'\n",
       "3. 'element'\n",
       "\n",
       "\n",
       "\n",
       "$item4\n",
       ":   1. 'The'\n",
       "2. 'new'\n",
       "3. 'element'\n",
       "\n",
       "\n",
       "\n",
       "[[7]]\n",
       ":   'the newest of the new'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "$item1\n",
       "[1] \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n",
       "\n",
       "$item2\n",
       " [1]  1  2  3  4  5  6  7  8  9 10\n",
       "\n",
       "$item3\n",
       "           [,1]      [,2]        [,3]\n",
       "[1,]  0.9560576 0.3507144  0.35477724\n",
       "[2,]  0.7519180 0.5918482  0.09713195\n",
       "[3,]  0.2581611 0.5592090 -0.38440795\n",
       "[4,] -0.4618070 1.0566505  0.84901967\n",
       "\n",
       "[[4]]\n",
       "NULL\n",
       "\n",
       "[[5]]\n",
       "[1] \"The\"     \"new\"     \"element\"\n",
       "\n",
       "$item4\n",
       "[1] \"The\"     \"new\"     \"element\"\n",
       "\n",
       "[[7]]\n",
       "[1] \"the newest of the new\"\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Any index can be used, but it is better to use the first one \n",
    "#that is free, since the intermediate elements are assigned the \n",
    "# NULL value. If we add an element with index 10 to a list of 3 \n",
    "# elements, we are automatically creating the elements from  4 to 9. \n",
    "# The following command to add the new element in the first free place:\n",
    "\n",
    "mixed.list[[length(mixed.list)+1]] <- c('the newest of the new')\n",
    "mixed.list "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<dl>\n",
       "\t<dt>$item1</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'e'</li><li>'f'</li><li>'g'</li><li>'h'</li><li>'i'</li><li>'j'</li></ol>\n",
       "</dd>\n",
       "\t<dt>$item3</dt>\n",
       "\t\t<dd><table>\n",
       "<caption>A matrix: 4 × 3 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td> 0.9560576</td><td>0.3507144</td><td> 0.35477724</td></tr>\n",
       "\t<tr><td> 0.7519180</td><td>0.5918482</td><td> 0.09713195</td></tr>\n",
       "\t<tr><td> 0.2581611</td><td>0.5592090</td><td>-0.38440795</td></tr>\n",
       "\t<tr><td>-0.4618070</td><td>1.0566505</td><td> 0.84901967</td></tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</dd>\n",
       "\t<dt>[[3]]</dt>\n",
       "\t\t<dd>NULL</dd>\n",
       "\t<dt>[[4]]</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'The'</li><li>'new'</li><li>'element'</li></ol>\n",
       "</dd>\n",
       "\t<dt>$item4</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'The'</li><li>'new'</li><li>'element'</li></ol>\n",
       "</dd>\n",
       "\t<dt>[[6]]</dt>\n",
       "\t\t<dd>'the newest of the new'</dd>\n",
       "</dl>\n"
      ],
      "text/latex": [
       "\\begin{description}\n",
       "\\item[\\$item1] \\begin{enumerate*}\n",
       "\\item 'e'\n",
       "\\item 'f'\n",
       "\\item 'g'\n",
       "\\item 'h'\n",
       "\\item 'i'\n",
       "\\item 'j'\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$item3] A matrix: 4 × 3 of type dbl\n",
       "\\begin{tabular}{lll}\n",
       "\t  0.9560576 & 0.3507144 &  0.35477724\\\\\n",
       "\t  0.7519180 & 0.5918482 &  0.09713195\\\\\n",
       "\t  0.2581611 & 0.5592090 & -0.38440795\\\\\n",
       "\t -0.4618070 & 1.0566505 &  0.84901967\\\\\n",
       "\\end{tabular}\n",
       "\n",
       "\\item[{[[3]]}] NULL\n",
       "\\item[{[[4]]}] \\begin{enumerate*}\n",
       "\\item 'The'\n",
       "\\item 'new'\n",
       "\\item 'element'\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$item4] \\begin{enumerate*}\n",
       "\\item 'The'\n",
       "\\item 'new'\n",
       "\\item 'element'\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[{[[6]]}] 'the newest of the new'\n",
       "\\end{description}\n"
      ],
      "text/markdown": [
       "$item1\n",
       ":   1. 'e'\n",
       "2. 'f'\n",
       "3. 'g'\n",
       "4. 'h'\n",
       "5. 'i'\n",
       "6. 'j'\n",
       "\n",
       "\n",
       "\n",
       "$item3\n",
       ":   \n",
       "A matrix: 4 × 3 of type dbl\n",
       "\n",
       "|  0.9560576 | 0.3507144 |  0.35477724 |\n",
       "|  0.7519180 | 0.5918482 |  0.09713195 |\n",
       "|  0.2581611 | 0.5592090 | -0.38440795 |\n",
       "| -0.4618070 | 1.0566505 |  0.84901967 |\n",
       "\n",
       "\n",
       "[[3]]\n",
       ":   NULL\n",
       "[[4]]\n",
       ":   1. 'The'\n",
       "2. 'new'\n",
       "3. 'element'\n",
       "\n",
       "\n",
       "\n",
       "$item4\n",
       ":   1. 'The'\n",
       "2. 'new'\n",
       "3. 'element'\n",
       "\n",
       "\n",
       "\n",
       "[[6]]\n",
       ":   'the newest of the new'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "$item1\n",
       "[1] \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"\n",
       "\n",
       "$item3\n",
       "           [,1]      [,2]        [,3]\n",
       "[1,]  0.9560576 0.3507144  0.35477724\n",
       "[2,]  0.7519180 0.5918482  0.09713195\n",
       "[3,]  0.2581611 0.5592090 -0.38440795\n",
       "[4,] -0.4618070 1.0566505  0.84901967\n",
       "\n",
       "[[3]]\n",
       "NULL\n",
       "\n",
       "[[4]]\n",
       "[1] \"The\"     \"new\"     \"element\"\n",
       "\n",
       "$item4\n",
       "[1] \"The\"     \"new\"     \"element\"\n",
       "\n",
       "[[6]]\n",
       "[1] \"the newest of the new\"\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# If we assign an existing index, the element is replaced. To \n",
    "# remove an existing element, assign it the value NULL:\n",
    "\n",
    "mixed.list[[2]] <- NULL\n",
    "mixed.list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'item1'</li><li>'item3'</li><li>''</li><li>''</li><li>'item4'</li><li>''</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'item1'\n",
       "\\item 'item3'\n",
       "\\item ''\n",
       "\\item ''\n",
       "\\item 'item4'\n",
       "\\item ''\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'item1'\n",
       "2. 'item3'\n",
       "3. ''\n",
       "4. ''\n",
       "5. 'item4'\n",
       "6. ''\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"item1\" \"item3\" \"\"      \"\"      \"item4\" \"\"     "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'item1'</li><li>'item3'</li><li>''</li><li>''</li><li>'item.new'</li><li>''</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'item1'\n",
       "\\item 'item3'\n",
       "\\item ''\n",
       "\\item ''\n",
       "\\item 'item.new'\n",
       "\\item ''\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'item1'\n",
       "2. 'item3'\n",
       "3. ''\n",
       "4. ''\n",
       "5. 'item.new'\n",
       "6. ''\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"item1\"    \"item3\"    \"\"         \"\"         \"item.new\" \"\"        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# removes the second item from the list, so it doesn't appear again.\n",
    "\n",
    "# As we can see, by eliminating one element the others move forward \n",
    "# and their indices are reduced by one unit.\n",
    "# It is impossible to remove several items from a list simultaneously \n",
    "# and it is also imposible to use negative indexes to delete list \n",
    "# elements.\n",
    "\n",
    "# The function \\texttt{names} gives the names of the elements in \n",
    "# the list and camn also be used to assign or change names:\n",
    "\n",
    "names(mixed.list)\n",
    "names(mixed.list)[5] <- 'item.new'\n",
    "names(mixed.list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 3 × 4 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>4</td><td>7</td><td>10</td></tr>\n",
       "\t<tr><td>2</td><td>5</td><td>8</td><td>11</td></tr>\n",
       "\t<tr><td>3</td><td>6</td><td>9</td><td>12</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 3 × 4 of type int\n",
       "\\begin{tabular}{llll}\n",
       "\t 1 & 4 & 7 & 10\\\\\n",
       "\t 2 & 5 & 8 & 11\\\\\n",
       "\t 3 & 6 & 9 & 12\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 3 × 4 of type int\n",
       "\n",
       "| 1 | 4 | 7 | 10 |\n",
       "| 2 | 5 | 8 | 11 |\n",
       "| 3 | 6 | 9 | 12 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3] [,4]\n",
       "[1,] 1    4    7    10  \n",
       "[2,] 2    5    8    11  \n",
       "[3,] 3    6    9    12  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "11"
      ],
      "text/latex": [
       "11"
      ],
      "text/markdown": [
       "11"
      ],
      "text/plain": [
       "[1] 11"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "11"
      ],
      "text/latex": [
       "11"
      ],
      "text/markdown": [
       "11"
      ],
      "text/plain": [
       "[1] 11"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 2 × 4 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>4</td><td>7</td><td>10</td></tr>\n",
       "\t<tr><td>2</td><td>5</td><td>8</td><td>11</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 2 × 4 of type int\n",
       "\\begin{tabular}{llll}\n",
       "\t 1 & 4 & 7 & 10\\\\\n",
       "\t 2 & 5 & 8 & 11\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 2 × 4 of type int\n",
       "\n",
       "| 1 | 4 | 7 | 10 |\n",
       "| 2 | 5 | 8 | 11 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3] [,4]\n",
       "[1,] 1    4    7    10  \n",
       "[2,] 2    5    8    11  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 2 × 3 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>1</td><td>4</td><td>10</td></tr>\n",
       "\t<tr><td>2</td><td>5</td><td>11</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 2 × 3 of type int\n",
       "\\begin{tabular}{lll}\n",
       "\t 1 & 4 & 10\\\\\n",
       "\t 2 & 5 & 11\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 2 × 3 of type int\n",
       "\n",
       "| 1 | 4 | 10 |\n",
       "| 2 | 5 | 11 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3]\n",
       "[1,] 1    4    10  \n",
       "[2,] 2    5    11  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## The selection operator \n",
    "\n",
    "## The selection operator is represented by the symbol [ between quotation \n",
    "#  marks: \n",
    "## `[`\n",
    "## The selection operator is a function whose first argument is the object \n",
    "## being subsetted. Subsequent arguments are the indices to that subset.\n",
    "\n",
    "(M <- matrix(1:12,ncol=4))\n",
    "M[2,4]\n",
    "'['(M,2,4)\n",
    "'['(M,1:2,)\n",
    "'['(M,1:2,-3)   #Why should we do that? We can get the same results by M[1:2,-3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<dl>\n",
       "\t<dt>$vec</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li></ol>\n",
       "</dd>\n",
       "\t<dt>$mat</dt>\n",
       "\t\t<dd><table>\n",
       "<caption>A matrix: 3 × 4 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>99</td><td>96</td><td>93</td><td>90</td></tr>\n",
       "\t<tr><td>98</td><td>95</td><td>92</td><td>89</td></tr>\n",
       "\t<tr><td>97</td><td>94</td><td>91</td><td>88</td></tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</dd>\n",
       "</dl>\n"
      ],
      "text/latex": [
       "\\begin{description}\n",
       "\\item[\\$vec] \\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 6\n",
       "\\item 7\n",
       "\\item 8\n",
       "\\item 9\n",
       "\\item 10\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$mat] A matrix: 3 × 4 of type int\n",
       "\\begin{tabular}{llll}\n",
       "\t 99 & 96 & 93 & 90\\\\\n",
       "\t 98 & 95 & 92 & 89\\\\\n",
       "\t 97 & 94 & 91 & 88\\\\\n",
       "\\end{tabular}\n",
       "\n",
       "\\end{description}\n"
      ],
      "text/markdown": [
       "$vec\n",
       ":   1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "6. 6\n",
       "7. 7\n",
       "8. 8\n",
       "9. 9\n",
       "10. 10\n",
       "\n",
       "\n",
       "\n",
       "$mat\n",
       ":   \n",
       "A matrix: 3 × 4 of type int\n",
       "\n",
       "| 99 | 96 | 93 | 90 |\n",
       "| 98 | 95 | 92 | 89 |\n",
       "| 97 | 94 | 91 | 88 |\n",
       "\n",
       "\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "$vec\n",
       " [1]  1  2  3  4  5  6  7  8  9 10\n",
       "\n",
       "$mat\n",
       "     [,1] [,2] [,3] [,4]\n",
       "[1,]   99   96   93   90\n",
       "[2,]   98   95   92   89\n",
       "[3,]   97   94   91   88\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<dl>\n",
       "\t<dt>$vec</dt>\n",
       "\t\t<dd>5.5</dd>\n",
       "\t<dt>$mat</dt>\n",
       "\t\t<dd>93.5</dd>\n",
       "</dl>\n"
      ],
      "text/latex": [
       "\\begin{description}\n",
       "\\item[\\$vec] 5.5\n",
       "\\item[\\$mat] 93.5\n",
       "\\end{description}\n"
      ],
      "text/markdown": [
       "$vec\n",
       ":   5.5\n",
       "$mat\n",
       ":   93.5\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "$vec\n",
       "[1] 5.5\n",
       "\n",
       "$mat\n",
       "[1] 93.5\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "List of 2\n",
      " $ vec: num 5.5\n",
      " $ mat: num 93.5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<dl>\n",
       "\t<dt>$vec</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>0</li><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li></ol>\n",
       "</dd>\n",
       "\t<dt>$mat</dt>\n",
       "\t\t<dd><table>\n",
       "<caption>A matrix: 3 × 4 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td>98</td><td>95</td><td>92</td><td>89</td></tr>\n",
       "\t<tr><td>97</td><td>94</td><td>91</td><td>88</td></tr>\n",
       "\t<tr><td>96</td><td>93</td><td>90</td><td>87</td></tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</dd>\n",
       "</dl>\n"
      ],
      "text/latex": [
       "\\begin{description}\n",
       "\\item[\\$vec] \\begin{enumerate*}\n",
       "\\item 0\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 6\n",
       "\\item 7\n",
       "\\item 8\n",
       "\\item 9\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$mat] A matrix: 3 × 4 of type dbl\n",
       "\\begin{tabular}{llll}\n",
       "\t 98 & 95 & 92 & 89\\\\\n",
       "\t 97 & 94 & 91 & 88\\\\\n",
       "\t 96 & 93 & 90 & 87\\\\\n",
       "\\end{tabular}\n",
       "\n",
       "\\end{description}\n"
      ],
      "text/markdown": [
       "$vec\n",
       ":   1. 0\n",
       "2. 1\n",
       "3. 2\n",
       "4. 3\n",
       "5. 4\n",
       "6. 5\n",
       "7. 6\n",
       "8. 7\n",
       "9. 8\n",
       "10. 9\n",
       "\n",
       "\n",
       "\n",
       "$mat\n",
       ":   \n",
       "A matrix: 3 × 4 of type dbl\n",
       "\n",
       "| 98 | 95 | 92 | 89 |\n",
       "| 97 | 94 | 91 | 88 |\n",
       "| 96 | 93 | 90 | 87 |\n",
       "\n",
       "\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "$vec\n",
       " [1] 0 1 2 3 4 5 6 7 8 9\n",
       "\n",
       "$mat\n",
       "     [,1] [,2] [,3] [,4]\n",
       "[1,]   98   95   92   89\n",
       "[2,]   97   94   91   88\n",
       "[3,]   96   93   90   87\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# ### lapply\n",
    "# The lapply function allows you to apply the same function on \n",
    "# all items in a list. For example, you might want to calculate \n",
    "# the average of the elements in the list:\n",
    "\n",
    "(L <- list (vec = 1:10, mat=matrix (99:88, 3, 4)))\n",
    "\n",
    "(res <- lapply (L, mean))\n",
    "str(res)\n",
    "lapply (L, '-', 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "3"
      ],
      "text/latex": [
       "3"
      ],
      "text/markdown": [
       "3"
      ],
      "text/plain": [
       "[1] 3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 2 × 3 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>8</td><td>10</td><td>10</td></tr>\n",
       "\t<tr><td>7</td><td> 8</td><td>13</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 2 × 3 of type int\n",
       "\\begin{tabular}{lll}\n",
       "\t 8 & 10 & 10\\\\\n",
       "\t 7 &  8 & 13\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 2 × 3 of type int\n",
       "\n",
       "| 8 | 10 | 10 |\n",
       "| 7 |  8 | 13 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3]\n",
       "[1,] 8    10   10  \n",
       "[2,] 7     8   13  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 2 × 3 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>15</td><td> 9</td><td>8</td></tr>\n",
       "\t<tr><td>15</td><td>11</td><td>7</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 2 × 3 of type int\n",
       "\\begin{tabular}{lll}\n",
       "\t 15 &  9 & 8\\\\\n",
       "\t 15 & 11 & 7\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 2 × 3 of type int\n",
       "\n",
       "| 15 |  9 | 8 |\n",
       "| 15 | 11 | 7 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3]\n",
       "[1,] 15    9   8   \n",
       "[2,] 15   11   7   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 2 × 3 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td> 0</td><td>10</td><td>3</td></tr>\n",
       "\t<tr><td>16</td><td>17</td><td>2</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 2 × 3 of type int\n",
       "\\begin{tabular}{lll}\n",
       "\t  0 & 10 & 3\\\\\n",
       "\t 16 & 17 & 2\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 2 × 3 of type int\n",
       "\n",
       "|  0 | 10 | 3 |\n",
       "| 16 | 17 | 2 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1] [,2] [,3]\n",
       "[1,]  0   10   3   \n",
       "[2,] 16   17   2   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<dl>\n",
       "\t<dt>$m1</dt>\n",
       "\t\t<dd><table>\n",
       "<caption>A matrix: 2 × 3 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>8</td><td>10</td><td>10</td></tr>\n",
       "\t<tr><td>7</td><td> 8</td><td>13</td></tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</dd>\n",
       "\t<dt>$m2</dt>\n",
       "\t\t<dd><table>\n",
       "<caption>A matrix: 2 × 3 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>15</td><td> 9</td><td>8</td></tr>\n",
       "\t<tr><td>15</td><td>11</td><td>7</td></tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</dd>\n",
       "\t<dt>$m3</dt>\n",
       "\t\t<dd><table>\n",
       "<caption>A matrix: 2 × 3 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td> 0</td><td>10</td><td>3</td></tr>\n",
       "\t<tr><td>16</td><td>17</td><td>2</td></tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</dd>\n",
       "</dl>\n"
      ],
      "text/latex": [
       "\\begin{description}\n",
       "\\item[\\$m1] A matrix: 2 × 3 of type int\n",
       "\\begin{tabular}{lll}\n",
       "\t 8 & 10 & 10\\\\\n",
       "\t 7 &  8 & 13\\\\\n",
       "\\end{tabular}\n",
       "\n",
       "\\item[\\$m2] A matrix: 2 × 3 of type int\n",
       "\\begin{tabular}{lll}\n",
       "\t 15 &  9 & 8\\\\\n",
       "\t 15 & 11 & 7\\\\\n",
       "\\end{tabular}\n",
       "\n",
       "\\item[\\$m3] A matrix: 2 × 3 of type int\n",
       "\\begin{tabular}{lll}\n",
       "\t  0 & 10 & 3\\\\\n",
       "\t 16 & 17 & 2\\\\\n",
       "\\end{tabular}\n",
       "\n",
       "\\end{description}\n"
      ],
      "text/markdown": [
       "$m1\n",
       ":   \n",
       "A matrix: 2 × 3 of type int\n",
       "\n",
       "| 8 | 10 | 10 |\n",
       "| 7 |  8 | 13 |\n",
       "\n",
       "\n",
       "$m2\n",
       ":   \n",
       "A matrix: 2 × 3 of type int\n",
       "\n",
       "| 15 |  9 | 8 |\n",
       "| 15 | 11 | 7 |\n",
       "\n",
       "\n",
       "$m3\n",
       ":   \n",
       "A matrix: 2 × 3 of type int\n",
       "\n",
       "|  0 | 10 | 3 |\n",
       "| 16 | 17 | 2 |\n",
       "\n",
       "\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "$m1\n",
       "     [,1] [,2] [,3]\n",
       "[1,]    8   10   10\n",
       "[2,]    7    8   13\n",
       "\n",
       "$m2\n",
       "     [,1] [,2] [,3]\n",
       "[1,]   15    9    8\n",
       "[2,]   15   11    7\n",
       "\n",
       "$m3\n",
       "     [,1] [,2] [,3]\n",
       "[1,]    0   10    3\n",
       "[2,]   16   17    2\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<dl>\n",
       "\t<dt>$m1</dt>\n",
       "\t\t<dd>13</dd>\n",
       "\t<dt>$m2</dt>\n",
       "\t\t<dd>7</dd>\n",
       "\t<dt>$m3</dt>\n",
       "\t\t<dd>2</dd>\n",
       "</dl>\n"
      ],
      "text/latex": [
       "\\begin{description}\n",
       "\\item[\\$m1] 13\n",
       "\\item[\\$m2] 7\n",
       "\\item[\\$m3] 2\n",
       "\\end{description}\n"
      ],
      "text/markdown": [
       "$m1\n",
       ":   13\n",
       "$m2\n",
       ":   7\n",
       "$m3\n",
       ":   2\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "$m1\n",
       "[1] 13\n",
       "\n",
       "$m2\n",
       "[1] 7\n",
       "\n",
       "$m3\n",
       "[1] 2\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<dl>\n",
       "\t<dt>$m1</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>8</li><li>13</li></ol>\n",
       "</dd>\n",
       "\t<dt>$m2</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>11</li><li>7</li></ol>\n",
       "</dd>\n",
       "\t<dt>$m3</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>17</li><li>2</li></ol>\n",
       "</dd>\n",
       "</dl>\n"
      ],
      "text/latex": [
       "\\begin{description}\n",
       "\\item[\\$m1] \\begin{enumerate*}\n",
       "\\item 8\n",
       "\\item 13\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$m2] \\begin{enumerate*}\n",
       "\\item 11\n",
       "\\item 7\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$m3] \\begin{enumerate*}\n",
       "\\item 17\n",
       "\\item 2\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\end{description}\n"
      ],
      "text/markdown": [
       "$m1\n",
       ":   1. 8\n",
       "2. 13\n",
       "\n",
       "\n",
       "\n",
       "$m2\n",
       ":   1. 11\n",
       "2. 7\n",
       "\n",
       "\n",
       "\n",
       "$m3\n",
       ":   1. 17\n",
       "2. 2\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "$m1\n",
       "[1]  8 13\n",
       "\n",
       "$m2\n",
       "[1] 11  7\n",
       "\n",
       "$m3\n",
       "[1] 17  2\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<dl>\n",
       "\t<dt>$m1</dt>\n",
       "\t\t<dd><table>\n",
       "<caption>A matrix: 2 × 2 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>10</td><td>10</td></tr>\n",
       "\t<tr><td> 8</td><td>13</td></tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</dd>\n",
       "\t<dt>$m2</dt>\n",
       "\t\t<dd><table>\n",
       "<caption>A matrix: 2 × 2 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td> 9</td><td>8</td></tr>\n",
       "\t<tr><td>11</td><td>7</td></tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</dd>\n",
       "\t<dt>$m3</dt>\n",
       "\t\t<dd><table>\n",
       "<caption>A matrix: 2 × 2 of type int</caption>\n",
       "<tbody>\n",
       "\t<tr><td>10</td><td>3</td></tr>\n",
       "\t<tr><td>17</td><td>2</td></tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</dd>\n",
       "</dl>\n"
      ],
      "text/latex": [
       "\\begin{description}\n",
       "\\item[\\$m1] A matrix: 2 × 2 of type int\n",
       "\\begin{tabular}{ll}\n",
       "\t 10 & 10\\\\\n",
       "\t  8 & 13\\\\\n",
       "\\end{tabular}\n",
       "\n",
       "\\item[\\$m2] A matrix: 2 × 2 of type int\n",
       "\\begin{tabular}{ll}\n",
       "\t  9 & 8\\\\\n",
       "\t 11 & 7\\\\\n",
       "\\end{tabular}\n",
       "\n",
       "\\item[\\$m3] A matrix: 2 × 2 of type int\n",
       "\\begin{tabular}{ll}\n",
       "\t 10 & 3\\\\\n",
       "\t 17 & 2\\\\\n",
       "\\end{tabular}\n",
       "\n",
       "\\end{description}\n"
      ],
      "text/markdown": [
       "$m1\n",
       ":   \n",
       "A matrix: 2 × 2 of type int\n",
       "\n",
       "| 10 | 10 |\n",
       "|  8 | 13 |\n",
       "\n",
       "\n",
       "$m2\n",
       ":   \n",
       "A matrix: 2 × 2 of type int\n",
       "\n",
       "|  9 | 8 |\n",
       "| 11 | 7 |\n",
       "\n",
       "\n",
       "$m3\n",
       ":   \n",
       "A matrix: 2 × 2 of type int\n",
       "\n",
       "| 10 | 3 |\n",
       "| 17 | 2 |\n",
       "\n",
       "\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "$m1\n",
       "     [,1] [,2]\n",
       "[1,]   10   10\n",
       "[2,]    8   13\n",
       "\n",
       "$m2\n",
       "     [,1] [,2]\n",
       "[1,]    9    8\n",
       "[2,]   11    7\n",
       "\n",
       "$m3\n",
       "     [,1] [,2]\n",
       "[1,]   10    3\n",
       "[2,]   17    2\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We see that lapply returns a list with the averages of the \n",
    "# componentes of the original list.\n",
    "\n",
    "## \\texttt{lapply} and the selection operator\n",
    "\n",
    "## The selection operator '[' can be used in combination with lapply\n",
    "3# to extract elements (or columns or rows or subsets) of matrices \n",
    "## in a list of matrices. \n",
    "\n",
    "## To give an example we build a list of three $2x3$ matrices \n",
    "(m1<- matrix(rbinom(6,20,0.5),nrow=2))\n",
    "(m2<- matrix(rpois(6,10),nrow=2))\n",
    "(m3<- matrix(rgeom(6,0.1),nrow=2))\n",
    "(L1 <- list(m1=m1,m2=m2,m3=m3))\n",
    "lapply(L1,'[',2,3)\n",
    "lapply(L1, '[',2,2:3)\n",
    "lapply(L1, '[', 1:2, 2:3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 2 × 11 of type dbl</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>mpg</th><th scope=col>cyl</th><th scope=col>disp</th><th scope=col>hp</th><th scope=col>drat</th><th scope=col>wt</th><th scope=col>qsec</th><th scope=col>vs</th><th scope=col>am</th><th scope=col>gear</th><th scope=col>carb</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>10.4</td><td>4</td><td> 71.1</td><td> 52</td><td>2.76</td><td>1.513</td><td>14.5</td><td>0</td><td>0</td><td>3</td><td>1</td></tr>\n",
       "\t<tr><td>33.9</td><td>8</td><td>472.0</td><td>335</td><td>4.93</td><td>5.424</td><td>22.9</td><td>1</td><td>1</td><td>5</td><td>8</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 2 × 11 of type dbl\n",
       "\\begin{tabular}{lllllllllll}\n",
       " mpg & cyl & disp & hp & drat & wt & qsec & vs & am & gear & carb\\\\\n",
       "\\hline\n",
       "\t 10.4 & 4 &  71.1 &  52 & 2.76 & 1.513 & 14.5 & 0 & 0 & 3 & 1\\\\\n",
       "\t 33.9 & 8 & 472.0 & 335 & 4.93 & 5.424 & 22.9 & 1 & 1 & 5 & 8\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 2 × 11 of type dbl\n",
       "\n",
       "| mpg | cyl | disp | hp | drat | wt | qsec | vs | am | gear | carb |\n",
       "|---|---|---|---|---|---|---|---|---|---|---|\n",
       "| 10.4 | 4 |  71.1 |  52 | 2.76 | 1.513 | 14.5 | 0 | 0 | 3 | 1 |\n",
       "| 33.9 | 8 | 472.0 | 335 | 4.93 | 5.424 | 22.9 | 1 | 1 | 5 | 8 |\n",
       "\n"
      ],
      "text/plain": [
       "     mpg  cyl disp  hp  drat wt    qsec vs am gear carb\n",
       "[1,] 10.4 4    71.1  52 2.76 1.513 14.5 0  0  3    1   \n",
       "[2,] 33.9 8   472.0 335 4.93 5.424 22.9 1  1  5    8   "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## sapply and apply\n",
    "\n",
    "# Other similar functions are apply and sapply. apply is used to \n",
    "# apply a function to margins of an array or matrix. The syntax is \n",
    "###\n",
    "# apply(X, MARGIN, FUN, ...)\n",
    "###\n",
    "\n",
    "apply(mtcars, 2, range)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".dl-inline {width: auto; margin:0; padding: 0}\n",
       ".dl-inline>dt, .dl-inline>dd {float: none; width: auto; display: inline-block}\n",
       ".dl-inline>dt::after {content: \":\\0020\"; padding-right: .5ex}\n",
       ".dl-inline>dt:not(:first-of-type) {padding-left: .5ex}\n",
       "</style><dl class=dl-inline><dt>vec</dt><dd>5.5</dd><dt>mat</dt><dd>93.5</dd></dl>\n"
      ],
      "text/latex": [
       "\\begin{description*}\n",
       "\\item[vec] 5.5\n",
       "\\item[mat] 93.5\n",
       "\\end{description*}\n"
      ],
      "text/markdown": [
       "vec\n",
       ":   5.5mat\n",
       ":   93.5\n",
       "\n"
      ],
      "text/plain": [
       " vec  mat \n",
       " 5.5 93.5 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Named num [1:2] 5.5 93.5\n",
      " - attr(*, \"names\")= chr [1:2] \"vec\" \"mat\"\n"
     ]
    }
   ],
   "source": [
    "#  sapply is similar to lapply but, by default, returns a vector \n",
    "# or matrix, if possible:\n",
    "\n",
    "(res2 <- sapply (L, mean))\n",
    "str(res2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".dl-inline {width: auto; margin:0; padding: 0}\n",
       ".dl-inline>dt, .dl-inline>dd {float: none; width: auto; display: inline-block}\n",
       ".dl-inline>dt::after {content: \":\\0020\"; padding-right: .5ex}\n",
       ".dl-inline>dt:not(:first-of-type) {padding-left: .5ex}\n",
       "</style><dl class=dl-inline><dt>vec</dt><dd>5.5</dd><dt>mat</dt><dd>93.5</dd></dl>\n"
      ],
      "text/latex": [
       "\\begin{description*}\n",
       "\\item[vec] 5.5\n",
       "\\item[mat] 93.5\n",
       "\\end{description*}\n"
      ],
      "text/markdown": [
       "vec\n",
       ":   5.5mat\n",
       ":   93.5\n",
       "\n"
      ],
      "text/plain": [
       " vec  mat \n",
       " 5.5 93.5 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# A similar result can be obtained with the function unlist\n",
    "\n",
    "unlist(lapply(L, mean))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "List of 12\n",
      " $ coefficients : Named num [1:2] 79.61 -0.862\n",
      "  ..- attr(*, \"names\")= chr [1:2] \"(Intercept)\" \"Education\"\n",
      " $ residuals    : Named num [1:47] 10.9 11.3 17.2 12.2 10.2 ...\n",
      "  ..- attr(*, \"names\")= chr [1:47] \"Courtelary\" \"Delemont\" \"Franches-Mnt\" \"Moutier\" ...\n",
      " $ effects      : Named num [1:47] -480.9 -56.2 14.9 10.2 9.4 ...\n",
      "  ..- attr(*, \"names\")= chr [1:47] \"(Intercept)\" \"Education\" \"\" \"\" ...\n",
      " $ rank         : int 2\n",
      " $ fitted.values: Named num [1:47] 69.3 71.8 75.3 73.6 66.7 ...\n",
      "  ..- attr(*, \"names\")= chr [1:47] \"Courtelary\" \"Delemont\" \"Franches-Mnt\" \"Moutier\" ...\n",
      " $ assign       : int [1:2] 0 1\n",
      " $ qr           :List of 5\n",
      "  ..$ qr   : num [1:47, 1:2] -6.856 0.146 0.146 0.146 0.146 ...\n",
      "  .. ..- attr(*, \"dimnames\")=List of 2\n",
      "  .. .. ..$ : chr [1:47] \"Courtelary\" \"Delemont\" \"Franches-Mnt\" \"Moutier\" ...\n",
      "  .. .. ..$ : chr [1:2] \"(Intercept)\" \"Education\"\n",
      "  .. ..- attr(*, \"assign\")= int [1:2] 0 1\n",
      "  ..$ qraux: num [1:2] 1.15 1.03\n",
      "  ..$ pivot: int [1:2] 1 2\n",
      "  ..$ tol  : num 1e-07\n",
      "  ..$ rank : int 2\n",
      "  ..- attr(*, \"class\")= chr \"qr\"\n",
      " $ df.residual  : int 45\n",
      " $ xlevels      : Named list()\n",
      " $ call         : language lm(formula = Fertility ~ Education, data = swiss)\n",
      " $ terms        :Classes 'terms', 'formula'  language Fertility ~ Education\n",
      "  .. ..- attr(*, \"variables\")= language list(Fertility, Education)\n",
      "  .. ..- attr(*, \"factors\")= int [1:2, 1] 0 1\n",
      "  .. .. ..- attr(*, \"dimnames\")=List of 2\n",
      "  .. .. .. ..$ : chr [1:2] \"Fertility\" \"Education\"\n",
      "  .. .. .. ..$ : chr \"Education\"\n",
      "  .. ..- attr(*, \"term.labels\")= chr \"Education\"\n",
      "  .. ..- attr(*, \"order\")= int 1\n",
      "  .. ..- attr(*, \"intercept\")= int 1\n",
      "  .. ..- attr(*, \"response\")= int 1\n",
      "  .. ..- attr(*, \".Environment\")=<environment: R_GlobalEnv> \n",
      "  .. ..- attr(*, \"predvars\")= language list(Fertility, Education)\n",
      "  .. ..- attr(*, \"dataClasses\")= Named chr [1:2] \"numeric\" \"numeric\"\n",
      "  .. .. ..- attr(*, \"names\")= chr [1:2] \"Fertility\" \"Education\"\n",
      " $ model        :'data.frame':\t47 obs. of  2 variables:\n",
      "  ..$ Fertility: num [1:47] 80.2 83.1 92.5 85.8 76.9 76.1 83.8 92.4 82.4 82.9 ...\n",
      "  ..$ Education: int [1:47] 12 9 5 7 15 7 7 8 7 13 ...\n",
      "  ..- attr(*, \"terms\")=Classes 'terms', 'formula'  language Fertility ~ Education\n",
      "  .. .. ..- attr(*, \"variables\")= language list(Fertility, Education)\n",
      "  .. .. ..- attr(*, \"factors\")= int [1:2, 1] 0 1\n",
      "  .. .. .. ..- attr(*, \"dimnames\")=List of 2\n",
      "  .. .. .. .. ..$ : chr [1:2] \"Fertility\" \"Education\"\n",
      "  .. .. .. .. ..$ : chr \"Education\"\n",
      "  .. .. ..- attr(*, \"term.labels\")= chr \"Education\"\n",
      "  .. .. ..- attr(*, \"order\")= int 1\n",
      "  .. .. ..- attr(*, \"intercept\")= int 1\n",
      "  .. .. ..- attr(*, \"response\")= int 1\n",
      "  .. .. ..- attr(*, \".Environment\")=<environment: R_GlobalEnv> \n",
      "  .. .. ..- attr(*, \"predvars\")= language list(Fertility, Education)\n",
      "  .. .. ..- attr(*, \"dataClasses\")= Named chr [1:2] \"numeric\" \"numeric\"\n",
      "  .. .. .. ..- attr(*, \"names\")= chr [1:2] \"Fertility\" \"Education\"\n",
      " - attr(*, \"class\")= chr \"lm\"\n"
     ]
    }
   ],
   "source": [
    "# R has functions for calculating several statistics from a sample. \n",
    "# For numerical data we have, among others, the following\n",
    "# \n",
    "# \\begin{center}\n",
    "# \\begin{tabular}{ll}\n",
    "# \\hline\n",
    "# Function & Operation\\\\\n",
    "# \\hline \\texttt{mean()}& Average\\\\\n",
    "# \\texttt{median()}& Median\\\\\n",
    "# \\texttt{fivenum()}& 5 Number  summary\\\\\n",
    "# \\texttt{summary()}& Numerical summary\\\\\n",
    "# \\texttt{min(), max()} & Smallest and largest value in the sample\\\\\n",
    "# \\texttt{quantile()}& Sample quantiles \\\\\n",
    "# \\texttt{var(), sd()} & Variance and standard deviation\\\\\n",
    "# \\texttt{cov(), cor()} & Covariance and correlation\n",
    "# \\end{tabular}\n",
    "# \\end{center}\n",
    "\n",
    "# Lists are often used in R to store the result of a function \n",
    "# that has some complexity. To see an example let's consider the \n",
    "# result of a linear regression:\n",
    "\n",
    "fit1 <- lm(Fertility ~ Education, data=swiss)\n",
    "str(fit1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<dl>\n",
       "\t<dt>$`Grand Rapids`</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>32.96667</li><li>29.13333</li><li>29.66667</li><li>23.03333</li><li>29.76667</li><li>32.16667</li><li>24.93334</li><li>34.7</li><li>19.7</li><li>34.46667</li><li>22.13333</li><li>14.43333</li><li>16.63333</li><li>32.23333</li><li>20.63333</li><li>19.46667</li><li>19.9</li><li>26.76667</li><li>15.23333</li><li>20.66667</li></ol>\n",
       "</dd>\n",
       "\t<dt>$Duluth</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>28.96667</li><li>29.66667</li><li>25.7</li><li>26.3</li><li>33.93333</li><li>33.6</li><li>28.1</li><li>32</li><li>33.06666</li><li>31.6</li><li>22.56667</li><li>25.86667</li><li>22.23333</li><li>22.46667</li><li>30.6</li><li>22.7</li><li>22.5</li><li>31.36667</li><li>27.36667</li><li>29.33333</li></ol>\n",
       "</dd>\n",
       "\t<dt>$`University Farm`</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>27</li><li>43.06666</li><li>35.13333</li><li>39.9</li><li>36.56666</li><li>43.26667</li><li>36.6</li><li>32.76667</li><li>24.66667</li><li>39.3</li><li>26.9</li><li>36.8</li><li>27.43334</li><li>26.8</li><li>29.06667</li><li>26.43334</li><li>25.56667</li><li>28.06667</li><li>30</li><li>38</li></ol>\n",
       "</dd>\n",
       "\t<dt>$Morris</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>27.43334</li><li>28.76667</li><li>25.76667</li><li>26.13333</li><li>43.76667</li><li>28.7</li><li>30.36667</li><li>29.86667</li><li>22.6</li><li>29.46667</li><li>34.36666</li><li>35.13333</li><li>35.03333</li><li>38.83333</li><li>46.63333</li><li>43.53334</li><li>47</li><li>43.2</li><li>44.23333</li><li>47.16667</li></ol>\n",
       "</dd>\n",
       "\t<dt>$Crookston</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>39.93333</li><li>38.13333</li><li>40.46667</li><li>41.33333</li><li>46.93333</li><li>45.66667</li><li>48.56666</li><li>41.6</li><li>44.1</li><li>49.86667</li><li>32.96667</li><li>26.16667</li><li>20.63333</li><li>32.06666</li><li>41.83333</li><li>34.33333</li><li>30.53333</li><li>25.23333</li><li>32.13333</li><li>35.9</li></ol>\n",
       "</dd>\n",
       "\t<dt>$Waseca</dt>\n",
       "\t\t<dd><style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>48.86667</li><li>55.2</li><li>47.33333</li><li>50.23333</li><li>63.8333</li><li>58.1</li><li>65.7667</li><li>48.56666</li><li>46.76667</li><li>58.8</li><li>33.46667</li><li>37.73333</li><li>38.5</li><li>37.4</li><li>49.2333</li><li>42.2</li><li>44.7</li><li>36.03333</li><li>41.26667</li><li>58.16667</li></ol>\n",
       "</dd>\n",
       "</dl>\n"
      ],
      "text/latex": [
       "\\begin{description}\n",
       "\\item[\\$`Grand Rapids`] \\begin{enumerate*}\n",
       "\\item 32.96667\n",
       "\\item 29.13333\n",
       "\\item 29.66667\n",
       "\\item 23.03333\n",
       "\\item 29.76667\n",
       "\\item 32.16667\n",
       "\\item 24.93334\n",
       "\\item 34.7\n",
       "\\item 19.7\n",
       "\\item 34.46667\n",
       "\\item 22.13333\n",
       "\\item 14.43333\n",
       "\\item 16.63333\n",
       "\\item 32.23333\n",
       "\\item 20.63333\n",
       "\\item 19.46667\n",
       "\\item 19.9\n",
       "\\item 26.76667\n",
       "\\item 15.23333\n",
       "\\item 20.66667\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$Duluth] \\begin{enumerate*}\n",
       "\\item 28.96667\n",
       "\\item 29.66667\n",
       "\\item 25.7\n",
       "\\item 26.3\n",
       "\\item 33.93333\n",
       "\\item 33.6\n",
       "\\item 28.1\n",
       "\\item 32\n",
       "\\item 33.06666\n",
       "\\item 31.6\n",
       "\\item 22.56667\n",
       "\\item 25.86667\n",
       "\\item 22.23333\n",
       "\\item 22.46667\n",
       "\\item 30.6\n",
       "\\item 22.7\n",
       "\\item 22.5\n",
       "\\item 31.36667\n",
       "\\item 27.36667\n",
       "\\item 29.33333\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$`University Farm`] \\begin{enumerate*}\n",
       "\\item 27\n",
       "\\item 43.06666\n",
       "\\item 35.13333\n",
       "\\item 39.9\n",
       "\\item 36.56666\n",
       "\\item 43.26667\n",
       "\\item 36.6\n",
       "\\item 32.76667\n",
       "\\item 24.66667\n",
       "\\item 39.3\n",
       "\\item 26.9\n",
       "\\item 36.8\n",
       "\\item 27.43334\n",
       "\\item 26.8\n",
       "\\item 29.06667\n",
       "\\item 26.43334\n",
       "\\item 25.56667\n",
       "\\item 28.06667\n",
       "\\item 30\n",
       "\\item 38\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$Morris] \\begin{enumerate*}\n",
       "\\item 27.43334\n",
       "\\item 28.76667\n",
       "\\item 25.76667\n",
       "\\item 26.13333\n",
       "\\item 43.76667\n",
       "\\item 28.7\n",
       "\\item 30.36667\n",
       "\\item 29.86667\n",
       "\\item 22.6\n",
       "\\item 29.46667\n",
       "\\item 34.36666\n",
       "\\item 35.13333\n",
       "\\item 35.03333\n",
       "\\item 38.83333\n",
       "\\item 46.63333\n",
       "\\item 43.53334\n",
       "\\item 47\n",
       "\\item 43.2\n",
       "\\item 44.23333\n",
       "\\item 47.16667\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$Crookston] \\begin{enumerate*}\n",
       "\\item 39.93333\n",
       "\\item 38.13333\n",
       "\\item 40.46667\n",
       "\\item 41.33333\n",
       "\\item 46.93333\n",
       "\\item 45.66667\n",
       "\\item 48.56666\n",
       "\\item 41.6\n",
       "\\item 44.1\n",
       "\\item 49.86667\n",
       "\\item 32.96667\n",
       "\\item 26.16667\n",
       "\\item 20.63333\n",
       "\\item 32.06666\n",
       "\\item 41.83333\n",
       "\\item 34.33333\n",
       "\\item 30.53333\n",
       "\\item 25.23333\n",
       "\\item 32.13333\n",
       "\\item 35.9\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\item[\\$Waseca] \\begin{enumerate*}\n",
       "\\item 48.86667\n",
       "\\item 55.2\n",
       "\\item 47.33333\n",
       "\\item 50.23333\n",
       "\\item 63.8333\n",
       "\\item 58.1\n",
       "\\item 65.7667\n",
       "\\item 48.56666\n",
       "\\item 46.76667\n",
       "\\item 58.8\n",
       "\\item 33.46667\n",
       "\\item 37.73333\n",
       "\\item 38.5\n",
       "\\item 37.4\n",
       "\\item 49.2333\n",
       "\\item 42.2\n",
       "\\item 44.7\n",
       "\\item 36.03333\n",
       "\\item 41.26667\n",
       "\\item 58.16667\n",
       "\\end{enumerate*}\n",
       "\n",
       "\\end{description}\n"
      ],
      "text/markdown": [
       "$`Grand Rapids`\n",
       ":   1. 32.96667\n",
       "2. 29.13333\n",
       "3. 29.66667\n",
       "4. 23.03333\n",
       "5. 29.76667\n",
       "6. 32.16667\n",
       "7. 24.93334\n",
       "8. 34.7\n",
       "9. 19.7\n",
       "10. 34.46667\n",
       "11. 22.13333\n",
       "12. 14.43333\n",
       "13. 16.63333\n",
       "14. 32.23333\n",
       "15. 20.63333\n",
       "16. 19.46667\n",
       "17. 19.9\n",
       "18. 26.76667\n",
       "19. 15.23333\n",
       "20. 20.66667\n",
       "\n",
       "\n",
       "\n",
       "$Duluth\n",
       ":   1. 28.96667\n",
       "2. 29.66667\n",
       "3. 25.7\n",
       "4. 26.3\n",
       "5. 33.93333\n",
       "6. 33.6\n",
       "7. 28.1\n",
       "8. 32\n",
       "9. 33.06666\n",
       "10. 31.6\n",
       "11. 22.56667\n",
       "12. 25.86667\n",
       "13. 22.23333\n",
       "14. 22.46667\n",
       "15. 30.6\n",
       "16. 22.7\n",
       "17. 22.5\n",
       "18. 31.36667\n",
       "19. 27.36667\n",
       "20. 29.33333\n",
       "\n",
       "\n",
       "\n",
       "$`University Farm`\n",
       ":   1. 27\n",
       "2. 43.06666\n",
       "3. 35.13333\n",
       "4. 39.9\n",
       "5. 36.56666\n",
       "6. 43.26667\n",
       "7. 36.6\n",
       "8. 32.76667\n",
       "9. 24.66667\n",
       "10. 39.3\n",
       "11. 26.9\n",
       "12. 36.8\n",
       "13. 27.43334\n",
       "14. 26.8\n",
       "15. 29.06667\n",
       "16. 26.43334\n",
       "17. 25.56667\n",
       "18. 28.06667\n",
       "19. 30\n",
       "20. 38\n",
       "\n",
       "\n",
       "\n",
       "$Morris\n",
       ":   1. 27.43334\n",
       "2. 28.76667\n",
       "3. 25.76667\n",
       "4. 26.13333\n",
       "5. 43.76667\n",
       "6. 28.7\n",
       "7. 30.36667\n",
       "8. 29.86667\n",
       "9. 22.6\n",
       "10. 29.46667\n",
       "11. 34.36666\n",
       "12. 35.13333\n",
       "13. 35.03333\n",
       "14. 38.83333\n",
       "15. 46.63333\n",
       "16. 43.53334\n",
       "17. 47\n",
       "18. 43.2\n",
       "19. 44.23333\n",
       "20. 47.16667\n",
       "\n",
       "\n",
       "\n",
       "$Crookston\n",
       ":   1. 39.93333\n",
       "2. 38.13333\n",
       "3. 40.46667\n",
       "4. 41.33333\n",
       "5. 46.93333\n",
       "6. 45.66667\n",
       "7. 48.56666\n",
       "8. 41.6\n",
       "9. 44.1\n",
       "10. 49.86667\n",
       "11. 32.96667\n",
       "12. 26.16667\n",
       "13. 20.63333\n",
       "14. 32.06666\n",
       "15. 41.83333\n",
       "16. 34.33333\n",
       "17. 30.53333\n",
       "18. 25.23333\n",
       "19. 32.13333\n",
       "20. 35.9\n",
       "\n",
       "\n",
       "\n",
       "$Waseca\n",
       ":   1. 48.86667\n",
       "2. 55.2\n",
       "3. 47.33333\n",
       "4. 50.23333\n",
       "5. 63.8333\n",
       "6. 58.1\n",
       "7. 65.7667\n",
       "8. 48.56666\n",
       "9. 46.76667\n",
       "10. 58.8\n",
       "11. 33.46667\n",
       "12. 37.73333\n",
       "13. 38.5\n",
       "14. 37.4\n",
       "15. 49.2333\n",
       "16. 42.2\n",
       "17. 44.7\n",
       "18. 36.03333\n",
       "19. 41.26667\n",
       "20. 58.16667\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "$`Grand Rapids`\n",
       " [1] 32.96667 29.13333 29.66667 23.03333 29.76667 32.16667 24.93334 34.70000\n",
       " [9] 19.70000 34.46667 22.13333 14.43333 16.63333 32.23333 20.63333 19.46667\n",
       "[17] 19.90000 26.76667 15.23333 20.66667\n",
       "\n",
       "$Duluth\n",
       " [1] 28.96667 29.66667 25.70000 26.30000 33.93333 33.60000 28.10000 32.00000\n",
       " [9] 33.06666 31.60000 22.56667 25.86667 22.23333 22.46667 30.60000 22.70000\n",
       "[17] 22.50000 31.36667 27.36667 29.33333\n",
       "\n",
       "$`University Farm`\n",
       " [1] 27.00000 43.06666 35.13333 39.90000 36.56666 43.26667 36.60000 32.76667\n",
       " [9] 24.66667 39.30000 26.90000 36.80000 27.43334 26.80000 29.06667 26.43334\n",
       "[17] 25.56667 28.06667 30.00000 38.00000\n",
       "\n",
       "$Morris\n",
       " [1] 27.43334 28.76667 25.76667 26.13333 43.76667 28.70000 30.36667 29.86667\n",
       " [9] 22.60000 29.46667 34.36666 35.13333 35.03333 38.83333 46.63333 43.53334\n",
       "[17] 47.00000 43.20000 44.23333 47.16667\n",
       "\n",
       "$Crookston\n",
       " [1] 39.93333 38.13333 40.46667 41.33333 46.93333 45.66667 48.56666 41.60000\n",
       " [9] 44.10000 49.86667 32.96667 26.16667 20.63333 32.06666 41.83333 34.33333\n",
       "[17] 30.53333 25.23333 32.13333 35.90000\n",
       "\n",
       "$Waseca\n",
       " [1] 48.86667 55.20000 47.33333 50.23333 63.83330 58.10000 65.76670 48.56666\n",
       " [9] 46.76667 58.80000 33.46667 37.73333 38.50000 37.40000 49.23330 42.20000\n",
       "[17] 44.70000 36.03333 41.26667 58.16667\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The result of linear regression is a very complex list that has \n",
    "# stored a great deal of information about the fitted model. \n",
    "\n",
    "### split\n",
    "# The function \\texttt{split} divides the values of one variable \n",
    "# according to the values of another. The result is a list that \n",
    "# has as many elements as the second variable has different values. \n",
    "# For example, the command\n",
    "\n",
    "\n",
    "library(lattice)\n",
    "split(barley$yield, barley$site)\n",
    "\n",
    "# produces a list with six elements, since there are six \n",
    "# experimental stations in the data.\n",
    "# Each component of the list contains the yield for one of the \n",
    "# experimental stations. The names of the components in the list \n",
    "# correspond to the levels of the variable site.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
