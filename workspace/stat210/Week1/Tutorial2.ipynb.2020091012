{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "'/ibex/scratch/longy/workspace/stat210/Week1'"
      ],
      "text/latex": [
       "'/ibex/scratch/longy/workspace/stat210/Week1'"
      ],
      "text/markdown": [
       "'/ibex/scratch/longy/workspace/stat210/Week1'"
      ],
      "text/plain": [
       "[1] \"/ibex/scratch/longy/workspace/stat210/Week1\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "getwd() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "setwd('/ibex/scratch/longy/workspace/stat210/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "'/ibex/scratch/longy/workspace/stat210'"
      ],
      "text/latex": [
       "'/ibex/scratch/longy/workspace/stat210'"
      ],
      "text/markdown": [
       "'/ibex/scratch/longy/workspace/stat210'"
      ],
      "text/plain": [
       "[1] \"/ibex/scratch/longy/workspace/stat210\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "getwd() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "setwd('/ibex/scratch/longy/workspace/stat210/Week1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [],
      "text/latex": [],
      "text/markdown": [],
      "text/plain": [
       "character(0)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ls()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre class=language-r><code>function (x, na.rm = FALSE) \n",
       "sqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x), \n",
       "<span style=white-space:pre-wrap>    na.rm = na.rm))</span></code></pre>"
      ],
      "text/latex": [
       "\\begin{minted}{r}\n",
       "function (x, na.rm = FALSE) \n",
       "sqrt(var(if (is.vector(x) \\textbar{}\\textbar{} is.factor(x)) x else as.double(x), \n",
       "    na.rm = na.rm))\n",
       "\\end{minted}"
      ],
      "text/markdown": [
       "```r\n",
       "function (x, na.rm = FALSE) \n",
       "sqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x), \n",
       "    na.rm = na.rm))\n",
       "```"
      ],
      "text/plain": [
       "function (x, na.rm = FALSE) \n",
       "sqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x), \n",
       "    na.rm = na.rm))\n",
       "<bytecode: 0x55a26b93f8d0>\n",
       "<environment: namespace:stats>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 19 × 2</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>temperature</th><th scope=col>pressure</th></tr>\n",
       "\t<tr><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>  0</td><td>  0.0002</td></tr>\n",
       "\t<tr><td> 20</td><td>  0.0012</td></tr>\n",
       "\t<tr><td> 40</td><td>  0.0060</td></tr>\n",
       "\t<tr><td> 60</td><td>  0.0300</td></tr>\n",
       "\t<tr><td> 80</td><td>  0.0900</td></tr>\n",
       "\t<tr><td>100</td><td>  0.2700</td></tr>\n",
       "\t<tr><td>120</td><td>  0.7500</td></tr>\n",
       "\t<tr><td>140</td><td>  1.8500</td></tr>\n",
       "\t<tr><td>160</td><td>  4.2000</td></tr>\n",
       "\t<tr><td>180</td><td>  8.8000</td></tr>\n",
       "\t<tr><td>200</td><td> 17.3000</td></tr>\n",
       "\t<tr><td>220</td><td> 32.1000</td></tr>\n",
       "\t<tr><td>240</td><td> 57.0000</td></tr>\n",
       "\t<tr><td>260</td><td> 96.0000</td></tr>\n",
       "\t<tr><td>280</td><td>157.0000</td></tr>\n",
       "\t<tr><td>300</td><td>247.0000</td></tr>\n",
       "\t<tr><td>320</td><td>376.0000</td></tr>\n",
       "\t<tr><td>340</td><td>558.0000</td></tr>\n",
       "\t<tr><td>360</td><td>806.0000</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 19 × 2\n",
       "\\begin{tabular}{ll}\n",
       " temperature & pressure\\\\\n",
       " <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t   0 &   0.0002\\\\\n",
       "\t  20 &   0.0012\\\\\n",
       "\t  40 &   0.0060\\\\\n",
       "\t  60 &   0.0300\\\\\n",
       "\t  80 &   0.0900\\\\\n",
       "\t 100 &   0.2700\\\\\n",
       "\t 120 &   0.7500\\\\\n",
       "\t 140 &   1.8500\\\\\n",
       "\t 160 &   4.2000\\\\\n",
       "\t 180 &   8.8000\\\\\n",
       "\t 200 &  17.3000\\\\\n",
       "\t 220 &  32.1000\\\\\n",
       "\t 240 &  57.0000\\\\\n",
       "\t 260 &  96.0000\\\\\n",
       "\t 280 & 157.0000\\\\\n",
       "\t 300 & 247.0000\\\\\n",
       "\t 320 & 376.0000\\\\\n",
       "\t 340 & 558.0000\\\\\n",
       "\t 360 & 806.0000\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 19 × 2\n",
       "\n",
       "| temperature &lt;dbl&gt; | pressure &lt;dbl&gt; |\n",
       "|---|---|\n",
       "|   0 |   0.0002 |\n",
       "|  20 |   0.0012 |\n",
       "|  40 |   0.0060 |\n",
       "|  60 |   0.0300 |\n",
       "|  80 |   0.0900 |\n",
       "| 100 |   0.2700 |\n",
       "| 120 |   0.7500 |\n",
       "| 140 |   1.8500 |\n",
       "| 160 |   4.2000 |\n",
       "| 180 |   8.8000 |\n",
       "| 200 |  17.3000 |\n",
       "| 220 |  32.1000 |\n",
       "| 240 |  57.0000 |\n",
       "| 260 |  96.0000 |\n",
       "| 280 | 157.0000 |\n",
       "| 300 | 247.0000 |\n",
       "| 320 | 376.0000 |\n",
       "| 340 | 558.0000 |\n",
       "| 360 | 806.0000 |\n",
       "\n"
      ],
      "text/plain": [
       "   temperature pressure\n",
       "1    0           0.0002\n",
       "2   20           0.0012\n",
       "3   40           0.0060\n",
       "4   60           0.0300\n",
       "5   80           0.0900\n",
       "6  100           0.2700\n",
       "7  120           0.7500\n",
       "8  140           1.8500\n",
       "9  160           4.2000\n",
       "10 180           8.8000\n",
       "11 200          17.3000\n",
       "12 220          32.1000\n",
       "13 240          57.0000\n",
       "14 260          96.0000\n",
       "15 280         157.0000\n",
       "16 300         247.0000\n",
       "17 320         376.0000\n",
       "18 340         558.0000\n",
       "19 360         806.0000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "2.30258509299405"
      ],
      "text/latex": [
       "2.30258509299405"
      ],
      "text/markdown": [
       "2.30258509299405"
      ],
      "text/plain": [
       "[1] 2.302585"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1.38493542219562</li><li>0.82473207548894</li><li>1.09530253372206</li><li>1.28111594807605</li><li>0.900584793751159</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1.38493542219562\n",
       "\\item 0.82473207548894\n",
       "\\item 1.09530253372206\n",
       "\\item 1.28111594807605\n",
       "\\item 0.900584793751159\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1.38493542219562\n",
       "2. 0.82473207548894\n",
       "3. 1.09530253372206\n",
       "4. 1.28111594807605\n",
       "5. 0.900584793751159\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 1.3849354 0.8247321 1.0953025 1.2811159 0.9005848"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 6 × 2</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>speed</th><th scope=col>dist</th></tr>\n",
       "\t<tr><th></th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>4</td><td> 2</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>4</td><td>10</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>7</td><td> 4</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>7</td><td>22</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>8</td><td>16</td></tr>\n",
       "\t<tr><th scope=row>6</th><td>9</td><td>10</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 × 2\n",
       "\\begin{tabular}{r|ll}\n",
       "  & speed & dist\\\\\n",
       "  & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t1 & 4 &  2\\\\\n",
       "\t2 & 4 & 10\\\\\n",
       "\t3 & 7 &  4\\\\\n",
       "\t4 & 7 & 22\\\\\n",
       "\t5 & 8 & 16\\\\\n",
       "\t6 & 9 & 10\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 × 2\n",
       "\n",
       "| <!--/--> | speed &lt;dbl&gt; | dist &lt;dbl&gt; |\n",
       "|---|---|---|\n",
       "| 1 | 4 |  2 |\n",
       "| 2 | 4 | 10 |\n",
       "| 3 | 7 |  4 |\n",
       "| 4 | 7 | 22 |\n",
       "| 5 | 8 | 16 |\n",
       "| 6 | 9 | 10 |\n",
       "\n"
      ],
      "text/plain": [
       "  speed dist\n",
       "1 4      2  \n",
       "2 4     10  \n",
       "3 7      4  \n",
       "4 7     22  \n",
       "5 8     16  \n",
       "6 9     10  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'data.frame':\t50 obs. of  2 variables:\n",
      " $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n",
      " $ dist : num  2 10 4 22 16 10 18 26 34 17 ...\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0gAAANICAMAAADKOT/pAAADAFBMVEUAAAABAQECAgIDAwME\nBAQFBQUGBgYHBwcICAgJCQkKCgoLCwsMDAwNDQ0ODg4PDw8QEBARERESEhITExMUFBQVFRUW\nFhYXFxcYGBgZGRkaGhobGxscHBwdHR0eHh4fHx8gICAhISEiIiIjIyMkJCQlJSUmJiYnJyco\nKCgpKSkqKiorKyssLCwtLS0uLi4vLy8wMDAxMTEyMjIzMzM0NDQ1NTU2NjY3Nzc4ODg5OTk6\nOjo7Ozs8PDw9PT0+Pj4/Pz9AQEBBQUFCQkJDQ0NERERFRUVGRkZHR0dISEhJSUlKSkpLS0tM\nTExNTU1OTk5PT09QUFBRUVFSUlJTU1NUVFRVVVVWVlZXV1dYWFhZWVlaWlpbW1tcXFxdXV1e\nXl5fX19gYGBhYWFiYmJjY2NkZGRlZWVmZmZnZ2doaGhpaWlqampra2tsbGxtbW1ubm5vb29w\ncHBxcXFycnJzc3N0dHR1dXV2dnZ3d3d4eHh5eXl6enp7e3t8fHx9fX1+fn5/f3+AgICBgYGC\ngoKDg4OEhISFhYWGhoaHh4eIiIiJiYmKioqLi4uMjIyNjY2Ojo6Pj4+QkJCRkZGSkpKTk5OU\nlJSVlZWWlpaXl5eYmJiZmZmampqbm5ucnJydnZ2enp6fn5+goKChoaGioqKjo6OkpKSlpaWm\npqanp6eoqKipqamqqqqrq6usrKytra2urq6vr6+wsLCxsbGysrKzs7O0tLS1tbW2tra3t7e4\nuLi5ubm6urq7u7u8vLy9vb2+vr6/v7/AwMDBwcHCwsLDw8PExMTFxcXGxsbHx8fIyMjJycnK\nysrLy8vMzMzNzc3Ozs7Pz8/Q0NDR0dHS0tLT09PU1NTV1dXW1tbX19fY2NjZ2dna2trb29vc\n3Nzd3d3e3t7f39/g4ODh4eHi4uLj4+Pk5OTl5eXm5ubn5+fo6Ojp6enq6urr6+vs7Ozt7e3u\n7u7v7+/w8PDx8fHy8vLz8/P09PT19fX29vb39/f4+Pj5+fn6+vr7+/v8/Pz9/f3+/v7////i\nsF19AAAACXBIWXMAABJ0AAASdAHeZh94AAAgAElEQVR4nO3dB3hT5f7A8TdtU2ihRZAtUKao\nTBEFFRAFF0MUBAQVKjjY8Be0Dq7gYFgURQVUHIjXrVXAjShchiCgiIpKQRAQBxsKbaFt/k3O\n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\nAggJEEBIgABCAgQQEiCAkAABhAQIICRAACEBAggJEEBIgABCAgQQEiCAkAABhAQIIKQwFN3G\n6hlEHkIKQ4RkPkIKQ4RkPkIKQ4RkPkKyvazU5onlm6XmejxXq12Dq8Y2nuX9t38Mq+Ou3OOr\nfwzfb1W2yuD9hGQ+QrK9m1T/2U9fo4Z7PH3VeSkrll2q5ng8fyVVSHl5cq0yS/42XBZdc/Kc\nG9q7Ccl0hGR78ed7v/5fr5z8kPrljw6UqevxDI1Zkz/cntD6b8MrlPfn0jBFSKYjJNurUPNP\nfdRXzfcuOqtdeZVb/e51uTp80jA3roF3/TeEZD5Csr0ZKvHGF3Z6R33Vj97FQPX1H6rADycN\nd6pLveszCcl8hGR/i68up1xdtnlD+tX7z8PU5+mq5Uea/ScNN6nuvh1chGQ6QnKCrEUDXQ2z\n80Pa6P2n69W3f6iWBetOGu7QfiId5ieS+QjJIYaq1fkhveMdnqf+8lQuu987/Cv/P4XD47EN\nvaMVhGQ+QrK7L2u+5F0MV1/nh9Q1f/Szq7G3q3vyh39V7/a3YUffq3b9Ccl8hGR3x5vG3jJz\n1qCodnn5IXXu9vSsuuoVj+fPOuqmuZPruD/92/BDV9W7pnW7pAIhmY6QbG/vmAbxFVpMPux9\nsSF9TM3Ys+Z6/+3vQ2vHnHLV6n8MX28WW2XQ/tpnWznfyERIDtJX7bB6CigCITkIIdkXITkI\nIdkXITkIIdkXIQECCAkQQEiAAEICBBASIICQAAGEBAggJEAAIQECCAkQQEiAAEICBBASIICQ\nAAGEBAggJEAAIQECCAkQQEiAAEICBBASIICQAAGEBAggJEAAIQECCAkQQEiAgP8HTJX1S/XE\nBu8AAAAASUVORK5CYII=",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 420
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sd\n",
    "\n",
    "pressure\n",
    "\n",
    "log(10)\n",
    "\n",
    "rnorm(5)\n",
    "\n",
    "data()\n",
    "\n",
    "data(cars)\n",
    "\n",
    "plot(cars)\n",
    "\n",
    "head(cars)\n",
    "\n",
    "str(cars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "x <-c(1, 1.5,2,2.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>1.5</li><li>2</li><li>2.5</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 1.5\n",
       "\\item 2\n",
       "\\item 2.5\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 1.5\n",
       "3. 2\n",
       "4. 2.5\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 1.0 1.5 2.0 2.5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>1.5</li><li>2</li><li>2.5</li><li>3</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 1.5\n",
       "\\item 2\n",
       "\\item 2.5\n",
       "\\item 3\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 1.5\n",
       "3. 2\n",
       "4. 2.5\n",
       "5. 3\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 1.0 1.5 2.0 2.5 3.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'this'</li><li>'is'</li><li>'an'</li><li>'example'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'this'\n",
       "\\item 'is'\n",
       "\\item 'an'\n",
       "\\item 'example'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'this'\n",
       "2. 'is'\n",
       "3. 'an'\n",
       "4. 'example'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"this\"    \"is\"      \"an\"      \"example\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'1'</li><li>'1.5'</li><li>'2'</li><li>'2.5'</li><li>'3'</li><li>'a'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item '1'\n",
       "\\item '1.5'\n",
       "\\item '2'\n",
       "\\item '2.5'\n",
       "\\item '3'\n",
       "\\item 'a'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. '1'\n",
       "2. '1.5'\n",
       "3. '2'\n",
       "4. '2.5'\n",
       "5. '3'\n",
       "6. 'a'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"1\"   \"1.5\" \"2\"   \"2.5\" \"3\"   \"a\"  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 1.5 2 2.5 3 a"
     ]
    }
   ],
   "source": [
    "(x <- c(x,3))\n",
    "\n",
    "# and also characters can be used:\n",
    "\n",
    "(y <- c('this','is','an','example'))\n",
    "\n",
    "# However, if one combines numbers and characters, all entries of \n",
    "# the vector will be considered as characters and it is not posible \n",
    "# to operate on them as numbers:\n",
    "\n",
    "(z <- c(x,'a'))\n",
    "\n",
    "# If you want to avoid the quotation marks when printing characters, \n",
    "# you may use the function cat:\n",
    "\n",
    "cat(z)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "ename": "ERROR",
     "evalue": "Error in eval(expr, envir, enclos): object 'seq(from=1, to=1, by=((to-from)/length.out-1),length.out = NULL)' not found\n",
     "output_type": "error",
     "traceback": [
      "Error in eval(expr, envir, enclos): object 'seq(from=1, to=1, by=((to-from)/length.out-1),length.out = NULL)' not found\nTraceback:\n"
     ]
    }
   ],
   "source": [
    "\n",
    "### seq\n",
    "# This function is used to form regular sequences of numbers. \n",
    "# The basic syntax is \n",
    "\n",
    "#seq(from=1, to=1, by=((to-from)/length.out-1),length.out = NULL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>0</li><li>5</li><li>10</li><li>15</li><li>20</li><li>25</li><li>30</li><li>35</li><li>40</li><li>45</li><li>50</li><li>55</li><li>60</li><li>65</li><li>70</li><li>75</li><li>80</li><li>85</li><li>90</li><li>95</li><li>100</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 0\n",
       "\\item 5\n",
       "\\item 10\n",
       "\\item 15\n",
       "\\item 20\n",
       "\\item 25\n",
       "\\item 30\n",
       "\\item 35\n",
       "\\item 40\n",
       "\\item 45\n",
       "\\item 50\n",
       "\\item 55\n",
       "\\item 60\n",
       "\\item 65\n",
       "\\item 70\n",
       "\\item 75\n",
       "\\item 80\n",
       "\\item 85\n",
       "\\item 90\n",
       "\\item 95\n",
       "\\item 100\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 0\n",
       "2. 5\n",
       "3. 10\n",
       "4. 15\n",
       "5. 20\n",
       "6. 25\n",
       "7. 30\n",
       "8. 35\n",
       "9. 40\n",
       "10. 45\n",
       "11. 50\n",
       "12. 55\n",
       "13. 60\n",
       "14. 65\n",
       "15. 70\n",
       "16. 75\n",
       "17. 80\n",
       "18. 85\n",
       "19. 90\n",
       "20. 95\n",
       "21. 100\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1]   0   5  10  15  20  25  30  35  40  45  50  55  60  65  70  75  80  85  90\n",
       "[20]  95 100"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1955</li><li>1956</li><li>1957</li><li>1958</li><li>1959</li><li>1960</li><li>1961</li><li>1962</li><li>1963</li><li>1964</li><li>1965</li><li>1966</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1955\n",
       "\\item 1956\n",
       "\\item 1957\n",
       "\\item 1958\n",
       "\\item 1959\n",
       "\\item 1960\n",
       "\\item 1961\n",
       "\\item 1962\n",
       "\\item 1963\n",
       "\\item 1964\n",
       "\\item 1965\n",
       "\\item 1966\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1955\n",
       "2. 1956\n",
       "3. 1957\n",
       "4. 1958\n",
       "5. 1959\n",
       "6. 1960\n",
       "7. 1961\n",
       "8. 1962\n",
       "9. 1963\n",
       "10. 1964\n",
       "11. 1965\n",
       "12. 1966\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>10</li><li>10.2</li><li>10.4</li><li>10.6</li><li>10.8</li><li>11</li><li>11.2</li><li>11.4</li><li>11.6</li><li>11.8</li><li>12</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 10\n",
       "\\item 10.2\n",
       "\\item 10.4\n",
       "\\item 10.6\n",
       "\\item 10.8\n",
       "\\item 11\n",
       "\\item 11.2\n",
       "\\item 11.4\n",
       "\\item 11.6\n",
       "\\item 11.8\n",
       "\\item 12\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 10\n",
       "2. 10.2\n",
       "3. 10.4\n",
       "4. 10.6\n",
       "5. 10.8\n",
       "6. 11\n",
       "7. 11.2\n",
       "8. 11.4\n",
       "9. 11.6\n",
       "10. 11.8\n",
       "11. 12\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 10.0 10.2 10.4 10.6 10.8 11.0 11.2 11.4 11.6 11.8 12.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "seq(0,100,5)\n",
    "seq(1955,1966,1)\n",
    "seq(10,12,0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1955</li><li>1956</li><li>1957</li><li>1958</li><li>1959</li><li>1960</li><li>1961</li><li>1962</li><li>1963</li><li>1964</li><li>1965</li><li>1966</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1955\n",
       "\\item 1956\n",
       "\\item 1957\n",
       "\\item 1958\n",
       "\\item 1959\n",
       "\\item 1960\n",
       "\\item 1961\n",
       "\\item 1962\n",
       "\\item 1963\n",
       "\\item 1964\n",
       "\\item 1965\n",
       "\\item 1966\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1955\n",
       "2. 1956\n",
       "3. 1957\n",
       "4. 1958\n",
       "5. 1959\n",
       "6. 1960\n",
       "7. 1961\n",
       "8. 1962\n",
       "9. 1963\n",
       "10. 1964\n",
       "11. 1965\n",
       "12. 1966\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 1 2 3 4 5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>5</li><li>4</li><li>3</li><li>2</li><li>1</li><li>0</li><li>-1</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\item 0\n",
       "\\item -1\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 5\n",
       "2. 4\n",
       "3. 3\n",
       "4. 2\n",
       "5. 1\n",
       "6. 0\n",
       "7. -1\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1]  5  4  3  2  1  0 -1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 1 is the default value for the lower limit of the sequence and \n",
    "# also for the increment:\n",
    "\n",
    "seq(1955,1966)\n",
    "seq(5)\n",
    "seq(5,-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 1 2 3 4 5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>5</li><li>4</li><li>3</li><li>2</li><li>1</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 5\n",
       "\\item 4\n",
       "\\item 3\n",
       "\\item 2\n",
       "\\item 1\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 5\n",
       "2. 4\n",
       "3. 3\n",
       "4. 2\n",
       "5. 1\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 5 4 3 2 1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>10</li><li>10.2</li><li>10.4</li><li>10.6</li><li>10.8</li><li>11</li><li>11.2</li><li>11.4</li><li>11.6</li><li>11.8</li><li>12</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 10\n",
       "\\item 10.2\n",
       "\\item 10.4\n",
       "\\item 10.6\n",
       "\\item 10.8\n",
       "\\item 11\n",
       "\\item 11.2\n",
       "\\item 11.4\n",
       "\\item 11.6\n",
       "\\item 11.8\n",
       "\\item 12\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 10\n",
       "2. 10.2\n",
       "3. 10.4\n",
       "4. 10.6\n",
       "5. 10.8\n",
       "6. 11\n",
       "7. 11.2\n",
       "8. 11.4\n",
       "9. 11.6\n",
       "10. 11.8\n",
       "11. 12\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 10.0 10.2 10.4 10.6 10.8 11.0 11.2 11.4 11.6 11.8 12.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# There is a shorthand for this function when the increment is 1:\n",
    "\n",
    "1:5\n",
    "5:1\n",
    "50:60/5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>10</li><li>10</li><li>10</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 10\n",
       "\\item 10\n",
       "\\item 10\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 10\n",
       "2. 10\n",
       "3. 10\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 10 10 10"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>0</li><li>5</li><li>0</li><li>5</li><li>0</li><li>5</li><li>0</li><li>5</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 0\n",
       "\\item 5\n",
       "\\item 0\n",
       "\\item 5\n",
       "\\item 0\n",
       "\\item 5\n",
       "\\item 0\n",
       "\\item 5\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 0\n",
       "2. 5\n",
       "3. 0\n",
       "4. 5\n",
       "5. 0\n",
       "6. 5\n",
       "7. 0\n",
       "8. 5\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 0 5 0 5 0 5 0 5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'wx'</li><li>'yz'</li><li>'wx'</li><li>'yz'</li><li>'wx'</li><li>'yz'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'wx'\n",
       "\\item 'yz'\n",
       "\\item 'wx'\n",
       "\\item 'yz'\n",
       "\\item 'wx'\n",
       "\\item 'yz'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'wx'\n",
       "2. 'yz'\n",
       "3. 'wx'\n",
       "4. 'yz'\n",
       "5. 'wx'\n",
       "6. 'yz'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"wx\" \"yz\" \"wx\" \"yz\" \"wx\" \"yz\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 5\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 5\n",
       "6. 1\n",
       "7. 2\n",
       "8. 3\n",
       "9. 4\n",
       "10. 5\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 1 2 3 4 5 1 2 3 4 5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### rep\n",
    "# This function replicates a pattern. The syntax is \n",
    "#rep(x,times)\n",
    "\n",
    "# where x is the object to be replicated and times is the number \n",
    "# of replications:\n",
    "\n",
    "rep(10,3)\n",
    "rep(c(0,5), 4)\n",
    "rep(c('wx','yz'),3)\n",
    "rep(1:5,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>10</li><li>10</li><li>20</li><li>20</li><li>20</li><li>20</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 10\n",
       "\\item 10\n",
       "\\item 20\n",
       "\\item 20\n",
       "\\item 20\n",
       "\\item 20\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 10\n",
       "2. 10\n",
       "3. 20\n",
       "4. 20\n",
       "5. 20\n",
       "6. 20\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 10 10 20 20 20 20"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>2</li><li>3</li><li>3</li><li>3</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 2\n",
       "4. 3\n",
       "5. 3\n",
       "6. 3\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] 1 2 2 3 3 3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>1</li><li>1</li><li>1</li><li>2</li><li>2</li><li>2</li><li>2</li><li>3</li><li>3</li><li>3</li><li>3</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\item 3\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 1\n",
       "3. 1\n",
       "4. 1\n",
       "5. 2\n",
       "6. 2\n",
       "7. 2\n",
       "8. 2\n",
       "9. 3\n",
       "10. 3\n",
       "11. 3\n",
       "12. 3\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 1 1 1 1 2 2 2 2 3 3 3 3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The number of replications can be a vector, in which\n",
    "# case it must have the same number of components as the pattern, \n",
    "# and then each element of the pattern is repeated the corresponding \n",
    "# number of times.\n",
    "\n",
    "rep(c(10,20),c(2,4))\n",
    "rep(1:3,1:3)\n",
    "rep(1:3,rep(4,3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>1</li><li>2</li><li>3</li><li>4</li><li>1</li><li>2</li><li>3</li><li>4</li><li>1</li><li>2</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\item 3\n",
       "\\item 4\n",
       "\\item 1\n",
       "\\item 2\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 2\n",
       "3. 3\n",
       "4. 4\n",
       "5. 1\n",
       "6. 2\n",
       "7. 3\n",
       "8. 4\n",
       "9. 1\n",
       "10. 2\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] 1 2 3 4 1 2 3 4 1 2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# It is also possible to specify the number of terms the replications \n",
    "# should have using the option length:\n",
    "\n",
    "rep(c(1,2,3,4), length=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "0.435480481040914"
      ],
      "text/latex": [
       "0.435480481040914"
      ],
      "text/markdown": [
       "0.435480481040914"
      ],
      "text/plain": [
       "[1] 0.4354805"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##Indexing\n",
    "\n",
    "# To get a particular component from a vector, you can write the \n",
    "# position of the element in the vector within square brackets after \n",
    "# the vector's name, as in the following example:\n",
    "\n",
    "z <- rnorm(10)\n",
    "z[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "'s'"
      ],
      "text/latex": [
       "'s'"
      ],
      "text/markdown": [
       "'s'"
      ],
      "text/plain": [
       "[1] \"s\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'k'</li><li>'m'</li><li>'o'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'k'\n",
       "\\item 'm'\n",
       "\\item 'o'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'k'\n",
       "2. 'm'\n",
       "3. 'o'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"k\" \"m\" \"o\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'k'</li><li>'m'</li><li>'o'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'k'\n",
       "\\item 'm'\n",
       "\\item 'o'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'k'\n",
       "2. 'm'\n",
       "3. 'o'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"k\" \"m\" \"o\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "letters[19]\n",
    "letters[c(11,13,15)]\n",
    "letters[seq(11,15,2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'a'</li><li>'b'</li><li>'c'</li><li>'d'</li><li>'e'</li><li>'f'</li><li>'g'</li><li>'h'</li><li>'i'</li><li>'j'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'a'\n",
       "\\item 'b'\n",
       "\\item 'c'\n",
       "\\item 'd'\n",
       "\\item 'e'\n",
       "\\item 'f'\n",
       "\\item 'g'\n",
       "\\item 'h'\n",
       "\\item 'i'\n",
       "\\item 'j'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'a'\n",
       "2. 'b'\n",
       "3. 'c'\n",
       "4. 'd'\n",
       "5. 'e'\n",
       "6. 'f'\n",
       "7. 'g'\n",
       "8. 'h'\n",
       "9. 'i'\n",
       "10. 'j'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'b'</li><li>'d'</li><li>'f'</li><li>'h'</li><li>'j'</li><li>'l'</li><li>'n'</li><li>'p'</li><li>'r'</li><li>'t'</li><li>'v'</li><li>'x'</li><li>'z'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'b'\n",
       "\\item 'd'\n",
       "\\item 'f'\n",
       "\\item 'h'\n",
       "\\item 'j'\n",
       "\\item 'l'\n",
       "\\item 'n'\n",
       "\\item 'p'\n",
       "\\item 'r'\n",
       "\\item 't'\n",
       "\\item 'v'\n",
       "\\item 'x'\n",
       "\\item 'z'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'b'\n",
       "2. 'd'\n",
       "3. 'f'\n",
       "4. 'h'\n",
       "5. 'j'\n",
       "6. 'l'\n",
       "7. 'n'\n",
       "8. 'p'\n",
       "9. 'r'\n",
       "10. 't'\n",
       "11. 'v'\n",
       "12. 'x'\n",
       "13. 'z'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \"b\" \"d\" \"f\" \"h\" \"j\" \"l\" \"n\" \"p\" \"r\" \"t\" \"v\" \"x\" \"z\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# 2.- Negative numbers that correspond to entries to be excluded:\n",
    "\n",
    "letters[-(11:26)]\n",
    "letters[-seq(1,25,2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>TRUE</li><li>TRUE</li><li>TRUE</li><li>TRUE</li><li>TRUE</li><li>TRUE</li><li>TRUE</li><li>TRUE</li><li>TRUE</li><li>TRUE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li><li>FALSE</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\item FALSE\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. TRUE\n",
       "2. TRUE\n",
       "3. TRUE\n",
       "4. TRUE\n",
       "5. TRUE\n",
       "6. TRUE\n",
       "7. TRUE\n",
       "8. TRUE\n",
       "9. TRUE\n",
       "10. TRUE\n",
       "11. FALSE\n",
       "12. FALSE\n",
       "13. FALSE\n",
       "14. FALSE\n",
       "15. FALSE\n",
       "16. FALSE\n",
       "17. FALSE\n",
       "18. FALSE\n",
       "19. FALSE\n",
       "20. FALSE\n",
       "21. FALSE\n",
       "22. FALSE\n",
       "23. FALSE\n",
       "24. FALSE\n",
       "25. FALSE\n",
       "26. FALSE\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE\n",
       "[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n",
       "[25] FALSE FALSE"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'a'</li><li>'b'</li><li>'c'</li><li>'d'</li><li>'e'</li><li>'f'</li><li>'g'</li><li>'h'</li><li>'i'</li><li>'j'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'a'\n",
       "\\item 'b'\n",
       "\\item 'c'\n",
       "\\item 'd'\n",
       "\\item 'e'\n",
       "\\item 'f'\n",
       "\\item 'g'\n",
       "\\item 'h'\n",
       "\\item 'i'\n",
       "\\item 'j'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'a'\n",
       "2. 'b'\n",
       "3. 'c'\n",
       "4. 'd'\n",
       "5. 'e'\n",
       "6. 'f'\n",
       "7. 'g'\n",
       "8. 'h'\n",
       "9. 'i'\n",
       "10. 'j'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li><li>FALSE</li><li>TRUE</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\item FALSE\n",
       "\\item TRUE\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. FALSE\n",
       "2. TRUE\n",
       "3. FALSE\n",
       "4. TRUE\n",
       "5. FALSE\n",
       "6. TRUE\n",
       "7. FALSE\n",
       "8. TRUE\n",
       "9. FALSE\n",
       "10. TRUE\n",
       "11. FALSE\n",
       "12. TRUE\n",
       "13. FALSE\n",
       "14. TRUE\n",
       "15. FALSE\n",
       "16. TRUE\n",
       "17. FALSE\n",
       "18. TRUE\n",
       "19. FALSE\n",
       "20. TRUE\n",
       "21. FALSE\n",
       "22. TRUE\n",
       "23. FALSE\n",
       "24. TRUE\n",
       "25. FALSE\n",
       "26. TRUE\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE\n",
       "[13] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE\n",
       "[25] FALSE  TRUE"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'b'</li><li>'d'</li><li>'f'</li><li>'h'</li><li>'j'</li><li>'l'</li><li>'n'</li><li>'p'</li><li>'r'</li><li>'t'</li><li>'v'</li><li>'x'</li><li>'z'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'b'\n",
       "\\item 'd'\n",
       "\\item 'f'\n",
       "\\item 'h'\n",
       "\\item 'j'\n",
       "\\item 'l'\n",
       "\\item 'n'\n",
       "\\item 'p'\n",
       "\\item 'r'\n",
       "\\item 't'\n",
       "\\item 'v'\n",
       "\\item 'x'\n",
       "\\item 'z'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'b'\n",
       "2. 'd'\n",
       "3. 'f'\n",
       "4. 'h'\n",
       "5. 'j'\n",
       "6. 'l'\n",
       "7. 'n'\n",
       "8. 'p'\n",
       "9. 'r'\n",
       "10. 't'\n",
       "11. 'v'\n",
       "12. 'x'\n",
       "13. 'z'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       " [1] \"b\" \"d\" \"f\" \"h\" \"j\" \"l\" \"n\" \"p\" \"r\" \"t\" \"v\" \"x\" \"z\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 3.- Logical variables. TRUE values will be included while FALSE \n",
    " # values will not.\n",
    "\n",
    "a <- 1:26\n",
    "a < 11\n",
    "letters[a<11]\n",
    "a %% 2 == 0\n",
    "letters[a %% 2==0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       ".list-inline {list-style: none; margin:0; padding: 0}\n",
       ".list-inline>li {display: inline-block}\n",
       ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
       "</style>\n",
       "<ol class=list-inline><li>'b'</li><li>'c'</li><li>'d'</li><li>'e'</li><li>'f'</li><li>'g'</li></ol>\n"
      ],
      "text/latex": [
       "\\begin{enumerate*}\n",
       "\\item 'b'\n",
       "\\item 'c'\n",
       "\\item 'd'\n",
       "\\item 'e'\n",
       "\\item 'f'\n",
       "\\item 'g'\n",
       "\\end{enumerate*}\n"
      ],
      "text/markdown": [
       "1. 'b'\n",
       "2. 'c'\n",
       "3. 'd'\n",
       "4. 'e'\n",
       "5. 'f'\n",
       "6. 'g'\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "[1] \"b\" \"c\" \"d\" \"e\" \"f\" \"g\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Double inequalities such as $1 < x \\leq 7$ should be written \n",
    "# using the \\& symbol: 1 < a \\& a <= 7:\n",
    "\n",
    "letters[1 < a & a <= 7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
