{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PYYEARRPRALGEALWQVWGCLRNGMWV\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "@BY: Reem Alghamdi\n",
    "@DATE: 01-12-2020\n",
    "\"\"\"\n",
    "#from ch4.code.ch4_04 import cyclic_spectrum\n",
    "#from ch4.code.ch4_06 import mass\n",
    "#from ch4.code.ch4_09 import spectral_convolution\n",
    "#from ch4.code.ch4_11 import linear_spectrum, prefix_max_array\n",
    "\n",
    "mass_table_reverse = {57: 'G', 71: 'A', 87: 'S', 97: 'P', 99: 'V', 101: 'T', 103: 'C', 113: 'L', 114: 'N', 115: 'D', 128: 'Q', 129: 'E', 131: 'M', 137: 'H', 147: 'F', 156: 'R', 163: 'Y', 186: 'W', 4: \"X\", 5: \"Z\"}\n",
    "amino_acids = {'G': 57, 'A': 71, 'S': 87, 'P': 97, 'V': 99, 'T': 101, 'C': 103, 'L': 113, 'N': 114, 'D': 115, 'Q': 128, 'E': 129, 'M': 131, 'H': 137, 'F': 147, 'R': 156, 'Y': 163, 'W': 186, 'X': 4, 'Z': 5}\n",
    "integer_mass_table = {'G': 57, 'A': 71, 'S': 87, 'P': 97, 'V': 99,\n",
    "                      'T': 101, 'C': 103, 'I': 113, 'L': 113, 'N': 114,\n",
    "                      'D': 115, 'K': 128, 'Q': 128, 'E': 129, 'M': 131,\n",
    "                      'H': 137, 'F': 147, 'R': 156, 'Y': 163, 'W': 186,\n",
    "                        'X': 4, 'Z': 5}\n",
    "\n",
    "\n",
    "def spectrum_graph(spectrum):\n",
    "    spectrum.insert(0, 0)\n",
    "    adj_list = {}\n",
    "    for i in range(len(spectrum)):\n",
    "        adj_list[spectrum[i]] = {}\n",
    "        for j in range(i + 1, len(spectrum)):\n",
    "            try:\n",
    "                adj_list[spectrum[i]][spectrum[j]] = mass_table_reverse[spectrum[j] - spectrum[i]]\n",
    "            except:\n",
    "                continue\n",
    "    return adj_list\n",
    "\n",
    "\n",
    "def print_adj_list(adj_list):\n",
    "    for k1, v in adj_list.items():\n",
    "        for k2, w in v.items():\n",
    "            print(f\"{k1}->{k2}:{w}\")\n",
    "\n",
    "\n",
    "def all_paths(adj_list, sink, next_node, visited, paths):\n",
    "    if next_node not in visited:\n",
    "        visited.append(next_node)\n",
    "        if next_node == sink:\n",
    "            paths.append(visited.copy())\n",
    "        for n in adj_list[next_node]:\n",
    "            all_paths(adj_list, sink, n, visited, paths)\n",
    "        visited.remove(next_node)\n",
    "    return sorted(paths)\n",
    "\n",
    "\n",
    "def decoding_ideal_spectrum(spectrum):\n",
    "    w_adj_list = spectrum_graph(spectrum)\n",
    "    adj_list = {}\n",
    "    weights = {}\n",
    "    for k1, v in w_adj_list.items():\n",
    "        adj_list[k1] = []\n",
    "        for k2, w in v.items():\n",
    "            adj_list[k1].append(k2)\n",
    "            weights[(k1, k2)] = w\n",
    "\n",
    "    paths = all_paths(adj_list, spectrum[-1], 0, [], [])\n",
    "    for path in paths:\n",
    "        peptide = ''.join([w_adj_list[path[i]][path[i+1]] for i in range(len(path) - 1)])\n",
    "        ideal = ideal_spectrum(peptide)\n",
    "        if ideal == spectrum:\n",
    "            return peptide\n",
    "\n",
    "\n",
    "def ideal_spectrum(peptide):\n",
    "    parts = []\n",
    "    masses = []\n",
    "    # prefix\n",
    "    for j in range(len(peptide) + 1):\n",
    "        parts.append(peptide[0:j])\n",
    "        masses.append(sum([amino_acids[x] for x in parts[-1]]))\n",
    "\n",
    "    # suffix\n",
    "    for j in range(1, len(peptide)):\n",
    "        parts.append(peptide[j:])\n",
    "        masses.append(sum([amino_acids[x] for x in parts[-1]]))\n",
    "    return sorted(masses)\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    # string = \"57 71 154 185 301 332 415 429 486\"\n",
    "    # string = \"87 128 185 224 281 314 437 445 566 601 695 729 858 876 961 1039 1060 1168 1223 1331 1379 1487 1507 1618 1638 1746 1794 1902 1957 2065 2086 2164 2249 2267 2396 2430 2524 2559 2680 2688 2811 2844 2901 2940 2997 3038 3125\"\n",
    "    # print_adj_list(spectrum_graph(list(map(int, string.split()))))\n",
    "\n",
    "    # string = \"57 71 154 185 301 332 415 429 486\"\n",
    "    string = \"97 99 260 285 416 423 473 552 587 623 743 779 856 935 959 1016 1032 1188 1202 1259 1301 1372 1429 1429 1558 1615 1629 1728 1742 1799 1928 1928 1985 2056 2098 2155 2169 2325 2341 2398 2422 2501 2578 2614 2734 2770 2805 2884 2934 2941 3072 3097 3258 3260 3357\"\n",
    "    # string = \"103 131 259 287 387 390 489 490 577 636 690 693 761 840 892 941 1020 1070 1176 1198 1247 1295 1334 1462 1481 1580 1599 1743 1762 1842 1861 2005 2024 2123 2142 2270 2309 2357 2406 2428 2534 2584 2663 2712 2764 2843 2911 2914 2968 3027 3114 3115 3214 3217 3317 3345 3473 3501 3604\"\n",
    "    print(decoding_ideal_spectrum(list(map(int, string.split()))))\n",
    "    # print(ideal_spectrum(\"REDCA\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
