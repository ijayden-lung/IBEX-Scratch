{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cycs= [[1, 20, 26, 30, 2, 10, 15, 19, 16, 28, 12, 3, 17, 23], [4, 27, 29, 21, 5, 11, 22, 24, 18, 14, 8, 9, 13, 7, 6, 25]]\n",
      "bg= [[22, 24], [23, 17], [18, 14], [13, 7], [8, 9], [10, 2], [19, 15], [16, 28], [27, 4], [3, 12], [11, 5], [6, 25], [29, 21], [1, 30], [20, 26]]\n",
      "g#= [[22, 24], [23, 17], [18, 14], [13, 7], [8, 9], [10, 2], [19, 15], [16, 28], [27, 4], [3, 12], [11, 5], [6, 25], [29, 21], [1, 30], [20, 26]]\n",
      "Genome= [[11, -12, 9, -7, 4, 5, -1, -15], [-10, 8, -14, -2, -6, 3, 13]]\n",
      "P= [[11, -12, 9, -7, 4, 5, -1, -15], [-10, 8, -14, -2, -6, 3, 13]]\n",
      "\n",
      "Cycs= [[1, 30, 2, 10, 15, 19, 16, 28, 12, 3, 17, 23], [4, 27, 29, 21, 5, 11, 22, 24, 18, 14, 8, 9, 13, 7, 6, 25], [20, 26]]\n",
      "bg= [[22, 24], [23, 17], [18, 14], [13, 7], [8, 9], [29, 21], [19, 15], [16, 28], [27, 4], [3, 12], [11, 5], [6, 25], [26, 20], [1, 10], [30, 2]]\n",
      "g#= [[22, 24], [23, 17], [18, 14], [13, 7], [8, 9], [29, 21], [19, 15], [16, 28], [27, 4], [3, 12], [11, 5], [6, 25], [26, 20], [1, 10], [30, 2]]\n",
      "Genome= [[11, -12, 9, -7, 4, 5, 1, -15], [-10, 8, -14, -2, -6, 3, 13]]\n",
      "P= [[11, -12, 9, -7, 4, 5, 1, -15], [-10, 8, -14, -2, -6, 3, 13]]\n",
      "\n",
      "Cycs= [[1, 10, 15, 19, 16, 28, 12, 3, 17, 23], [2, 30], [4, 27, 29, 21, 5, 11, 22, 24, 18, 14, 8, 9, 13, 7, 6, 25], [20, 26]]\n",
      "bg= [[22, 24], [23, 17], [18, 14], [13, 7], [8, 9], [2, 30], [29, 21], [16, 28], [27, 4], [3, 12], [11, 5], [6, 25], [26, 20], [1, 19], [10, 15]]\n",
      "g#= [[22, 24], [23, 17], [18, 14], [13, 7], [8, 9], [2, 30], [29, 21], [16, 28], [27, 4], [3, 12], [11, 5], [6, 25], [26, 20], [1, 19], [10, 15]]\n",
      "Genome= [[11, -12, 9, -7, 4, 5, 8, -14, -2, -6, 3, 13, -10, 1, -15]]\n",
      "P= [[11, -12, 9, -7, 4, 5, 8, -14, -2, -6, 3, 13, -10, 1, -15]]\n",
      "\n",
      "Cycs= [[1, 19, 16, 28, 12, 3, 17, 23], [2, 30], [4, 27, 29, 21, 5, 11, 22, 24, 18, 14, 8, 9, 13, 7, 6, 25], [10, 15], [20, 26]]\n",
      "bg= [[22, 24], [23, 17], [18, 14], [13, 7], [8, 9], [10, 15], [27, 4], [3, 12], [11, 5], [6, 25], [26, 20], [2, 30], [29, 21], [1, 28], [19, 16]]\n",
      "g#= [[22, 24], [23, 17], [18, 14], [13, 7], [8, 9], [10, 15], [27, 4], [3, 12], [11, 5], [6, 25], [26, 20], [2, 30], [29, 21], [1, 28], [19, 16]]\n",
      "Genome= [[11, -12, 9, -7, 4, 5, 8, 10, -13, -3, 6, 2, 14, 1, -15]]\n",
      "P= [[11, -12, 9, -7, 4, 5, 8, 10, -13, -3, 6, 2, 14, 1, -15]]\n",
      "\n",
      "Cycs= [[1, 28, 12, 3, 17, 23], [2, 30], [4, 27, 29, 21, 5, 11, 22, 24, 18, 14, 8, 9, 13, 7, 6, 25], [10, 15], [16, 19], [20, 26]]\n",
      "bg= [[22, 24], [23, 17], [18, 14], [13, 7], [8, 9], [10, 15], [16, 19], [20, 26], [25, 6], [5, 11], [4, 27], [2, 30], [29, 21], [1, 3], [28, 12]]\n",
      "g#= [[22, 24], [23, 17], [18, 14], [13, 7], [8, 9], [10, 15], [16, 19], [20, 26], [25, 6], [5, 11], [4, 27], [2, 30], [29, 21], [1, 3], [28, 12]]\n",
      "Genome= [[11, -12, 9, -7, 4, 5, 8, 10, -13, -3, 6, -14, -2, 1, -15]]\n",
      "P= [[11, -12, 9, -7, 4, 5, 8, 10, -13, -3, 6, -14, -2, 1, -15]]\n",
      "\n",
      "Cycs= [[1, 3, 17, 23], [2, 30], [4, 27, 29, 21, 5, 11, 22, 24, 18, 14, 8, 9, 13, 7, 6, 25], [10, 15], [12, 28], [16, 19], [20, 26]]\n",
      "bg= [[22, 24], [18, 14], [13, 7], [8, 9], [10, 15], [16, 19], [20, 26], [25, 6], [5, 11], [12, 28], [27, 4], [2, 30], [29, 21], [1, 23], [3, 17]]\n",
      "g#= [[22, 24], [18, 14], [13, 7], [8, 9], [10, 15], [16, 19], [20, 26], [25, 6], [5, 11], [12, 28], [27, 4], [2, 30], [29, 21], [1, 23], [3, 17]]\n",
      "Genome= [[11, -12, 1, -15], [9, -7, 4, 5, 8, 10, -13, -3, 6, -14, -2]]\n",
      "P= [[11, -12, 1, -15], [9, -7, 4, 5, 8, 10, -13, -3, 6, -14, -2]]\n",
      "\n",
      "Cycs= [[1, 23], [2, 30], [3, 17], [4, 27, 29, 21, 5, 11, 22, 24, 18, 14, 8, 9, 13, 7, 6, 25], [10, 15], [12, 28], [16, 19], [20, 26]]\n",
      "bg= [[22, 24], [23, 1], [2, 30], [18, 14], [13, 7], [8, 9], [10, 15], [16, 19], [20, 26], [25, 6], [5, 11], [12, 28], [3, 17], [4, 21], [27, 29]]\n",
      "g#= [[22, 24], [23, 1], [2, 30], [18, 14], [13, 7], [8, 9], [10, 15], [16, 19], [20, 26], [25, 6], [5, 11], [12, 28], [3, 17], [4, 21], [27, 29]]\n",
      "Genome= [[11, -12, 1, -15, 14, -6, 3, 13, -10, -8, -5, -4, 7, -9, 2]]\n",
      "P= [[11, -12, 1, -15, 14, -6, 3, 13, -10, -8, -5, -4, 7, -9, 2]]\n",
      "\n",
      "Cycs= [[1, 23], [2, 30], [3, 17], [4, 21, 5, 11, 22, 24, 18, 14, 8, 9, 13, 7, 6, 25], [10, 15], [12, 28], [16, 19], [20, 26], [27, 29]]\n",
      "bg= [[22, 24], [23, 1], [2, 30], [29, 27], [28, 12], [6, 25], [26, 20], [19, 16], [15, 10], [9, 8], [7, 13], [14, 18], [17, 3], [4, 11], [21, 5]]\n",
      "g#= [[22, 24], [23, 1], [2, 30], [29, 27], [28, 12], [6, 25], [26, 20], [19, 16], [15, 10], [9, 8], [7, 13], [14, 18], [17, 3], [4, 11], [21, 5]]\n",
      "Genome= [[11, -12, 1, -15, 14, -6, -2, 9, -7, 4, 5, 8, 10, -13, -3]]\n",
      "P= [[11, -12, 1, -15, 14, -6, -2, 9, -7, 4, 5, 8, 10, -13, -3]]\n",
      "\n",
      "Cycs= [[1, 23], [2, 30], [3, 17], [4, 11, 22, 24, 18, 14, 8, 9, 13, 7, 6, 25], [5, 21], [10, 15], [12, 28], [16, 19], [20, 26], [27, 29]]\n",
      "bg= [[23, 1], [2, 30], [29, 27], [28, 12], [3, 17], [18, 14], [13, 7], [8, 9], [10, 15], [16, 19], [20, 26], [25, 6], [5, 21], [4, 24], [11, 22]]\n",
      "g#= [[23, 1], [2, 30], [29, 27], [28, 12], [3, 17], [18, 14], [13, 7], [8, 9], [10, 15], [16, 19], [20, 26], [25, 6], [5, 21], [4, 24], [11, 22]]\n",
      "Genome= [[-12, 1, -15, 14, -6, -11, 3, 13, -10, -8, -5, -4, 7, -9, 2]]\n",
      "P= [[-12, 1, -15, 14, -6, -11, 3, 13, -10, -8, -5, -4, 7, -9, 2]]\n",
      "\n",
      "Cycs= [[1, 23], [2, 30], [3, 17], [4, 24, 18, 14, 8, 9, 13, 7, 6, 25], [5, 21], [10, 15], [11, 22], [12, 28], [16, 19], [20, 26], [27, 29]]\n",
      "bg= [[23, 1], [2, 30], [29, 27], [28, 12], [11, 22], [21, 5], [6, 25], [26, 20], [19, 16], [15, 10], [9, 8], [7, 13], [17, 3], [4, 14], [24, 18]]\n",
      "g#= [[23, 1], [2, 30], [29, 27], [28, 12], [11, 22], [21, 5], [6, 25], [26, 20], [19, 16], [15, 10], [9, 8], [7, 13], [17, 3], [4, 14], [24, 18]]\n",
      "Genome= [[-12, 1, -15, 14, -6, -11, 3, 13, -10, -8, -5, -4, 7, -2, 9]]\n",
      "P= [[-12, 1, -15, 14, -6, -11, 3, 13, -10, -8, -5, -4, 7, -2, 9]]\n",
      "\n",
      "Cycs= [[1, 23], [2, 30], [3, 17], [4, 14, 8, 9, 13, 7, 6, 25], [5, 21], [10, 15], [11, 22], [12, 28], [16, 19], [18, 24], [20, 26], [27, 29]]\n",
      "bg= [[23, 1], [2, 30], [29, 27], [28, 12], [11, 22], [21, 5], [6, 25], [26, 20], [19, 16], [15, 10], [7, 13], [3, 17], [18, 24], [4, 9], [14, 8]]\n",
      "g#= [[23, 1], [2, 30], [29, 27], [28, 12], [11, 22], [21, 5], [6, 25], [26, 20], [19, 16], [15, 10], [7, 13], [3, 17], [18, 24], [4, 9], [14, 8]]\n",
      "Genome= [[-12, 1, -15, 14, -6, -11, 3, 13, -10, -8, -5, -2, 9], [-4, 7]]\n",
      "P= [[-12, 1, -15, 14, -6, -11, 3, 13, -10, -8, -5, -2, 9], [-4, 7]]\n",
      "\n",
      "Cycs= [[1, 23], [2, 30], [3, 17], [4, 9, 13, 7, 6, 25], [5, 21], [8, 14], [10, 15], [11, 22], [12, 28], [16, 19], [18, 24], [20, 26], [27, 29]]\n",
      "bg= [[23, 1], [2, 30], [29, 27], [28, 12], [11, 22], [21, 5], [6, 25], [26, 20], [19, 16], [15, 10], [3, 17], [18, 24], [14, 8], [4, 7], [9, 13]]\n",
      "g#= [[23, 1], [2, 30], [29, 27], [28, 12], [11, 22], [21, 5], [6, 25], [26, 20], [19, 16], [15, 10], [3, 17], [18, 24], [14, 8], [4, 7], [9, 13]]\n",
      "Genome= [[-12, 1, -15, 14, -6, -11, 3, 13, -10, -8, -5, 7, -4, -2, 9]]\n",
      "P= [[-12, 1, -15, 14, -6, -11, 3, 13, -10, -8, -5, 7, -4, -2, 9]]\n",
      "\n",
      "Cycs= [[1, 23], [2, 30], [3, 17], [4, 7, 6, 25], [5, 21], [8, 14], [9, 13], [10, 15], [11, 22], [12, 28], [16, 19], [18, 24], [20, 26], [27, 29]]\n",
      "bg= [[23, 1], [2, 30], [29, 27], [28, 12], [11, 22], [21, 5], [26, 20], [19, 16], [15, 10], [9, 13], [14, 8], [3, 17], [18, 24], [4, 25], [7, 6]]\n",
      "g#= [[23, 1], [2, 30], [29, 27], [28, 12], [11, 22], [21, 5], [26, 20], [19, 16], [15, 10], [9, 13], [14, 8], [3, 17], [18, 24], [4, 25], [7, 6]]\n",
      "Genome= [[-12, 1, -15, 14, -6, -11, 3, 4, -7, 5, 8, 10, -13, -2, 9]]\n",
      "P= [[-12, 1, -15, 14, -6, -11, 3, 4, -7, 5, 8, 10, -13, -2, 9]]\n",
      "\n",
      "(+11 -12 +9 -7 +4 +5 -1 -10 +8 -14 -2 -6 +3 +13 -15)\n",
      "(+11 -12 +9 -7 +4 +5 -1 -15)(-10 +8 -14 -2 -6 +3 +13)\n",
      "(+11 -12 +9 -7 +4 +5 +1 -15)(-10 +8 -14 -2 -6 +3 +13)\n",
      "(+11 -12 +9 -7 +4 +5 +8 -14 -2 -6 +3 +13 -10 +1 -15)\n",
      "(+11 -12 +9 -7 +4 +5 +8 +10 -13 -3 +6 +2 +14 +1 -15)\n",
      "(+11 -12 +9 -7 +4 +5 +8 +10 -13 -3 +6 -14 -2 +1 -15)\n",
      "(+11 -12 +1 -15)(+9 -7 +4 +5 +8 +10 -13 -3 +6 -14 -2)\n",
      "(+11 -12 +1 -15 +14 -6 +3 +13 -10 -8 -5 -4 +7 -9 +2)\n",
      "(+11 -12 +1 -15 +14 -6 -2 +9 -7 +4 +5 +8 +10 -13 -3)\n",
      "(-12 +1 -15 +14 -6 -11 +3 +13 -10 -8 -5 -4 +7 -9 +2)\n",
      "(-12 +1 -15 +14 -6 -11 +3 +13 -10 -8 -5 -4 +7 -2 +9)\n",
      "(-12 +1 -15 +14 -6 -11 +3 +13 -10 -8 -5 -2 +9)(-4 +7)\n",
      "(-12 +1 -15 +14 -6 -11 +3 +13 -10 -8 -5 +7 -4 -2 +9)\n",
      "(-12 +1 -15 +14 -6 -11 +3 +4 -7 +5 +8 +10 -13 -2 +9)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from os.path import dirname\n",
    "\n",
    "def GenomeToCyc(genome):\n",
    "\t\n",
    "\tcycGenome = []\n",
    "\tfor chromo in genome:\n",
    "\t\ttmp = []\n",
    "\t\tfor i in range(len(chromo)):\n",
    "\t\t\tif chromo[i]>0:\n",
    "\t\t\t\ttmp.append([chromo[i]*2-1,chromo[i]*2])\n",
    "\t\t\telse:\n",
    "\t\t\t\ttmp.append([chromo[i]*(-2),chromo[i]*(-2)-1])\n",
    "\t\tcycGenome.append(tmp)\n",
    "\treturn cycGenome\n",
    "\n",
    "def colorEdges(genome):\n",
    "\tedges = []\n",
    "\tcycGenome = GenomeToCyc(genome)\n",
    "\tfor chromo in cycGenome:\n",
    "\t\tif len(chromo)==1:\n",
    "\t\t\tedges.append(chromo[0][::-1])\n",
    "\t\t\tcontinue\n",
    "\t\tfor i in range(len(chromo)-1):\n",
    "\t\t\tedges.append([ chromo[i][1],chromo[i+1][0] ])\n",
    "\t\tedges.append([chromo[i+1][1],chromo[0][0]])\n",
    "\treturn edges\n",
    "\n",
    "def colored_edges_cycles(blue, red):\n",
    "\tsize = len(blue)+len(red)+1\n",
    "\tadj = np.zeros(shape=(size,2),dtype=int)\n",
    "\tvisited = [0]*(size)\n",
    "\tfor e in blue:\n",
    "\t\tadj[e[0],0] = e[1]\n",
    "\t\tadj[e[1],0] = e[0]\n",
    "\tfor e in red:\n",
    "\t\tadj[e[0],1] = e[1]\n",
    "\t\tadj[e[1],1] = e[0]\n",
    "\tcycles = []\n",
    "\tfor v in range(1,size):\n",
    "\t\tif visited[v]==1:\n",
    "\t\t\tcontinue\n",
    "\t\tvisited[v]==1\n",
    "\t\thead = v\n",
    "\t\tc = [head]\n",
    "\t\tcolor = 0\n",
    "\t\twhile(True):\n",
    "\t\t\tv = adj[v,color]\n",
    "\t\t\tif v == head:\n",
    "\t\t\t\tcycles.append(c)\n",
    "\t\t\t\tbreak\n",
    "\t\t\tvisited[v] = 1\n",
    "\t\t\tc.append(v)\n",
    "\t\t\tcolor = (color+1)%2\n",
    "\treturn cycles\n",
    "\n",
    "\n",
    "def count_Block(P,Q):\n",
    "\ts = set()\n",
    "\tfor i in P[0]:\n",
    "\t\ts.add(abs(i))\n",
    "\tfor i in Q[0]:\n",
    "\t\ts.add(abs(i))\n",
    "\treturn len(s)\n",
    "\t\n",
    "def twoBreakDistance(P,Q):\n",
    "\tblue = colorEdges(P)\n",
    "\tred = colorEdges(Q)\n",
    "\tcycles = colored_edges_cycles(blue,red)\n",
    "\tcnt_Cyc = len(cycles)\n",
    "\tcnt_Block = count_Block(P,Q)\n",
    "\treturn cnt_Block-cnt_Cyc\n",
    "\n",
    "def GraphToGenome(g):\n",
    "\tsize = len(g)*2+1\n",
    "\tvisited = []\n",
    "\tadj = np.zeros(shape=size,dtype=int) ##\n",
    "\tfor e in g:\n",
    "\t\tadj[e[0]] = e[1]\n",
    "\t\tadj[e[1]] = e[0]\n",
    "\tprint('g#=',g)\n",
    "\tGenome = []\n",
    "\tfor e in g:\n",
    "\t\torig = e[0]\n",
    "\t\tif orig in visited:\n",
    "\t\t\tcontinue\n",
    "\t\tvisited.append(orig)\n",
    "\t\tif orig%2 == 0:\n",
    "\t\t\tclose = orig-1\n",
    "\t\telse:\n",
    "\t\t\tclose = orig+1\n",
    "\t\ttmp = []\n",
    "\t\twhile(True):\n",
    "\t\t\tif orig%2 ==0:\n",
    "\t\t\t\ttmp.append(int(orig/2))\n",
    "\t\t\telse:\n",
    "\t\t\t\ttmp.append(int(-(orig+1)/2))\n",
    "\t\t\tdest = adj[orig]\n",
    "\t\t\tvisited.append(dest)\n",
    "\t\t\tif dest==close:\n",
    "\t\t\t\tGenome.append(tmp)\n",
    "\t\t\t\tbreak\n",
    "\t\t\t\n",
    "\t\t\tif dest%2 == 0:\n",
    "\t\t\t\torig = dest-1\n",
    "\t\t\telse:\n",
    "\t\t\t\torig = dest+1\n",
    "\t\t\tvisited.append(orig)\n",
    "\tprint('Genome=',Genome)\n",
    "\treturn Genome\n",
    "\n",
    "def twoBreakOnGenome(P,i1,i2,j1,j2):\n",
    "\tg = colorEdges(P)\n",
    "\tg = twoBreakOnGraph(g,i1,i2,j1,j2)\n",
    "\treturn GraphToGenome(g)\n",
    "\n",
    "def twoBreakOnGraph(g,i1,i2,j1,j2):\n",
    "\trem = [[i1,i2],[i2,i1],[j1,j2],[j2,j1]]\n",
    "\tbg = []\n",
    "\tfor e in g:\n",
    "\t\tif e not in rem:\n",
    "\t\t\tbg.append(e)\n",
    "\tbg.append([i1,j1])\n",
    "\tbg.append([i2,j2])\n",
    "\tprint('bg=',bg)\n",
    "\treturn bg\n",
    "\n",
    "def twoBreakSorting(P,Q):\n",
    "\tred = colorEdges(Q)\n",
    "\tpath = [P]\n",
    "\t\n",
    "\twhile(twoBreakDistance(P,Q)>0):\n",
    "\t\tblue = colorEdges(P)\n",
    "\t\tcycles = colored_edges_cycles(blue,red)\n",
    "\t\tprint('Cycs=',cycles)\n",
    "\t\tfor c in cycles:\n",
    "\t\t\tif len(c)>=4:\n",
    "\t\t\t\tP = twoBreakOnGenome(P,c[0],c[1],c[3],c[2])\n",
    "\t\t\t\tprint('P=',P)\n",
    "\t\t\t\tprint('')\n",
    "\t\t\t\tpath.append(P)\n",
    "\t\t\t\tbreak\n",
    "\treturn path\n",
    "\n",
    "if __name__ == '__main__':\n",
    "\tdataset = open('dataset_369337_5.txt').read().split('\\n')\n",
    "\ttext1 = [list(map(int,dataset[0].strip('(').strip(')').split() ))]\n",
    "\ttext2 = [list(map(int,dataset[1].strip('(').strip(')').split() ))]\n",
    "\t\n",
    "\tpath = twoBreakSorting(text1,text2)\n",
    "\tfor line in path:\n",
    "\t\tfor chromo in line:\n",
    "\t\t\tfor i in range(len(chromo)):\n",
    "\t\t\t\tif i==0:\n",
    "\t\t\t\t\tprint('(',end='')\n",
    "\t\t\t\telse:\n",
    "\t\t\t\t\tprint(' ',end='')\n",
    "\t\t\t\tif chromo[i]>0:\n",
    "\t\t\t\t\tprint('+'+str(chromo[i]),end='')\n",
    "\t\t\t\telse:\n",
    "\t\t\t\t\tprint(str(chromo[i]),end='')\n",
    "\t\t\tprint(')',end='')\n",
    "\t\tprint('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
