#!/usr/bin/perl -w
use List::Util qw/shuffle sum/;


my ($cov1,$cov2,$cov3,$neg,$eql,$all) = @ARGV;

my %cov;
&openCov($cov1);
&openCov($cov2);
&openCov($cov3);
while(my ($key,$val) =each %cov){
	my @cov = @$val;
	my $trimmedmean = &TrimmedMean(@cov);
	if($trimmedmean<1){
		delete $cov{$key};
	}
}

=pod
open COV1,"Coverage_BL6_REP1.negative.txt";
<COV1>;
while(<COV1>){
	chomp;
	my @data = split;
	my @cov = @data[4..$#data];
	@cov = reverse @cov if $data[2] eq "-";
	my $trimmedMean = &TrimmedMean(@cov);
	$cov{$data[0]} = \@cov if $trimmedMean>0;
}
=cut

my %dist;
open FILE,"/ibex/scratch/longy/workspace/polyA_predict/stat/Input.density.exon.negative.all.txt";
<FILE>;
while(<FILE>){
	chomp;
	my ($pas_id,$distance) = (split)[0,4];
	$dist{$pas_id} = $distance;
}

open FILE,$neg;
my $header = <FILE>;
open OUT,">$eql";
print OUT $header;
open OUT2,">$all";
print OUT2 $header;
my @array = shuffle <FILE>;

my %count = ('exon_noMotif'=>0,'exon_hasMotif'=>0,'tandemUTR_noMotif'=>0,'tandemUTR_hasMotif'=>0);
my $number = 21677/4;
my $numOfOutlier = 216;
my $outlierCount = 0;

####total 22050, enm=5000 ehm=5000 tnm=5000 thm=7050
foreach my $ele (@array){
	chomp $ele;
	my ($pas_id,$pas_type) = split /\t/,$ele;
	next if !exists $cov{$pas_id};
	my $cov_ref = $cov{$pas_id};
	print OUT2 join("\t",$ele,@$cov_ref),"\n";
	if(exists $dist{$pas_id} && $dist{$pas_id} < 100){
		$outlierCount++;
		next if $outlierCount > 216;
	}
	$count{$pas_type}++;
	if($pas_type eq 'exon_motif=0' && $count{'exon_noMotif'}<=1423){ 
		print OUT join("\t",$ele,@$cov_ref),"\n";
		$count{'exon_noMotif'}++;
	}
	elsif($pas_type =~ /exon_motif=[1-9]/ && $count{'exon_hasMotif'}<=10000){
		print OUT join("\t",$ele,@$cov_ref),"\n";
		$count{'exon_hasMotif'}++;
	}
	elsif($pas_type eq 'tandemUTR_motif=0' && $count{'tandemUTR_noMotif'}<=1424){
		print OUT join("\t",$ele,@$cov_ref),"\n";
		$count{'tandemUTR_noMotif'}++;
	}
	elsif($pas_type =~ /tandemUTR_motif=[1-9]/ && $count{'tandemUTR_hasMotif'}<=8827){
		print OUT join("\t",$ele,@$cov_ref),"\n";
		$count{'tandemUTR_hasMotif'}++;
	}
}


while(my($key,$val) = each %count){
	print "$key\t$val\n";
}

sub TrimmedMean{
	my @sort = sort{$a<=>$b} @_;
	my $len = @sort;
	my $ltrim = int($len*0.2);
	my $utrim = $len-$ltrim-1;
	my $ave =  &sum(@sort[$ltrim..$utrim])/($utrim-$ltrim+1);
	return $ave;
}
sub openCov{
	my ($rep) = @_;
	open COV1,$rep;
	<COV1>;
	while(<COV1>){
		chomp;
		my @data = split;
		my @cov = @data[4..$#data];
		@cov = reverse @cov if $data[2] eq "-";
		if(exists $cov{$data[0]}){
			my @cov_all = @{$cov{$data[0]}};
			for(my$i=0;$i<@cov;$i++){
				$cov_all[$i] += $cov[$i];
			}
			$cov{$data[0]} = \@cov_all;
		}
		else{
			$cov{$data[0]} = \@cov;
		}
	}
	return \%cov;
}
