{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import os\n",
    "import sys\n",
    "import argparse\n",
    "from supporting import *\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.load('model/Data_bl6.pAs.fibroblast.SeqRCIn.npz')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "pasid = data['test_pasid']\n",
    "label = data['test_labels']\n",
    "dataset = data['test_dataset']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['NegENSMUSG00000033054:6.2', 'NegENSMUSG00000078923:4.2.2',\n",
       "       'PosENSMUSG00000066571.10:2', ..., 'NegENSMUSG00000020178:8.2',\n",
       "       'NegENSMUSG00000005057:10.2', 'PosENSMUSG00000026782.12:2'],\n",
       "      dtype='<U29')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pasid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['NegENSMUSG00000033054:6.2', 'NegENSMUSG00000078923:4.2.2',\n",
       "       'PosENSMUSG00000066571.10:2', ..., 'NegENSMUSG00000020178:8.2',\n",
       "       'NegENSMUSG00000005057:10.2', 'PosENSMUSG00000026782.12:2'],\n",
       "      dtype='<U29')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2 = np.load('model/Data_bl6.pAs.fibroblast.SeqRCOut.npz')\n",
    "pasid2 = data2['test_pasid']\n",
    "dataset2 = data2['test_dataset']\n",
    "dataset2\n",
    "pasid2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[  0.,   0.,   0., 686.]],\n",
       "\n",
       "       [[658.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0., 646.,   0.]],\n",
       "\n",
       "       [[  0., 635.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0., 634.,   0.]],\n",
       "\n",
       "       [[  0., 634.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0., 622.]],\n",
       "\n",
       "       [[602.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0., 595.,   0.]],\n",
       "\n",
       "       [[  0.,   0., 578.,   0.]],\n",
       "\n",
       "       [[576.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0., 577.]],\n",
       "\n",
       "       [[  0.,   0.,   0., 575.]],\n",
       "\n",
       "       [[  0.,   0., 565.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0., 560.]],\n",
       "\n",
       "       [[553.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0., 533.,   0.]],\n",
       "\n",
       "       [[522.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0., 520.]],\n",
       "\n",
       "       [[517.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[508.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0., 507.,   0.,   0.]],\n",
       "\n",
       "       [[492.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[486.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0., 476.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0., 459.]],\n",
       "\n",
       "       [[  0.,   0., 428.,   0.]],\n",
       "\n",
       "       [[409.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0., 403.]],\n",
       "\n",
       "       [[  0.,   0., 380.,   0.]],\n",
       "\n",
       "       [[  0., 378.,   0.,   0.]],\n",
       "\n",
       "       [[358.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0., 357.,   0.]],\n",
       "\n",
       "       [[  0., 350.,   0.,   0.]],\n",
       "\n",
       "       [[336.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[334.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[323.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[323.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0., 306.]],\n",
       "\n",
       "       [[  0.,   0., 300.,   0.]],\n",
       "\n",
       "       [[  0.,   0., 300.,   0.]],\n",
       "\n",
       "       [[299.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0., 298.]],\n",
       "\n",
       "       [[  0.,   0., 289.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0., 285.]],\n",
       "\n",
       "       [[  0.,   0., 283.,   0.]],\n",
       "\n",
       "       [[  0., 280.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0., 280.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0., 273.]],\n",
       "\n",
       "       [[267.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0., 260.,   0.,   0.]],\n",
       "\n",
       "       [[258.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0., 256.,   0.]],\n",
       "\n",
       "       [[  0., 253.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0., 246.,   0.]],\n",
       "\n",
       "       [[239.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0., 238.]],\n",
       "\n",
       "       [[  0.,   0.,   0., 237.]],\n",
       "\n",
       "       [[  0.,   0., 236.,   0.]],\n",
       "\n",
       "       [[  0.,   0., 236.,   0.]],\n",
       "\n",
       "       [[  0., 232.,   0.,   0.]],\n",
       "\n",
       "       [[  0., 234.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0., 231.,   0.]],\n",
       "\n",
       "       [[  0.,   0., 227.,   0.]],\n",
       "\n",
       "       [[  0., 223.,   0.,   0.]],\n",
       "\n",
       "       [[  0., 219.,   0.,   0.]],\n",
       "\n",
       "       [[216.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0., 215.]],\n",
       "\n",
       "       [[  0.,   0.,   0., 145.]],\n",
       "\n",
       "       [[  0.,   0.,   0., 107.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,  98.]],\n",
       "\n",
       "       [[ 74.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  49.,   0.]],\n",
       "\n",
       "       [[ 26.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  25.,   0.]],\n",
       "\n",
       "       [[ 23.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  22.,   0.]],\n",
       "\n",
       "       [[  0.,  22.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  22.,   0.]],\n",
       "\n",
       "       [[ 22.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[ 21.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[ 21.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[ 21.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  22.,   0.]],\n",
       "\n",
       "       [[ 21.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[ 21.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[ 20.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[ 18.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  18.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  18.,   0.]],\n",
       "\n",
       "       [[ 18.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  18.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  17.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  17.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,  17.]],\n",
       "\n",
       "       [[ 17.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[ 16.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[ 16.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,  16.,   0.,   0.]],\n",
       "\n",
       "       [[ 12.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[ 11.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  11.,   0.]],\n",
       "\n",
       "       [[ 11.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  11.,   0.]],\n",
       "\n",
       "       [[ 11.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  11.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  11.,   0.]],\n",
       "\n",
       "       [[ 11.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,  11.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  11.,   0.]],\n",
       "\n",
       "       [[ 11.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[ 11.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  10.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,  10.]],\n",
       "\n",
       "       [[  0.,   0.,  10.,   0.]],\n",
       "\n",
       "       [[  0.,  10.,   0.,   0.]],\n",
       "\n",
       "       [[ 10.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[ 10.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[ 10.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  10.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,  10.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,  10.]],\n",
       "\n",
       "       [[ 10.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  10.,   0.]],\n",
       "\n",
       "       [[  0.,  10.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  10.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  10.,   0.]],\n",
       "\n",
       "       [[ 10.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,  10.]],\n",
       "\n",
       "       [[  0.,   0.,  10.,   0.]],\n",
       "\n",
       "       [[ 10.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[ 10.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  10.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,  10.]],\n",
       "\n",
       "       [[ 10.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,  10.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,  10.,   0.]],\n",
       "\n",
       "       [[  0.,   9.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   6.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   6.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   6.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   6.,   0.]],\n",
       "\n",
       "       [[  0.,   6.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   6.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   6.]],\n",
       "\n",
       "       [[  0.,   0.,   6.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   6.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   6.,   0.]],\n",
       "\n",
       "       [[  6.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  6.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   6.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   6.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   6.]],\n",
       "\n",
       "       [[  0.,   0.,   6.,   0.]],\n",
       "\n",
       "       [[  6.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  6.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  6.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   6.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   6.,   0.]],\n",
       "\n",
       "       [[  6.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   6.]],\n",
       "\n",
       "       [[  4.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   2.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   2.]],\n",
       "\n",
       "       [[  2.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   2.,   0.]],\n",
       "\n",
       "       [[  2.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   2.]],\n",
       "\n",
       "       [[  2.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   2.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   2.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   2.,   0.]],\n",
       "\n",
       "       [[  2.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   2.]],\n",
       "\n",
       "       [[  0.,   0.,   2.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   1.,   0.]],\n",
       "\n",
       "       [[  1.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   1.]],\n",
       "\n",
       "       [[  1.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   1.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   1.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   1.]],\n",
       "\n",
       "       [[  0.,   0.,   1.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   1.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   0.]]], dtype=float32)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset[7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[  0.,   0.,   0.,   1., 686.]],\n",
       "\n",
       "       [[  1.,   0.,   0.,   0., 658.]],\n",
       "\n",
       "       [[  0.,   0.,   1.,   0., 646.]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[  0.,   0.,   1.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   1.,   0.,   0.]],\n",
       "\n",
       "       [[  0.,   0.,   0.,   1.,   0.]]], dtype=float32)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset2[7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "para = np.load('para/SeqRCOut838.npz')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('tf_learning_rate', array(0.00157514))\n",
      "('tf_momentum', array(0.98804432))\n",
      "('tf_motif_init_weight', array(0.05743483))\n",
      "('tf_fc_init_weight', array(0.029659))\n",
      "('tf_motif_weight_decay', array(1.18161099e-05))\n",
      "('tf_fc_weight_decay', array(6.59246614e-05))\n",
      "('tf_keep_prob', array(0.5))\n"
     ]
    }
   ],
   "source": [
    "for key,val in para.items():\n",
    "    print(key,val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "para = np.load('model/BL_hparamO1.npz')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('tf_learning_rate', array(0.00157514))\n",
      "('tf_momentum', array(0.98804432))\n",
      "('tf_motif_init_weight', array(0.05743483))\n",
      "('tf_fc_init_weight', array(0.029659))\n",
      "('tf_motif_weight_decay', array(1.18161099e-05))\n",
      "('tf_fc_weight_decay', array(6.59246614e-05))\n",
      "('tf_keep_prob', array(0.5))\n"
     ]
    }
   ],
   "source": [
    "for key,val in para.items():\n",
    "    print(key,val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "hyper_dict = {\n",
    "    'tf_learning_rate': 0.004850437839169244,\n",
    "    'tf_momentum': 0.9882594312238793,\n",
    "    'tf_motif_init_weight': 0.35740711113197743,\n",
    "    'tf_fc_init_weight': 0.036140946476915195,\n",
    "    'tf_motif_weight_decay': 1.1396134513068413e-05,\n",
    "    'tf_fc_weight_decay': 0.0004991107770209706,\n",
    "    'tf_keep_prob': 1.0,\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tf_learning_rate 0.004850437839169244\n",
      "tf_momentum 0.9882594312238793\n",
      "tf_motif_init_weight 0.35740711113197743\n",
      "tf_fc_init_weight 0.036140946476915195\n",
      "tf_motif_weight_decay 1.1396134513068413e-05\n",
      "tf_fc_weight_decay 0.0004991107770209706\n",
      "tf_keep_prob 1.0\n"
     ]
    }
   ],
   "source": [
    "for key,val in hyper_dict.items():\n",
    "    print(key,val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    " np.savez('model/BLprop=1_hparam.npz', **hyper_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.load('model/Data_bl6.pAs.fibroblast.Rc.npz')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([u'NegENSMUSG00000033054:6.2', u'NegENSMUSG00000078923:4.2.2',\n",
       "       u'PosENSMUSG00000066571.10:2', ..., u'NegENSMUSG00000020178:8.2',\n",
       "       u'NegENSMUSG00000005057:10.2', u'PosENSMUSG00000026782.12:2'],\n",
       "      dtype='<U29')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pasid2 = data['test_pasid']\n",
    "dataset2 = data['test_dataset']\n",
    "dataset2[7]\n",
    "pasid2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
