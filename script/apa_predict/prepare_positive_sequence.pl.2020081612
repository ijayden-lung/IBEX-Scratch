#!/usr/bin/perl -w
#
#Update Nov 4,2019
#
#
use List::Util qw(first max maxstr min minstr reduce shuffle sum);

my ($COV,$SEQ,$OUT,$SPE) = @ARGV;
my $width = 100;

my @motif;
my @chr;
if($SPE eq "hg38"){
	@motif = qw/AAGAAA AATAAA AATACA AATAGA AATATA AATGAA ACTAAA AGTAAA ATTAAA CATAAA CATAAA GATAAA TATAAA AAAAAG/; ##错了的
	@chr = (1..22,"X");  ########This is for mouse
}
elsif($SPE eq "mm10"){
	@motif = qw/AAGAAA AATAAA AATACA AATAGA AATATA AATGAA ACTAAA AGTAAA ATTAAA CATAAA CATAAA GATAAA TATAAA AAAAAG/;
	@chr = (1..19,"X");  ########This is for mouse
 }
my %chr;
foreach my $chr (@chr){
	open REF,"/ibex/scratch/longy/cnda/ensembl/oneLine/$SPE.$chr.fa";
	$chr{"chr$chr"} = <REF>;
}

open FILE,"$SEQ";
open OUT,">$OUT";
my $header = <FILE>;
print OUT $header;;
my $cov_ref  =  &openCov($COV);
while(<FILE>){
	chomp;
	my ($pas_id,$pas_type,$chr,$pos,$srd,$symbol,$usage) = split;
	next if $chr eq "chrY";
	my $str = $pos-$width;
	my $end = $pos+$width;
	my $sequence = substr($chr{$chr},$str-1,$end-$str+1);
	if($srd eq "-"){
		$sequence =~ tr/ATCG/TAGC/;
		$sequence = reverse $sequence;
	}
	my $subseq = substr($sequence,65,31);
	my $motifNum = 0;
	foreach my $motif(@motif){
		$motifNum += ($subseq =~ s/$motif/$motif/g);
	}
	$pas_type = $pas_type."_motif=$motifNum";
	next if !exists $cov_ref->{$pas_id};
	my $coverage_ref = $cov_ref->{$pas_id};
	my @coverage = @$coverage_ref;
	print OUT "$pas_id\t$pas_type\t$chr\t$pos\t$srd\t$symbol\t$usage\t$sequence\t";
	print OUT join("\t",@coverage),"\n";
}

sub TrimmedMean{
	#my @sort = sort{$a<=>$b} @_;
	#my $len = @sort;
	#my $ltrim = int($len*0.2);
	#my $utrim = $len-$ltrim-1;
	#my $ave =  &sum(@sort[$ltrim..$utrim])/($utrim-$ltrim+1);
	my $sum = 0;
	my $count=0;
	foreach my $ele (@_){
		if($ele>0){
			$sum+=$ele;
			$count++;
		}
	}
	my $ave = $sum/$count;
	return $ave;
}
sub openCov{
	my ($rep) = @_;
	open COV1,$rep;
	<COV1>;
	my %cov;
	while(<COV1>){
		chomp;
		my @data = split;
		my @cov = @data[4..$#data];
		my $trimmedmean = &TrimmedMean(@cov);
		if($trimmedmean>10){
			@cov = reverse @cov if $data[2] eq "-";
			$cov{$data[0]} = \@cov;
		}

	}
	return \%cov;
}
