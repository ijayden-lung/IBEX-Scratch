#!/usr/bin/perl -w
#### Author: Yongkang Long
#### Update: Feb 23, 2020

use Statistics::Descriptive;
use List::Util qw(first max maxstr min minstr reduce shuffle sum);

my $cutofftpm = 0.5;

my %mapping;
open FILE,"WES_database.txt";
while(<FILE>){
	chomp;
	my ($sample,$file) = split /\t/;
	$mapping{$sample} = $file;
}

my %lastExonJucn;
open ENS,"zcat /home/longy/cnda/ensembl/Homo_sapiens.GRCh37.87.gtf.gz | awk '(\$3 == \"exon\" || \$3 == \"transcript\")' |";
my $preTrans = "None\t0";
my $pre2Trans = "None\t0";
while(<ENS>){
	chomp;
	my ($type,$start,$end,$strand,$trans_id) = (split)[2,3,4,6,13];
	$trans_id =~ s/\"|\;//g;
	if($strand eq "-"){
		$end = $start;
	}       
	if($type eq "transcript"){
		my ($transcript,$position) = split /\t/,$pre2Trans;
		$lastExonJucn{$transcript} = $position;
	}       
	$pre2Trans = $preTrans;
	$preTrans = "$trans_id\t$end";


}



my %targets;
my %stop_gained;
my %frameshift;
my %splice_acceptor_variant;
my %transcript_ablation;
my %NMDtranscript;
my %splice_donor_variant;
my %transcript_amplification;

#my %sample_nmd_num;
#my @sample = qw/18DG0147 15DG0918 16DG1333 10DG0840 10DG0792 14DG1661L 19DG0152L 19DG1391L 19DG1424L/;
open FILE,"tpm.tsv";
$header = <FILE>;
chomp $header;
@header = split /\t/,$header;
my %ori_tpm;
my %ori_sample;
for(my$i=6;$i<@header;$i++){
#foreach my $sample (@sample){
	open FILE,"stop_gained/$sample.tsv";
	<FILE>;
	while(<FILE>){
		chomp;
		my ($gene_id,$gene_name,$tpm,$log2tpm,$zscore_tpm,$zscore_log2tpm,$variants,$sample,$type) = split;
		push @{$ori_tpm{$gene_id}},$tpm;
		push @{$ori_sample{$gene_id}},$sample;

	}
}



foreach my $sample (@sample){
	my $sample_tmp = $sample;
	$sample =~ s/L//g;
	$sample =~ s/MG//g;
	if(!exists $mapping{$sample}){
		print "No WES: $sample\n";
		next;
	}
	my $file = $mapping{$sample};
	open FILE2,"$file";
	my %nmd_gene;
	my %low_impact_gene;
	my %high_impact_gene;
	$sample = $sample_tmp;
	while(<FILE2>){
		next if $_ =~ /^\#/;
		chomp;
		my ($location,$gene_id,$trans_id,$consequence,$extra) = (split /\t/)[0,3,4,6,-1];
		my ($chr,$position) = split /\_/,$location;
        if($extra =~ /IMPACT=HIGH/){
			my $threshold =10000000000000000000000;
			if($consequence =~ /NMD/){
				$NMDtranscript{$sample}->{$gene_id} = '';
			}
			if($consequence =~ /splice_acceptor_variant/){
				$splice_acceptor_variant{$sample}->{$gene_id} = '';
			}
			elsif($consequence =~ /transcript_ablation/){
				$transcript_ablation{$sample}->{$gene_id} = '';
			}
			elsif($consequence =~ /splice_donor_variant/){
				$splice_donor_variant{$sample}->{$gene_id} = '';
			}
			elsif($consequence =~ /transcript_amplification/){
				$transcript_amplification{$sample}->{$gene_id} = '';
			}
			elsif($consequence =~ /stop_gained/){
				$threshold = 50;
				if($extra =~ /STRAND=1/){####Positive Strand
					if($position-$lastExonJucn{$trans_id}<-$threshold){
						$stop_gained{$sample}->{$gene_id} = '';
					}
				}
				else{   #####Negative Strand
					if($position-$lastExonJucn{$trans_id}>$threshold){
						$stop_gained{$sample}->{$gene_id} = '';
					}
				}
			}
			elsif($consequence =~ /frameshift_variant/){
				$threshold = 120;
				if($extra =~ /STRAND=1/){####Positive Strand
					if($position-$lastExonJucn{$trans_id}<-$threshold){
						$frameshift{$sample}->{$gene_id} = '';
					}
				}
				else{   #####Negative Strand
					if($position-$lastExonJucn{$trans_id}>$threshold){
						$frameshift{$sample}->{$gene_id} = '';
					}
				}
			}
		}
	}
}

###
my ($tpm,$log2tpm,$tpm_zscore,$log2tpm_zscore) = &getZscore();


open OUT,">mean_table.tsv";
print OUT "sample\tstop_gained\tframeshift\tsplice_acceptor_variant\ttranscript_ablation\tsplice_donor_variant\ttranscript_amplification\tNMDtranscript\ttarget\n";
while(my($sample,$val) = each %$log2tpm_zscore){
	my $stop_gained = 0;
	my $frameshift =0;
	my $splice_acceptor_variant =0;
	my $transcript_ablation =0;
	my $NMDtranscript =0;
	my $splice_donor_variant =0;
	my $transcript_amplification =0;
	my $target =0;
	my $stop_gained_c = 0;
	my $frameshift_c =0;
	my $splice_acceptor_variant_c =0;
	my $transcript_ablation_c =0;
	my $NMDtranscript_c =0;
	my $splice_donor_variant_c =0;
	my $transcript_amplification_c =0;
	my $target_c =0;
	print "$sample\n";
	while(my($gene_id,$log2tpm_zscore) = each %$val){
		my $log2tpm = $log2tpm->{$sample}->{$gene_id};
		if(exists $stop_gained{$sample}->{$gene_id}){
			$stop_gained += $log2tpm_zscore;
			$stop_gained_c++;
			$target += $log2tpm_zscore;
			$target_c++;
		}
		if(exists $frameshift{$sample}->{$gene_id}){
			$frameshift += $log2tpm_zscore;
			$frameshift_c++;
			$target += $log2tpm_zscore;
			$target_c++;
		}
		if(exists $splice_acceptor_variant{$sample}->{$gene_id}){
			$splice_acceptor_variant += $log2tpm_zscore;
			$splice_acceptor_variant_c++;
		}
		if(exists $transcript_ablation{$sample}->{$gene_id}){
			$transcript_ablation += $log2tpm_zscore;
			$transcript_ablation_c++;
		}
		if(exists $NMDtranscript{$sample}->{$gene_id}){
			$NMDtranscript += $log2tpm_zscore;
			$NMDtranscript_c++;
		}
		if(exists $splice_donor_variant{$sample}->{$gene_id}){
			$splice_donor_variant += $log2tpm_zscore;
			$splice_donor_variant_c++;
		}
		if(exists $transcript_amplification{$sample}->{$gene_id}){
			$transcript_amplification += $log2tpm_zscore;
			$transcript_amplification_c++;
		}
	}
	$stop_gained = $stop_gained_c>0 ? $stop_gained/$stop_gained_c : "NaN";
	$frameshift = $frameshift_c >0 ? $frameshift/$frameshift_c  : "NaN" ;
	$splice_acceptor_variant = $splice_acceptor_variant_c >0 ? $splice_acceptor_variant/$splice_acceptor_variant_c  : "NaN";
	$transcript_ablation = $transcript_ablation_c>0 ? $transcript_ablation/$transcript_ablation_c  : "NaN";
	$NMDtranscript = $NMDtranscript_c >0 ? $NMDtranscript/$NMDtranscript_c  : "NaN";
	$splice_donor_variant = $splice_donor_variant_c >0 ? $splice_donor_variant/$splice_donor_variant_c  : "NaN";
	$transcript_amplification = $transcript_amplification_c >0 ? $transcript_amplification/$transcript_amplification_c  : "NaN";
	$target = $target_c>0 ? $target/$target_c  : "NaN";
	print OUT "$sample\t$stop_gained\t$frameshift\t$splice_acceptor_variant\t$transcript_ablation\t$splice_donor_variant\t$transcript_amplification\t$NMDtranscript\t$target\n";
	
}



sub getZscore{
	my %tpm;
	my %log2tpm;
	my %tpm_zscore;
	my %log2tpm_zscore;
	while(my ($gene_id,$val) = each %ori_tpm){
		my @tpm = @$val;
		my @header = @{$ori_sample{$gene_id}};
		my @log2tpm;
		for(my$i=0;$i<@tpm;$i++){
			$log2tpm[$i] = log($tpm[$i]+0.001)/log(2);   ######Log2 Scale
		}
		my $stat = Statistics::Descriptive::Full->new();
		$stat->add_data(@tpm);
		my $mean = $stat->mean();
		my $standard_deviation=$stat->standard_deviation();
		my $median=$stat->median();
		for(my$j=0;$j<@tpm;$j++){
			my $zscore = ($tpm[$j]-$mean)/$standard_deviation;  #####calculate zscore
			$tpm{$header[$j]}->{$gene_id} = $tpm[$j];
			$tpm_zscore{$header[$j]}->{$gene_id} = $zscore;
		}
		my $log2stat = Statistics::Descriptive::Full->new();
		$log2stat->add_data(@log2tpm);
		my $log2mean = $log2stat->mean();
		my $log2standard_deviation=$log2stat->standard_deviation();
		for(my$j=0;$j<@log2tpm;$j++){
			my $zscore = ($log2tpm[$j]-$log2mean)/$log2standard_deviation;  #####calculate zscore
			$log2tpm{$header[$j]}->{$gene_id} = $log2tpm[$j];
			$log2tpm_zscore{$header[$j]}->{$gene_id} = $zscore;
		}
	}
	return (\%tpm,\%log2tpm,\%tpm_zscore,\%log2tpm_zscore);
}

sub printInfo{
	my ($sample) = @_;
	open OUT,">stop_gained/$sample.tsv";
	print OUT "gene_id\tgene_name\ttpm\tlog2tpm\tzscore_tpm\tzscore_log2tpm\tvariants\tsample\ttype\n";

	my $type = "SMG+";
	if($sample =~ /L/){
		$type = "SMG8/9-";
	}
	my $sample_tmp = $sample;

	$sample =~ s/L//g;
	$sample =~ s/MG//g;
	my $targets_ref = $targets{$sample};

	$sample = $sample_tmp;
	my $tpm_ref = $tpm->{$sample};
	my $log2tpm_ref = $log2tpm->{$sample};
	my $tpm_zscore_ref = $tpm_zscore->{$sample};
	my $log2tpm_zscore_ref = $log2tpm_zscore->{$sample};
	while(my ($gene_id,$zygo) = each %$tpm_zscore_ref){
		my $variant = "NoVariant";
		if(exists $targets_ref->{$gene_id}) {
			$variant = $targets_ref->{$gene_id};
		}
		print OUT "$gene_id\t$gene->{$gene_id}\t$tpm_ref->{$gene_id}\t$log2tpm_ref->{$gene_id}\t$tpm_zscore_ref->{$gene_id}\t$log2tpm_zscore_ref->{$gene_id}\t$variant\t$sample\t$type\n";
	}
}

